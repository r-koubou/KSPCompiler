//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KSPExLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KSPCompiler.Infrastructures.Parser.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KSPExLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER_LITERAL=1, EOL=2, MULTI_LINE_DELIMITER=3, Whitespace=4, BlockComment=5, 
		DECLARE=6, ON=7, END=8, FUNCTION=9, IF=10, ELSE=11, SELECT=12, CASE=13, 
		TO=14, WHILE=15, CALL=16, EXIT=17, CONTINUE=18, PREPROCESSOR_SET_COND=19, 
		PREPROCESSOR_RESET_COND=20, PREPROCESSOR_CODE_IF=21, PREPROCESSOR_CODE_IF_NOT=22, 
		PREPROCESSOR_CODE_END_IF=23, BOOL_GT=24, BOOL_LT=25, BOOL_GE=26, BOOL_LE=27, 
		BOOL_EQ=28, BOOL_NE=29, BOOL_NOT=30, BOOL_AND=31, BOOL_OR=32, BOOL_XOR=33, 
		ASSIGN=34, PLUS=35, MINUS=36, MUL=37, DIV=38, MOD=39, BIT_AND=40, BIT_OR=41, 
		BIT_NOT=42, BIT_XOR=43, STRING_ADD=44, LPARENT=45, RPARENT=46, LBRACKET=47, 
		RBRACKET=48, COMMA=49, REAL_LITERAL=50, STRING_LITERAL=51, IDENTIFIER=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER_LITERAL", "DECIMAL_LITERAL", "HEX_LITERAL", "EXT_HEX_LITERAL", 
		"EXT_BIN_LITERAL", "EOL", "CR", "LF", "MULTI_LINE_DELIMITER", "Whitespace", 
		"BlockComment", "DECLARE", "ON", "END", "FUNCTION", "IF", "ELSE", "SELECT", 
		"CASE", "TO", "WHILE", "CALL", "EXIT", "CONTINUE", "PREPROCESSOR_SET_COND", 
		"PREPROCESSOR_RESET_COND", "PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", 
		"PREPROCESSOR_CODE_END_IF", "BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", 
		"BOOL_EQ", "BOOL_NE", "BOOL_NOT", "BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "BIT_AND", "BIT_OR", "BIT_NOT", 
		"BIT_XOR", "STRING_ADD", "LPARENT", "RPARENT", "LBRACKET", "RBRACKET", 
		"COMMA", "REAL_LITERAL", "STRING_LITERAL", "EscapeSequence", "IDENTIFIER", 
		"LETTER", "LETTER_OR_DIGIT", "VARIABLE_PREFIX"
	};


	public KSPExLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public KSPExLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'declare'", "'on'", "'end'", "'function'", 
		"'if'", "'else'", "'select'", "'case'", "'to'", "'while'", "'call'", "'exit'", 
		"'continue'", "'SET_CONDITION'", "'RESET_CONDITION'", "'USE_CODE_IF'", 
		"'USE_CODE_IF_NOT'", "'END_USE_CODE'", "'>'", "'<'", "'>='", "'<='", "'='", 
		"'#'", "'not'", "'and'", "'or'", "'xor'", "':='", "'+'", "'-'", "'*'", 
		"'/'", "'mod'", "'.and.'", "'.or.'", "'.not.'", "'.xor.'", "'&'", "'('", 
		"')'", "'['", "']'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER_LITERAL", "EOL", "MULTI_LINE_DELIMITER", "Whitespace", 
		"BlockComment", "DECLARE", "ON", "END", "FUNCTION", "IF", "ELSE", "SELECT", 
		"CASE", "TO", "WHILE", "CALL", "EXIT", "CONTINUE", "PREPROCESSOR_SET_COND", 
		"PREPROCESSOR_RESET_COND", "PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", 
		"PREPROCESSOR_CODE_END_IF", "BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", 
		"BOOL_EQ", "BOOL_NE", "BOOL_NOT", "BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "BIT_AND", "BIT_OR", "BIT_NOT", 
		"BIT_XOR", "STRING_ADD", "LPARENT", "RPARENT", "LBRACKET", "RBRACKET", 
		"COMMA", "REAL_LITERAL", "STRING_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KSPExLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KSPExLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,467,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,0,
		3,0,130,8,0,1,1,1,1,5,1,134,8,1,10,1,12,1,137,9,1,1,2,1,2,4,2,141,8,2,
		11,2,12,2,142,1,2,1,2,1,3,1,3,1,3,1,3,4,3,151,8,3,11,3,12,3,152,1,4,1,
		4,1,4,1,4,4,4,159,8,4,11,4,12,4,160,1,5,1,5,3,5,165,8,5,1,5,3,5,168,8,
		5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,5,8,179,8,8,10,8,12,8,182,9,8,1,
		8,1,8,1,9,4,9,187,8,9,11,9,12,9,188,1,9,1,9,1,10,1,10,5,10,195,8,10,10,
		10,12,10,198,9,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,
		20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
		22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,
		30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,
		35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,
		39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,
		45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,
		47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,
		52,1,52,1,53,1,53,1,54,1,54,1,55,4,55,427,8,55,11,55,12,55,428,1,55,1,
		55,4,55,433,8,55,11,55,12,55,434,1,56,1,56,1,56,5,56,440,8,56,10,56,12,
		56,443,9,56,1,56,1,56,1,57,1,57,1,57,1,58,3,58,451,8,58,1,58,1,58,5,58,
		455,8,58,10,58,12,58,458,9,58,1,59,1,59,1,60,1,60,3,60,464,8,60,1,61,1,
		61,1,196,0,62,1,1,3,0,5,0,7,0,9,0,11,2,13,0,15,0,17,3,19,4,21,5,23,6,25,
		7,27,8,29,9,31,10,33,11,35,12,37,13,39,14,41,15,43,16,45,17,47,18,49,19,
		51,20,53,21,55,22,57,23,59,24,61,25,63,26,65,27,67,28,69,29,71,30,73,31,
		75,32,77,33,79,34,81,35,83,36,85,37,87,38,89,39,91,40,93,41,95,42,97,43,
		99,44,101,45,103,46,105,47,107,48,109,49,111,50,113,51,115,0,117,52,119,
		0,121,0,123,0,1,0,10,3,0,48,57,65,70,97,102,2,0,72,72,104,104,1,0,48,49,
		2,0,9,9,32,32,3,0,9,9,12,12,32,32,4,0,10,10,13,13,34,34,92,92,8,0,34,34,
		39,39,92,92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,
		1,0,48,57,4,0,33,33,36,37,63,64,126,126,475,0,1,1,0,0,0,0,11,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
		0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
		0,0,0,117,1,0,0,0,1,129,1,0,0,0,3,131,1,0,0,0,5,138,1,0,0,0,7,146,1,0,
		0,0,9,154,1,0,0,0,11,167,1,0,0,0,13,169,1,0,0,0,15,171,1,0,0,0,17,173,
		1,0,0,0,19,186,1,0,0,0,21,192,1,0,0,0,23,203,1,0,0,0,25,211,1,0,0,0,27,
		214,1,0,0,0,29,218,1,0,0,0,31,227,1,0,0,0,33,230,1,0,0,0,35,235,1,0,0,
		0,37,242,1,0,0,0,39,247,1,0,0,0,41,250,1,0,0,0,43,256,1,0,0,0,45,261,1,
		0,0,0,47,266,1,0,0,0,49,275,1,0,0,0,51,289,1,0,0,0,53,305,1,0,0,0,55,317,
		1,0,0,0,57,333,1,0,0,0,59,346,1,0,0,0,61,348,1,0,0,0,63,350,1,0,0,0,65,
		353,1,0,0,0,67,356,1,0,0,0,69,358,1,0,0,0,71,360,1,0,0,0,73,364,1,0,0,
		0,75,368,1,0,0,0,77,371,1,0,0,0,79,375,1,0,0,0,81,378,1,0,0,0,83,380,1,
		0,0,0,85,382,1,0,0,0,87,384,1,0,0,0,89,386,1,0,0,0,91,390,1,0,0,0,93,396,
		1,0,0,0,95,401,1,0,0,0,97,407,1,0,0,0,99,413,1,0,0,0,101,415,1,0,0,0,103,
		417,1,0,0,0,105,419,1,0,0,0,107,421,1,0,0,0,109,423,1,0,0,0,111,426,1,
		0,0,0,113,436,1,0,0,0,115,446,1,0,0,0,117,450,1,0,0,0,119,459,1,0,0,0,
		121,463,1,0,0,0,123,465,1,0,0,0,125,130,3,3,1,0,126,130,3,5,2,0,127,130,
		3,7,3,0,128,130,3,9,4,0,129,125,1,0,0,0,129,126,1,0,0,0,129,127,1,0,0,
		0,129,128,1,0,0,0,130,2,1,0,0,0,131,135,2,49,57,0,132,134,2,48,57,0,133,
		132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,4,1,0,
		0,0,137,135,1,0,0,0,138,140,5,57,0,0,139,141,7,0,0,0,140,139,1,0,0,0,141,
		142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,7,
		1,0,0,145,6,1,0,0,0,146,147,5,48,0,0,147,148,5,120,0,0,148,150,1,0,0,0,
		149,151,7,0,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,
		1,0,0,0,153,8,1,0,0,0,154,155,5,48,0,0,155,156,5,98,0,0,156,158,1,0,0,
		0,157,159,7,2,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,
		161,1,0,0,0,161,10,1,0,0,0,162,164,3,13,6,0,163,165,3,15,7,0,164,163,1,
		0,0,0,164,165,1,0,0,0,165,168,1,0,0,0,166,168,3,15,7,0,167,162,1,0,0,0,
		167,166,1,0,0,0,168,12,1,0,0,0,169,170,5,13,0,0,170,14,1,0,0,0,171,172,
		5,10,0,0,172,16,1,0,0,0,173,174,5,46,0,0,174,175,5,46,0,0,175,176,5,46,
		0,0,176,180,1,0,0,0,177,179,7,3,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,
		178,1,0,0,0,180,181,1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,184,3,
		11,5,0,184,18,1,0,0,0,185,187,7,4,0,0,186,185,1,0,0,0,187,188,1,0,0,0,
		188,186,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,191,6,9,0,0,191,20,
		1,0,0,0,192,196,5,123,0,0,193,195,9,0,0,0,194,193,1,0,0,0,195,198,1,0,
		0,0,196,197,1,0,0,0,196,194,1,0,0,0,197,199,1,0,0,0,198,196,1,0,0,0,199,
		200,5,125,0,0,200,201,1,0,0,0,201,202,6,10,0,0,202,22,1,0,0,0,203,204,
		5,100,0,0,204,205,5,101,0,0,205,206,5,99,0,0,206,207,5,108,0,0,207,208,
		5,97,0,0,208,209,5,114,0,0,209,210,5,101,0,0,210,24,1,0,0,0,211,212,5,
		111,0,0,212,213,5,110,0,0,213,26,1,0,0,0,214,215,5,101,0,0,215,216,5,110,
		0,0,216,217,5,100,0,0,217,28,1,0,0,0,218,219,5,102,0,0,219,220,5,117,0,
		0,220,221,5,110,0,0,221,222,5,99,0,0,222,223,5,116,0,0,223,224,5,105,0,
		0,224,225,5,111,0,0,225,226,5,110,0,0,226,30,1,0,0,0,227,228,5,105,0,0,
		228,229,5,102,0,0,229,32,1,0,0,0,230,231,5,101,0,0,231,232,5,108,0,0,232,
		233,5,115,0,0,233,234,5,101,0,0,234,34,1,0,0,0,235,236,5,115,0,0,236,237,
		5,101,0,0,237,238,5,108,0,0,238,239,5,101,0,0,239,240,5,99,0,0,240,241,
		5,116,0,0,241,36,1,0,0,0,242,243,5,99,0,0,243,244,5,97,0,0,244,245,5,115,
		0,0,245,246,5,101,0,0,246,38,1,0,0,0,247,248,5,116,0,0,248,249,5,111,0,
		0,249,40,1,0,0,0,250,251,5,119,0,0,251,252,5,104,0,0,252,253,5,105,0,0,
		253,254,5,108,0,0,254,255,5,101,0,0,255,42,1,0,0,0,256,257,5,99,0,0,257,
		258,5,97,0,0,258,259,5,108,0,0,259,260,5,108,0,0,260,44,1,0,0,0,261,262,
		5,101,0,0,262,263,5,120,0,0,263,264,5,105,0,0,264,265,5,116,0,0,265,46,
		1,0,0,0,266,267,5,99,0,0,267,268,5,111,0,0,268,269,5,110,0,0,269,270,5,
		116,0,0,270,271,5,105,0,0,271,272,5,110,0,0,272,273,5,117,0,0,273,274,
		5,101,0,0,274,48,1,0,0,0,275,276,5,83,0,0,276,277,5,69,0,0,277,278,5,84,
		0,0,278,279,5,95,0,0,279,280,5,67,0,0,280,281,5,79,0,0,281,282,5,78,0,
		0,282,283,5,68,0,0,283,284,5,73,0,0,284,285,5,84,0,0,285,286,5,73,0,0,
		286,287,5,79,0,0,287,288,5,78,0,0,288,50,1,0,0,0,289,290,5,82,0,0,290,
		291,5,69,0,0,291,292,5,83,0,0,292,293,5,69,0,0,293,294,5,84,0,0,294,295,
		5,95,0,0,295,296,5,67,0,0,296,297,5,79,0,0,297,298,5,78,0,0,298,299,5,
		68,0,0,299,300,5,73,0,0,300,301,5,84,0,0,301,302,5,73,0,0,302,303,5,79,
		0,0,303,304,5,78,0,0,304,52,1,0,0,0,305,306,5,85,0,0,306,307,5,83,0,0,
		307,308,5,69,0,0,308,309,5,95,0,0,309,310,5,67,0,0,310,311,5,79,0,0,311,
		312,5,68,0,0,312,313,5,69,0,0,313,314,5,95,0,0,314,315,5,73,0,0,315,316,
		5,70,0,0,316,54,1,0,0,0,317,318,5,85,0,0,318,319,5,83,0,0,319,320,5,69,
		0,0,320,321,5,95,0,0,321,322,5,67,0,0,322,323,5,79,0,0,323,324,5,68,0,
		0,324,325,5,69,0,0,325,326,5,95,0,0,326,327,5,73,0,0,327,328,5,70,0,0,
		328,329,5,95,0,0,329,330,5,78,0,0,330,331,5,79,0,0,331,332,5,84,0,0,332,
		56,1,0,0,0,333,334,5,69,0,0,334,335,5,78,0,0,335,336,5,68,0,0,336,337,
		5,95,0,0,337,338,5,85,0,0,338,339,5,83,0,0,339,340,5,69,0,0,340,341,5,
		95,0,0,341,342,5,67,0,0,342,343,5,79,0,0,343,344,5,68,0,0,344,345,5,69,
		0,0,345,58,1,0,0,0,346,347,5,62,0,0,347,60,1,0,0,0,348,349,5,60,0,0,349,
		62,1,0,0,0,350,351,5,62,0,0,351,352,5,61,0,0,352,64,1,0,0,0,353,354,5,
		60,0,0,354,355,5,61,0,0,355,66,1,0,0,0,356,357,5,61,0,0,357,68,1,0,0,0,
		358,359,5,35,0,0,359,70,1,0,0,0,360,361,5,110,0,0,361,362,5,111,0,0,362,
		363,5,116,0,0,363,72,1,0,0,0,364,365,5,97,0,0,365,366,5,110,0,0,366,367,
		5,100,0,0,367,74,1,0,0,0,368,369,5,111,0,0,369,370,5,114,0,0,370,76,1,
		0,0,0,371,372,5,120,0,0,372,373,5,111,0,0,373,374,5,114,0,0,374,78,1,0,
		0,0,375,376,5,58,0,0,376,377,5,61,0,0,377,80,1,0,0,0,378,379,5,43,0,0,
		379,82,1,0,0,0,380,381,5,45,0,0,381,84,1,0,0,0,382,383,5,42,0,0,383,86,
		1,0,0,0,384,385,5,47,0,0,385,88,1,0,0,0,386,387,5,109,0,0,387,388,5,111,
		0,0,388,389,5,100,0,0,389,90,1,0,0,0,390,391,5,46,0,0,391,392,5,97,0,0,
		392,393,5,110,0,0,393,394,5,100,0,0,394,395,5,46,0,0,395,92,1,0,0,0,396,
		397,5,46,0,0,397,398,5,111,0,0,398,399,5,114,0,0,399,400,5,46,0,0,400,
		94,1,0,0,0,401,402,5,46,0,0,402,403,5,110,0,0,403,404,5,111,0,0,404,405,
		5,116,0,0,405,406,5,46,0,0,406,96,1,0,0,0,407,408,5,46,0,0,408,409,5,120,
		0,0,409,410,5,111,0,0,410,411,5,114,0,0,411,412,5,46,0,0,412,98,1,0,0,
		0,413,414,5,38,0,0,414,100,1,0,0,0,415,416,5,40,0,0,416,102,1,0,0,0,417,
		418,5,41,0,0,418,104,1,0,0,0,419,420,5,91,0,0,420,106,1,0,0,0,421,422,
		5,93,0,0,422,108,1,0,0,0,423,424,5,44,0,0,424,110,1,0,0,0,425,427,2,48,
		57,0,426,425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,
		430,1,0,0,0,430,432,5,46,0,0,431,433,2,48,57,0,432,431,1,0,0,0,433,434,
		1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,112,1,0,0,0,436,441,5,34,0,
		0,437,440,8,5,0,0,438,440,3,115,57,0,439,437,1,0,0,0,439,438,1,0,0,0,440,
		443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,441,1,
		0,0,0,444,445,5,34,0,0,445,114,1,0,0,0,446,447,5,92,0,0,447,448,7,6,0,
		0,448,116,1,0,0,0,449,451,3,123,61,0,450,449,1,0,0,0,450,451,1,0,0,0,451,
		452,1,0,0,0,452,456,3,119,59,0,453,455,3,121,60,0,454,453,1,0,0,0,455,
		458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,118,1,0,0,0,458,456,1,
		0,0,0,459,460,7,7,0,0,460,120,1,0,0,0,461,464,3,119,59,0,462,464,7,8,0,
		0,463,461,1,0,0,0,463,462,1,0,0,0,464,122,1,0,0,0,465,466,7,9,0,0,466,
		124,1,0,0,0,18,0,129,135,142,152,160,164,167,180,188,196,428,434,439,441,
		450,456,463,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KSPCompiler.Infrastructures.Parser.Antlr
