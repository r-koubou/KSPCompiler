//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KSPExLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KSPCompiler.Infrastructures.Parser.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KSPExLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER_LITERAL=1, EOL=2, MULTI_LINE_DELIMITER=3, Whitespace=4, BlockComment=5, 
		DECLARE=6, CONST=7, POLYPHONIC=8, ON=9, END=10, FUNCTION=11, IF=12, ELSE=13, 
		SELECT=14, CASE=15, TO=16, WHILE=17, CALL=18, CONTINUE=19, PREPROCESSOR_SET_COND=20, 
		PREPROCESSOR_RESET_COND=21, PREPROCESSOR_CODE_IF=22, PREPROCESSOR_CODE_IF_NOT=23, 
		PREPROCESSOR_CODE_END_IF=24, BOOL_GT=25, BOOL_LT=26, BOOL_GE=27, BOOL_LE=28, 
		BOOL_EQ=29, BOOL_NE=30, BOOL_NOT=31, BOOL_AND=32, BOOL_OR=33, BOOL_XOR=34, 
		ASSIGN=35, PLUS=36, MINUS=37, MUL=38, DIV=39, MOD=40, BIT_AND=41, BIT_OR=42, 
		BIT_NOT=43, BIT_XOR=44, STRING_ADD=45, LPARENT=46, RPARENT=47, LBRACKET=48, 
		RBRACKET=49, COMMA=50, REAL_LITERAL=51, STRING_LITERAL=52, IDENTIFIER=53;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER_LITERAL", "DECIMAL_LITERAL", "HEX_LITERAL", "EXT_HEX_LITERAL", 
		"EXT_BIN_LITERAL", "EOL", "CR", "LF", "MULTI_LINE_DELIMITER", "Whitespace", 
		"BlockComment", "DECLARE", "CONST", "POLYPHONIC", "ON", "END", "FUNCTION", 
		"IF", "ELSE", "SELECT", "CASE", "TO", "WHILE", "CALL", "CONTINUE", "PREPROCESSOR_SET_COND", 
		"PREPROCESSOR_RESET_COND", "PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", 
		"PREPROCESSOR_CODE_END_IF", "BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", 
		"BOOL_EQ", "BOOL_NE", "BOOL_NOT", "BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "BIT_AND", "BIT_OR", "BIT_NOT", 
		"BIT_XOR", "STRING_ADD", "LPARENT", "RPARENT", "LBRACKET", "RBRACKET", 
		"COMMA", "REAL_LITERAL", "STRING_LITERAL", "EscapeSequence", "IDENTIFIER", 
		"LETTER", "LETTER_OR_DIGIT", "VARIABLE_PREFIX"
	};


	public KSPExLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public KSPExLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'declare'", "'const'", "'polyphonic'", 
		"'on'", "'end'", "'function'", "'if'", "'else'", "'select'", "'case'", 
		"'to'", "'while'", "'call'", "'continue'", "'SET_CONDITION'", "'RESET_CONDITION'", 
		"'USE_CODE_IF'", "'USE_CODE_IF_NOT'", "'END_USE_CODE'", "'>'", "'<'", 
		"'>='", "'<='", "'='", "'#'", "'not'", "'and'", "'or'", "'xor'", "':='", 
		"'+'", "'-'", "'*'", "'/'", "'mod'", "'.and.'", "'.or.'", "'.not.'", "'.xor.'", 
		"'&'", "'('", "')'", "'['", "']'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER_LITERAL", "EOL", "MULTI_LINE_DELIMITER", "Whitespace", 
		"BlockComment", "DECLARE", "CONST", "POLYPHONIC", "ON", "END", "FUNCTION", 
		"IF", "ELSE", "SELECT", "CASE", "TO", "WHILE", "CALL", "CONTINUE", "PREPROCESSOR_SET_COND", 
		"PREPROCESSOR_RESET_COND", "PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", 
		"PREPROCESSOR_CODE_END_IF", "BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", 
		"BOOL_EQ", "BOOL_NE", "BOOL_NOT", "BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "BIT_AND", "BIT_OR", "BIT_NOT", 
		"BIT_XOR", "STRING_ADD", "LPARENT", "RPARENT", "LBRACKET", "RBRACKET", 
		"COMMA", "REAL_LITERAL", "STRING_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KSPExLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KSPExLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,53,480,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,
		0,1,0,1,0,3,0,132,8,0,1,1,1,1,5,1,136,8,1,10,1,12,1,139,9,1,1,2,1,2,4,
		2,143,8,2,11,2,12,2,144,1,2,1,2,1,3,1,3,1,3,1,3,4,3,153,8,3,11,3,12,3,
		154,1,4,1,4,1,4,1,4,4,4,161,8,4,11,4,12,4,162,1,5,1,5,3,5,167,8,5,1,5,
		3,5,170,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,5,8,181,8,8,10,8,12,8,
		184,9,8,1,8,1,8,1,9,4,9,189,8,9,11,9,12,9,190,1,9,1,9,1,10,1,10,5,10,197,
		8,10,10,10,12,10,200,9,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
		1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,
		1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
		1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,
		1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
		1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,
		1,53,1,54,1,54,1,55,1,55,1,56,4,56,441,8,56,11,56,12,56,442,1,56,1,56,
		4,56,447,8,56,11,56,12,56,448,1,57,1,57,1,57,5,57,454,8,57,10,57,12,57,
		457,9,57,1,57,1,57,1,58,1,58,1,58,1,59,3,59,465,8,59,1,59,1,59,4,59,469,
		8,59,11,59,12,59,470,1,60,1,60,1,61,1,61,3,61,477,8,61,1,62,1,62,1,198,
		0,63,1,1,3,0,5,0,7,0,9,0,11,2,13,0,15,0,17,3,19,4,21,5,23,6,25,7,27,8,
		29,9,31,10,33,11,35,12,37,13,39,14,41,15,43,16,45,17,47,18,49,19,51,20,
		53,21,55,22,57,23,59,24,61,25,63,26,65,27,67,28,69,29,71,30,73,31,75,32,
		77,33,79,34,81,35,83,36,85,37,87,38,89,39,91,40,93,41,95,42,97,43,99,44,
		101,45,103,46,105,47,107,48,109,49,111,50,113,51,115,52,117,0,119,53,121,
		0,123,0,125,0,1,0,10,3,0,48,57,65,70,97,102,2,0,72,72,104,104,1,0,48,49,
		2,0,9,9,32,32,3,0,9,9,12,12,32,32,4,0,10,10,13,13,34,34,92,92,8,0,34,34,
		39,39,92,92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,
		1,0,48,57,4,0,33,33,36,37,63,64,126,126,488,0,1,1,0,0,0,0,11,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
		0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
		0,0,0,115,1,0,0,0,0,119,1,0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,140,1,0,
		0,0,7,148,1,0,0,0,9,156,1,0,0,0,11,169,1,0,0,0,13,171,1,0,0,0,15,173,1,
		0,0,0,17,175,1,0,0,0,19,188,1,0,0,0,21,194,1,0,0,0,23,205,1,0,0,0,25,213,
		1,0,0,0,27,219,1,0,0,0,29,230,1,0,0,0,31,233,1,0,0,0,33,237,1,0,0,0,35,
		246,1,0,0,0,37,249,1,0,0,0,39,254,1,0,0,0,41,261,1,0,0,0,43,266,1,0,0,
		0,45,269,1,0,0,0,47,275,1,0,0,0,49,280,1,0,0,0,51,289,1,0,0,0,53,303,1,
		0,0,0,55,319,1,0,0,0,57,331,1,0,0,0,59,347,1,0,0,0,61,360,1,0,0,0,63,362,
		1,0,0,0,65,364,1,0,0,0,67,367,1,0,0,0,69,370,1,0,0,0,71,372,1,0,0,0,73,
		374,1,0,0,0,75,378,1,0,0,0,77,382,1,0,0,0,79,385,1,0,0,0,81,389,1,0,0,
		0,83,392,1,0,0,0,85,394,1,0,0,0,87,396,1,0,0,0,89,398,1,0,0,0,91,400,1,
		0,0,0,93,404,1,0,0,0,95,410,1,0,0,0,97,415,1,0,0,0,99,421,1,0,0,0,101,
		427,1,0,0,0,103,429,1,0,0,0,105,431,1,0,0,0,107,433,1,0,0,0,109,435,1,
		0,0,0,111,437,1,0,0,0,113,440,1,0,0,0,115,450,1,0,0,0,117,460,1,0,0,0,
		119,464,1,0,0,0,121,472,1,0,0,0,123,476,1,0,0,0,125,478,1,0,0,0,127,132,
		3,3,1,0,128,132,3,5,2,0,129,132,3,7,3,0,130,132,3,9,4,0,131,127,1,0,0,
		0,131,128,1,0,0,0,131,129,1,0,0,0,131,130,1,0,0,0,132,2,1,0,0,0,133,137,
		2,49,57,0,134,136,2,48,57,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,
		0,0,0,137,138,1,0,0,0,138,4,1,0,0,0,139,137,1,0,0,0,140,142,5,57,0,0,141,
		143,7,0,0,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,
		0,0,0,145,146,1,0,0,0,146,147,7,1,0,0,147,6,1,0,0,0,148,149,5,48,0,0,149,
		150,5,120,0,0,150,152,1,0,0,0,151,153,7,0,0,0,152,151,1,0,0,0,153,154,
		1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,8,1,0,0,0,156,157,5,48,0,0,
		157,158,5,98,0,0,158,160,1,0,0,0,159,161,7,2,0,0,160,159,1,0,0,0,161,162,
		1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,10,1,0,0,0,164,166,3,13,6,
		0,165,167,3,15,7,0,166,165,1,0,0,0,166,167,1,0,0,0,167,170,1,0,0,0,168,
		170,3,15,7,0,169,164,1,0,0,0,169,168,1,0,0,0,170,12,1,0,0,0,171,172,5,
		13,0,0,172,14,1,0,0,0,173,174,5,10,0,0,174,16,1,0,0,0,175,176,5,46,0,0,
		176,177,5,46,0,0,177,178,5,46,0,0,178,182,1,0,0,0,179,181,7,3,0,0,180,
		179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,185,1,
		0,0,0,184,182,1,0,0,0,185,186,3,11,5,0,186,18,1,0,0,0,187,189,7,4,0,0,
		188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,192,
		1,0,0,0,192,193,6,9,0,0,193,20,1,0,0,0,194,198,5,123,0,0,195,197,9,0,0,
		0,196,195,1,0,0,0,197,200,1,0,0,0,198,199,1,0,0,0,198,196,1,0,0,0,199,
		201,1,0,0,0,200,198,1,0,0,0,201,202,5,125,0,0,202,203,1,0,0,0,203,204,
		6,10,0,0,204,22,1,0,0,0,205,206,5,100,0,0,206,207,5,101,0,0,207,208,5,
		99,0,0,208,209,5,108,0,0,209,210,5,97,0,0,210,211,5,114,0,0,211,212,5,
		101,0,0,212,24,1,0,0,0,213,214,5,99,0,0,214,215,5,111,0,0,215,216,5,110,
		0,0,216,217,5,115,0,0,217,218,5,116,0,0,218,26,1,0,0,0,219,220,5,112,0,
		0,220,221,5,111,0,0,221,222,5,108,0,0,222,223,5,121,0,0,223,224,5,112,
		0,0,224,225,5,104,0,0,225,226,5,111,0,0,226,227,5,110,0,0,227,228,5,105,
		0,0,228,229,5,99,0,0,229,28,1,0,0,0,230,231,5,111,0,0,231,232,5,110,0,
		0,232,30,1,0,0,0,233,234,5,101,0,0,234,235,5,110,0,0,235,236,5,100,0,0,
		236,32,1,0,0,0,237,238,5,102,0,0,238,239,5,117,0,0,239,240,5,110,0,0,240,
		241,5,99,0,0,241,242,5,116,0,0,242,243,5,105,0,0,243,244,5,111,0,0,244,
		245,5,110,0,0,245,34,1,0,0,0,246,247,5,105,0,0,247,248,5,102,0,0,248,36,
		1,0,0,0,249,250,5,101,0,0,250,251,5,108,0,0,251,252,5,115,0,0,252,253,
		5,101,0,0,253,38,1,0,0,0,254,255,5,115,0,0,255,256,5,101,0,0,256,257,5,
		108,0,0,257,258,5,101,0,0,258,259,5,99,0,0,259,260,5,116,0,0,260,40,1,
		0,0,0,261,262,5,99,0,0,262,263,5,97,0,0,263,264,5,115,0,0,264,265,5,101,
		0,0,265,42,1,0,0,0,266,267,5,116,0,0,267,268,5,111,0,0,268,44,1,0,0,0,
		269,270,5,119,0,0,270,271,5,104,0,0,271,272,5,105,0,0,272,273,5,108,0,
		0,273,274,5,101,0,0,274,46,1,0,0,0,275,276,5,99,0,0,276,277,5,97,0,0,277,
		278,5,108,0,0,278,279,5,108,0,0,279,48,1,0,0,0,280,281,5,99,0,0,281,282,
		5,111,0,0,282,283,5,110,0,0,283,284,5,116,0,0,284,285,5,105,0,0,285,286,
		5,110,0,0,286,287,5,117,0,0,287,288,5,101,0,0,288,50,1,0,0,0,289,290,5,
		83,0,0,290,291,5,69,0,0,291,292,5,84,0,0,292,293,5,95,0,0,293,294,5,67,
		0,0,294,295,5,79,0,0,295,296,5,78,0,0,296,297,5,68,0,0,297,298,5,73,0,
		0,298,299,5,84,0,0,299,300,5,73,0,0,300,301,5,79,0,0,301,302,5,78,0,0,
		302,52,1,0,0,0,303,304,5,82,0,0,304,305,5,69,0,0,305,306,5,83,0,0,306,
		307,5,69,0,0,307,308,5,84,0,0,308,309,5,95,0,0,309,310,5,67,0,0,310,311,
		5,79,0,0,311,312,5,78,0,0,312,313,5,68,0,0,313,314,5,73,0,0,314,315,5,
		84,0,0,315,316,5,73,0,0,316,317,5,79,0,0,317,318,5,78,0,0,318,54,1,0,0,
		0,319,320,5,85,0,0,320,321,5,83,0,0,321,322,5,69,0,0,322,323,5,95,0,0,
		323,324,5,67,0,0,324,325,5,79,0,0,325,326,5,68,0,0,326,327,5,69,0,0,327,
		328,5,95,0,0,328,329,5,73,0,0,329,330,5,70,0,0,330,56,1,0,0,0,331,332,
		5,85,0,0,332,333,5,83,0,0,333,334,5,69,0,0,334,335,5,95,0,0,335,336,5,
		67,0,0,336,337,5,79,0,0,337,338,5,68,0,0,338,339,5,69,0,0,339,340,5,95,
		0,0,340,341,5,73,0,0,341,342,5,70,0,0,342,343,5,95,0,0,343,344,5,78,0,
		0,344,345,5,79,0,0,345,346,5,84,0,0,346,58,1,0,0,0,347,348,5,69,0,0,348,
		349,5,78,0,0,349,350,5,68,0,0,350,351,5,95,0,0,351,352,5,85,0,0,352,353,
		5,83,0,0,353,354,5,69,0,0,354,355,5,95,0,0,355,356,5,67,0,0,356,357,5,
		79,0,0,357,358,5,68,0,0,358,359,5,69,0,0,359,60,1,0,0,0,360,361,5,62,0,
		0,361,62,1,0,0,0,362,363,5,60,0,0,363,64,1,0,0,0,364,365,5,62,0,0,365,
		366,5,61,0,0,366,66,1,0,0,0,367,368,5,60,0,0,368,369,5,61,0,0,369,68,1,
		0,0,0,370,371,5,61,0,0,371,70,1,0,0,0,372,373,5,35,0,0,373,72,1,0,0,0,
		374,375,5,110,0,0,375,376,5,111,0,0,376,377,5,116,0,0,377,74,1,0,0,0,378,
		379,5,97,0,0,379,380,5,110,0,0,380,381,5,100,0,0,381,76,1,0,0,0,382,383,
		5,111,0,0,383,384,5,114,0,0,384,78,1,0,0,0,385,386,5,120,0,0,386,387,5,
		111,0,0,387,388,5,114,0,0,388,80,1,0,0,0,389,390,5,58,0,0,390,391,5,61,
		0,0,391,82,1,0,0,0,392,393,5,43,0,0,393,84,1,0,0,0,394,395,5,45,0,0,395,
		86,1,0,0,0,396,397,5,42,0,0,397,88,1,0,0,0,398,399,5,47,0,0,399,90,1,0,
		0,0,400,401,5,109,0,0,401,402,5,111,0,0,402,403,5,100,0,0,403,92,1,0,0,
		0,404,405,5,46,0,0,405,406,5,97,0,0,406,407,5,110,0,0,407,408,5,100,0,
		0,408,409,5,46,0,0,409,94,1,0,0,0,410,411,5,46,0,0,411,412,5,111,0,0,412,
		413,5,114,0,0,413,414,5,46,0,0,414,96,1,0,0,0,415,416,5,46,0,0,416,417,
		5,110,0,0,417,418,5,111,0,0,418,419,5,116,0,0,419,420,5,46,0,0,420,98,
		1,0,0,0,421,422,5,46,0,0,422,423,5,120,0,0,423,424,5,111,0,0,424,425,5,
		114,0,0,425,426,5,46,0,0,426,100,1,0,0,0,427,428,5,38,0,0,428,102,1,0,
		0,0,429,430,5,40,0,0,430,104,1,0,0,0,431,432,5,41,0,0,432,106,1,0,0,0,
		433,434,5,91,0,0,434,108,1,0,0,0,435,436,5,93,0,0,436,110,1,0,0,0,437,
		438,5,44,0,0,438,112,1,0,0,0,439,441,2,48,57,0,440,439,1,0,0,0,441,442,
		1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,446,5,46,0,
		0,445,447,2,48,57,0,446,445,1,0,0,0,447,448,1,0,0,0,448,446,1,0,0,0,448,
		449,1,0,0,0,449,114,1,0,0,0,450,455,5,34,0,0,451,454,8,5,0,0,452,454,3,
		117,58,0,453,451,1,0,0,0,453,452,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,
		0,455,456,1,0,0,0,456,458,1,0,0,0,457,455,1,0,0,0,458,459,5,34,0,0,459,
		116,1,0,0,0,460,461,5,92,0,0,461,462,7,6,0,0,462,118,1,0,0,0,463,465,3,
		125,62,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,468,3,121,
		60,0,467,469,3,123,61,0,468,467,1,0,0,0,469,470,1,0,0,0,470,468,1,0,0,
		0,470,471,1,0,0,0,471,120,1,0,0,0,472,473,7,7,0,0,473,122,1,0,0,0,474,
		477,3,121,60,0,475,477,7,8,0,0,476,474,1,0,0,0,476,475,1,0,0,0,477,124,
		1,0,0,0,478,479,7,9,0,0,479,126,1,0,0,0,18,0,131,137,144,154,162,166,169,
		182,190,198,442,448,453,455,464,470,476,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KSPCompiler.Infrastructures.Parser.Antlr
