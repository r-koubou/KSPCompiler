//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KSPLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KSPCompiler.Infrastructures.Parser.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KSPLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, MULTI_LINE_DELIMITER=2, Whitespace=3, BlockComment=4, DECLARE=5, 
		CONST=6, POLYPHONIC=7, ON=8, END=9, FUNCTION=10, IF=11, ELSE=12, SELECT=13, 
		CASE=14, TO=15, WHILE=16, CALL=17, CONTINUE=18, PREPROCESSOR_SET_COND=19, 
		PREPROCESSOR_RESET_COND=20, PREPROCESSOR_CODE_IF=21, PREPROCESSOR_CODE_IF_NOT=22, 
		PREPROCESSOR_CODE_END_IF=23, BOOL_GT=24, BOOL_LT=25, BOOL_GE=26, BOOL_LE=27, 
		BOOL_EQ=28, BOOL_NE=29, BOOL_NOT=30, BOOL_AND=31, BOOL_OR=32, BOOL_XOR=33, 
		ASSIGN=34, PLUS=35, MINUS=36, MUL=37, DIV=38, MOD=39, BIT_AND=40, BIT_OR=41, 
		BIT_NOT=42, BIT_XOR=43, STRING_ADD=44, LPARENT=45, RPARENT=46, LBRACKET=47, 
		RBRACKET=48, COMMA=49, INTEGER_LITERAL=50, REAL_LITERAL=51, STRING_LITERAL=52, 
		IDENTIFIER=53;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EOL", "CR", "LF", "MULTI_LINE_DELIMITER", "Whitespace", "BlockComment", 
		"DECLARE", "CONST", "POLYPHONIC", "ON", "END", "FUNCTION", "IF", "ELSE", 
		"SELECT", "CASE", "TO", "WHILE", "CALL", "CONTINUE", "PREPROCESSOR_SET_COND", 
		"PREPROCESSOR_RESET_COND", "PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", 
		"PREPROCESSOR_CODE_END_IF", "BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", 
		"BOOL_EQ", "BOOL_NE", "BOOL_NOT", "BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "BIT_AND", "BIT_OR", "BIT_NOT", 
		"BIT_XOR", "STRING_ADD", "LPARENT", "RPARENT", "LBRACKET", "RBRACKET", 
		"COMMA", "INTEGER_LITERAL", "DECIMAL_LITERAL", "HEX_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "EscapeSequence", "IDENTIFIER", "LETTER", "LETTER_OR_DIGIT", 
		"VARIABLE_PREFIX"
	};


	public KSPLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public KSPLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'declare'", "'const'", "'polyphonic'", 
		"'on'", "'end'", "'function'", "'if'", "'else'", "'select'", "'case'", 
		"'to'", "'while'", "'call'", "'continue'", "'SET_CONDITION'", "'RESET_CONDITION'", 
		"'USE_CODE_IF'", "'USE_CODE_IF_NOT'", "'END_USE_CODE'", "'>'", "'<'", 
		"'>='", "'<='", "'='", "'#'", "'not'", "'and'", "'or'", "'xor'", "':='", 
		"'+'", "'-'", "'*'", "'/'", "'mod'", "'.and.'", "'.or.'", "'.not.'", "'.xor.'", 
		"'&'", "'('", "')'", "'['", "']'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "MULTI_LINE_DELIMITER", "Whitespace", "BlockComment", "DECLARE", 
		"CONST", "POLYPHONIC", "ON", "END", "FUNCTION", "IF", "ELSE", "SELECT", 
		"CASE", "TO", "WHILE", "CALL", "CONTINUE", "PREPROCESSOR_SET_COND", "PREPROCESSOR_RESET_COND", 
		"PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", "PREPROCESSOR_CODE_END_IF", 
		"BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", "BOOL_EQ", "BOOL_NE", "BOOL_NOT", 
		"BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
		"MOD", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_XOR", "STRING_ADD", "LPARENT", 
		"RPARENT", "LBRACKET", "RBRACKET", "COMMA", "INTEGER_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KSPLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KSPLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,53,462,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,3,0,126,8,0,1,0,3,
		0,129,8,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,5,3,140,8,3,10,3,12,3,143,
		9,3,1,3,1,3,1,4,4,4,148,8,4,11,4,12,4,149,1,4,1,4,1,5,1,5,5,5,156,8,5,
		10,5,12,5,159,9,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
		1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
		1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
		1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,
		1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
		1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
		1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,
		1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,3,51,
		401,8,51,1,52,1,52,1,52,5,52,406,8,52,10,52,12,52,409,9,52,3,52,411,8,
		52,1,53,1,53,4,53,415,8,53,11,53,12,53,416,1,53,1,53,1,54,4,54,422,8,54,
		11,54,12,54,423,1,54,1,54,4,54,428,8,54,11,54,12,54,429,1,55,1,55,1,55,
		5,55,435,8,55,10,55,12,55,438,9,55,1,55,1,55,1,56,1,56,1,56,1,57,3,57,
		446,8,57,1,57,1,57,5,57,450,8,57,10,57,12,57,453,9,57,1,58,1,58,1,59,1,
		59,3,59,459,8,59,1,60,1,60,1,157,0,61,1,1,3,0,5,0,7,2,9,3,11,4,13,5,15,
		6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,
		41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,
		65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,
		89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,50,105,0,107,0,109,51,111,
		52,113,0,115,53,117,0,119,0,121,0,1,0,9,2,0,9,9,32,32,3,0,9,9,12,12,32,
		32,3,0,48,57,65,70,97,102,2,0,72,72,104,104,4,0,10,10,13,13,34,34,92,92,
		8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,
		95,95,97,122,1,0,48,57,4,0,33,33,36,37,63,64,126,126,469,0,1,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
		29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
		0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
		0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
		109,1,0,0,0,0,111,1,0,0,0,0,115,1,0,0,0,1,128,1,0,0,0,3,130,1,0,0,0,5,
		132,1,0,0,0,7,134,1,0,0,0,9,147,1,0,0,0,11,153,1,0,0,0,13,164,1,0,0,0,
		15,172,1,0,0,0,17,178,1,0,0,0,19,189,1,0,0,0,21,192,1,0,0,0,23,196,1,0,
		0,0,25,205,1,0,0,0,27,208,1,0,0,0,29,213,1,0,0,0,31,220,1,0,0,0,33,225,
		1,0,0,0,35,228,1,0,0,0,37,234,1,0,0,0,39,239,1,0,0,0,41,248,1,0,0,0,43,
		262,1,0,0,0,45,278,1,0,0,0,47,290,1,0,0,0,49,306,1,0,0,0,51,319,1,0,0,
		0,53,321,1,0,0,0,55,323,1,0,0,0,57,326,1,0,0,0,59,329,1,0,0,0,61,331,1,
		0,0,0,63,333,1,0,0,0,65,337,1,0,0,0,67,341,1,0,0,0,69,344,1,0,0,0,71,348,
		1,0,0,0,73,351,1,0,0,0,75,353,1,0,0,0,77,355,1,0,0,0,79,357,1,0,0,0,81,
		359,1,0,0,0,83,363,1,0,0,0,85,369,1,0,0,0,87,374,1,0,0,0,89,380,1,0,0,
		0,91,386,1,0,0,0,93,388,1,0,0,0,95,390,1,0,0,0,97,392,1,0,0,0,99,394,1,
		0,0,0,101,396,1,0,0,0,103,400,1,0,0,0,105,410,1,0,0,0,107,412,1,0,0,0,
		109,421,1,0,0,0,111,431,1,0,0,0,113,441,1,0,0,0,115,445,1,0,0,0,117,454,
		1,0,0,0,119,458,1,0,0,0,121,460,1,0,0,0,123,125,3,3,1,0,124,126,3,5,2,
		0,125,124,1,0,0,0,125,126,1,0,0,0,126,129,1,0,0,0,127,129,3,5,2,0,128,
		123,1,0,0,0,128,127,1,0,0,0,129,2,1,0,0,0,130,131,5,13,0,0,131,4,1,0,0,
		0,132,133,5,10,0,0,133,6,1,0,0,0,134,135,5,46,0,0,135,136,5,46,0,0,136,
		137,5,46,0,0,137,141,1,0,0,0,138,140,7,0,0,0,139,138,1,0,0,0,140,143,1,
		0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,
		144,145,3,1,0,0,145,8,1,0,0,0,146,148,7,1,0,0,147,146,1,0,0,0,148,149,
		1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,0,151,152,6,4,0,
		0,152,10,1,0,0,0,153,157,5,123,0,0,154,156,9,0,0,0,155,154,1,0,0,0,156,
		159,1,0,0,0,157,158,1,0,0,0,157,155,1,0,0,0,158,160,1,0,0,0,159,157,1,
		0,0,0,160,161,5,125,0,0,161,162,1,0,0,0,162,163,6,5,0,0,163,12,1,0,0,0,
		164,165,5,100,0,0,165,166,5,101,0,0,166,167,5,99,0,0,167,168,5,108,0,0,
		168,169,5,97,0,0,169,170,5,114,0,0,170,171,5,101,0,0,171,14,1,0,0,0,172,
		173,5,99,0,0,173,174,5,111,0,0,174,175,5,110,0,0,175,176,5,115,0,0,176,
		177,5,116,0,0,177,16,1,0,0,0,178,179,5,112,0,0,179,180,5,111,0,0,180,181,
		5,108,0,0,181,182,5,121,0,0,182,183,5,112,0,0,183,184,5,104,0,0,184,185,
		5,111,0,0,185,186,5,110,0,0,186,187,5,105,0,0,187,188,5,99,0,0,188,18,
		1,0,0,0,189,190,5,111,0,0,190,191,5,110,0,0,191,20,1,0,0,0,192,193,5,101,
		0,0,193,194,5,110,0,0,194,195,5,100,0,0,195,22,1,0,0,0,196,197,5,102,0,
		0,197,198,5,117,0,0,198,199,5,110,0,0,199,200,5,99,0,0,200,201,5,116,0,
		0,201,202,5,105,0,0,202,203,5,111,0,0,203,204,5,110,0,0,204,24,1,0,0,0,
		205,206,5,105,0,0,206,207,5,102,0,0,207,26,1,0,0,0,208,209,5,101,0,0,209,
		210,5,108,0,0,210,211,5,115,0,0,211,212,5,101,0,0,212,28,1,0,0,0,213,214,
		5,115,0,0,214,215,5,101,0,0,215,216,5,108,0,0,216,217,5,101,0,0,217,218,
		5,99,0,0,218,219,5,116,0,0,219,30,1,0,0,0,220,221,5,99,0,0,221,222,5,97,
		0,0,222,223,5,115,0,0,223,224,5,101,0,0,224,32,1,0,0,0,225,226,5,116,0,
		0,226,227,5,111,0,0,227,34,1,0,0,0,228,229,5,119,0,0,229,230,5,104,0,0,
		230,231,5,105,0,0,231,232,5,108,0,0,232,233,5,101,0,0,233,36,1,0,0,0,234,
		235,5,99,0,0,235,236,5,97,0,0,236,237,5,108,0,0,237,238,5,108,0,0,238,
		38,1,0,0,0,239,240,5,99,0,0,240,241,5,111,0,0,241,242,5,110,0,0,242,243,
		5,116,0,0,243,244,5,105,0,0,244,245,5,110,0,0,245,246,5,117,0,0,246,247,
		5,101,0,0,247,40,1,0,0,0,248,249,5,83,0,0,249,250,5,69,0,0,250,251,5,84,
		0,0,251,252,5,95,0,0,252,253,5,67,0,0,253,254,5,79,0,0,254,255,5,78,0,
		0,255,256,5,68,0,0,256,257,5,73,0,0,257,258,5,84,0,0,258,259,5,73,0,0,
		259,260,5,79,0,0,260,261,5,78,0,0,261,42,1,0,0,0,262,263,5,82,0,0,263,
		264,5,69,0,0,264,265,5,83,0,0,265,266,5,69,0,0,266,267,5,84,0,0,267,268,
		5,95,0,0,268,269,5,67,0,0,269,270,5,79,0,0,270,271,5,78,0,0,271,272,5,
		68,0,0,272,273,5,73,0,0,273,274,5,84,0,0,274,275,5,73,0,0,275,276,5,79,
		0,0,276,277,5,78,0,0,277,44,1,0,0,0,278,279,5,85,0,0,279,280,5,83,0,0,
		280,281,5,69,0,0,281,282,5,95,0,0,282,283,5,67,0,0,283,284,5,79,0,0,284,
		285,5,68,0,0,285,286,5,69,0,0,286,287,5,95,0,0,287,288,5,73,0,0,288,289,
		5,70,0,0,289,46,1,0,0,0,290,291,5,85,0,0,291,292,5,83,0,0,292,293,5,69,
		0,0,293,294,5,95,0,0,294,295,5,67,0,0,295,296,5,79,0,0,296,297,5,68,0,
		0,297,298,5,69,0,0,298,299,5,95,0,0,299,300,5,73,0,0,300,301,5,70,0,0,
		301,302,5,95,0,0,302,303,5,78,0,0,303,304,5,79,0,0,304,305,5,84,0,0,305,
		48,1,0,0,0,306,307,5,69,0,0,307,308,5,78,0,0,308,309,5,68,0,0,309,310,
		5,95,0,0,310,311,5,85,0,0,311,312,5,83,0,0,312,313,5,69,0,0,313,314,5,
		95,0,0,314,315,5,67,0,0,315,316,5,79,0,0,316,317,5,68,0,0,317,318,5,69,
		0,0,318,50,1,0,0,0,319,320,5,62,0,0,320,52,1,0,0,0,321,322,5,60,0,0,322,
		54,1,0,0,0,323,324,5,62,0,0,324,325,5,61,0,0,325,56,1,0,0,0,326,327,5,
		60,0,0,327,328,5,61,0,0,328,58,1,0,0,0,329,330,5,61,0,0,330,60,1,0,0,0,
		331,332,5,35,0,0,332,62,1,0,0,0,333,334,5,110,0,0,334,335,5,111,0,0,335,
		336,5,116,0,0,336,64,1,0,0,0,337,338,5,97,0,0,338,339,5,110,0,0,339,340,
		5,100,0,0,340,66,1,0,0,0,341,342,5,111,0,0,342,343,5,114,0,0,343,68,1,
		0,0,0,344,345,5,120,0,0,345,346,5,111,0,0,346,347,5,114,0,0,347,70,1,0,
		0,0,348,349,5,58,0,0,349,350,5,61,0,0,350,72,1,0,0,0,351,352,5,43,0,0,
		352,74,1,0,0,0,353,354,5,45,0,0,354,76,1,0,0,0,355,356,5,42,0,0,356,78,
		1,0,0,0,357,358,5,47,0,0,358,80,1,0,0,0,359,360,5,109,0,0,360,361,5,111,
		0,0,361,362,5,100,0,0,362,82,1,0,0,0,363,364,5,46,0,0,364,365,5,97,0,0,
		365,366,5,110,0,0,366,367,5,100,0,0,367,368,5,46,0,0,368,84,1,0,0,0,369,
		370,5,46,0,0,370,371,5,111,0,0,371,372,5,114,0,0,372,373,5,46,0,0,373,
		86,1,0,0,0,374,375,5,46,0,0,375,376,5,110,0,0,376,377,5,111,0,0,377,378,
		5,116,0,0,378,379,5,46,0,0,379,88,1,0,0,0,380,381,5,46,0,0,381,382,5,120,
		0,0,382,383,5,111,0,0,383,384,5,114,0,0,384,385,5,46,0,0,385,90,1,0,0,
		0,386,387,5,38,0,0,387,92,1,0,0,0,388,389,5,40,0,0,389,94,1,0,0,0,390,
		391,5,41,0,0,391,96,1,0,0,0,392,393,5,91,0,0,393,98,1,0,0,0,394,395,5,
		93,0,0,395,100,1,0,0,0,396,397,5,44,0,0,397,102,1,0,0,0,398,401,3,105,
		52,0,399,401,3,107,53,0,400,398,1,0,0,0,400,399,1,0,0,0,401,104,1,0,0,
		0,402,411,5,48,0,0,403,407,2,49,57,0,404,406,2,48,57,0,405,404,1,0,0,0,
		406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,411,1,0,0,0,409,407,
		1,0,0,0,410,402,1,0,0,0,410,403,1,0,0,0,411,106,1,0,0,0,412,414,5,57,0,
		0,413,415,7,2,0,0,414,413,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,
		417,1,0,0,0,417,418,1,0,0,0,418,419,7,3,0,0,419,108,1,0,0,0,420,422,2,
		48,57,0,421,420,1,0,0,0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,
		0,424,425,1,0,0,0,425,427,5,46,0,0,426,428,2,48,57,0,427,426,1,0,0,0,428,
		429,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,110,1,0,0,0,431,436,5,
		34,0,0,432,435,8,4,0,0,433,435,3,113,56,0,434,432,1,0,0,0,434,433,1,0,
		0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,
		436,1,0,0,0,439,440,5,34,0,0,440,112,1,0,0,0,441,442,5,92,0,0,442,443,
		7,5,0,0,443,114,1,0,0,0,444,446,3,121,60,0,445,444,1,0,0,0,445,446,1,0,
		0,0,446,447,1,0,0,0,447,451,3,117,58,0,448,450,3,119,59,0,449,448,1,0,
		0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,116,1,0,0,0,453,
		451,1,0,0,0,454,455,7,6,0,0,455,118,1,0,0,0,456,459,3,117,58,0,457,459,
		7,7,0,0,458,456,1,0,0,0,458,457,1,0,0,0,459,120,1,0,0,0,460,461,7,8,0,
		0,461,122,1,0,0,0,17,0,125,128,141,149,157,400,407,410,416,423,429,434,
		436,445,451,458,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KSPCompiler.Infrastructures.Parser.Antlr
