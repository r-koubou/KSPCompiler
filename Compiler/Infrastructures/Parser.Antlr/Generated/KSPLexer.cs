//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KSPLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KSPCompiler.Infrastructures.Parser.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KSPLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, MULTI_LINE_DELIMITER=2, Whitespace=3, BlockComment=4, DECLARE=5, 
		ON=6, END=7, FUNCTION=8, IF=9, ELSE=10, SELECT=11, CASE=12, TO=13, WHILE=14, 
		CALL=15, EXIT=16, CONTINUE=17, PREPROCESSOR_SET_COND=18, PREPROCESSOR_RESET_COND=19, 
		PREPROCESSOR_CODE_IF=20, PREPROCESSOR_CODE_IF_NOT=21, PREPROCESSOR_CODE_END_IF=22, 
		BOOL_GT=23, BOOL_LT=24, BOOL_GE=25, BOOL_LE=26, BOOL_EQ=27, BOOL_NE=28, 
		BOOL_NOT=29, BOOL_AND=30, BOOL_OR=31, BOOL_XOR=32, ASSIGN=33, PLUS=34, 
		MINUS=35, MUL=36, DIV=37, MOD=38, BIT_AND=39, BIT_OR=40, BIT_NOT=41, BIT_XOR=42, 
		STRING_ADD=43, LPARENT=44, RPARENT=45, LBRACKET=46, RBRACKET=47, COMMA=48, 
		INTEGER_LITERAL=49, REAL_LITERAL=50, STRING_LITERAL=51, IDENTIFIER=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EOL", "CR", "LF", "MULTI_LINE_DELIMITER", "Whitespace", "BlockComment", 
		"DECLARE", "ON", "END", "FUNCTION", "IF", "ELSE", "SELECT", "CASE", "TO", 
		"WHILE", "CALL", "EXIT", "CONTINUE", "PREPROCESSOR_SET_COND", "PREPROCESSOR_RESET_COND", 
		"PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", "PREPROCESSOR_CODE_END_IF", 
		"BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", "BOOL_EQ", "BOOL_NE", "BOOL_NOT", 
		"BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
		"MOD", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_XOR", "STRING_ADD", "LPARENT", 
		"RPARENT", "LBRACKET", "RBRACKET", "COMMA", "INTEGER_LITERAL", "DECIMAL_LITERAL", 
		"HEX_LITERAL", "REAL_LITERAL", "STRING_LITERAL", "EscapeSequence", "IDENTIFIER", 
		"LETTER", "LETTER_OR_DIGIT", "VARIABLE_PREFIX"
	};


	public KSPLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public KSPLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'declare'", "'on'", "'end'", "'function'", 
		"'if'", "'else'", "'select'", "'case'", "'to'", "'while'", "'call'", "'exit'", 
		"'continue'", "'SET_CONDITION'", "'RESET_CONDITION'", "'USE_CODE_IF'", 
		"'USE_CODE_IF_NOT'", "'END_USE_CODE'", "'>'", "'<'", "'>='", "'<='", "'='", 
		"'#'", "'not'", "'and'", "'or'", "'xor'", "':='", "'+'", "'-'", "'*'", 
		"'/'", "'mod'", "'.and.'", "'.or.'", "'.not.'", "'.xor.'", "'&'", "'('", 
		"')'", "'['", "']'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "MULTI_LINE_DELIMITER", "Whitespace", "BlockComment", "DECLARE", 
		"ON", "END", "FUNCTION", "IF", "ELSE", "SELECT", "CASE", "TO", "WHILE", 
		"CALL", "EXIT", "CONTINUE", "PREPROCESSOR_SET_COND", "PREPROCESSOR_RESET_COND", 
		"PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", "PREPROCESSOR_CODE_END_IF", 
		"BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", "BOOL_EQ", "BOOL_NE", "BOOL_NOT", 
		"BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
		"MOD", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_XOR", "STRING_ADD", "LPARENT", 
		"RPARENT", "LBRACKET", "RBRACKET", "COMMA", "INTEGER_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KSPLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KSPLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,448,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,3,0,124,8,0,1,0,3,0,127,8,0,
		1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,5,3,138,8,3,10,3,12,3,141,9,3,1,3,
		1,3,1,4,4,4,146,8,4,11,4,12,4,147,1,4,1,4,1,5,1,5,5,5,154,8,5,10,5,12,
		5,157,9,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
		1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
		1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
		1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
		1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
		1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,
		1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
		3,50,387,8,50,1,51,1,51,1,51,5,51,392,8,51,10,51,12,51,395,9,51,3,51,397,
		8,51,1,52,1,52,4,52,401,8,52,11,52,12,52,402,1,52,1,52,1,53,4,53,408,8,
		53,11,53,12,53,409,1,53,1,53,4,53,414,8,53,11,53,12,53,415,1,54,1,54,1,
		54,5,54,421,8,54,10,54,12,54,424,9,54,1,54,1,54,1,55,1,55,1,55,1,56,3,
		56,432,8,56,1,56,1,56,5,56,436,8,56,10,56,12,56,439,9,56,1,57,1,57,1,58,
		1,58,3,58,445,8,58,1,59,1,59,1,155,0,60,1,1,3,0,5,0,7,2,9,3,11,4,13,5,
		15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,
		18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,
		30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,
		42,89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,0,105,0,107,50,109,51,
		111,0,113,52,115,0,117,0,119,0,1,0,9,2,0,9,9,32,32,3,0,9,9,12,12,32,32,
		3,0,48,57,65,70,97,102,2,0,72,72,104,104,4,0,10,10,13,13,34,34,92,92,8,
		0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,95,
		95,97,122,1,0,48,57,4,0,33,33,36,37,63,64,126,126,455,0,1,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
		0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
		1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,107,1,0,0,0,0,109,1,
		0,0,0,0,113,1,0,0,0,1,126,1,0,0,0,3,128,1,0,0,0,5,130,1,0,0,0,7,132,1,
		0,0,0,9,145,1,0,0,0,11,151,1,0,0,0,13,162,1,0,0,0,15,170,1,0,0,0,17,173,
		1,0,0,0,19,177,1,0,0,0,21,186,1,0,0,0,23,189,1,0,0,0,25,194,1,0,0,0,27,
		201,1,0,0,0,29,206,1,0,0,0,31,209,1,0,0,0,33,215,1,0,0,0,35,220,1,0,0,
		0,37,225,1,0,0,0,39,234,1,0,0,0,41,248,1,0,0,0,43,264,1,0,0,0,45,276,1,
		0,0,0,47,292,1,0,0,0,49,305,1,0,0,0,51,307,1,0,0,0,53,309,1,0,0,0,55,312,
		1,0,0,0,57,315,1,0,0,0,59,317,1,0,0,0,61,319,1,0,0,0,63,323,1,0,0,0,65,
		327,1,0,0,0,67,330,1,0,0,0,69,334,1,0,0,0,71,337,1,0,0,0,73,339,1,0,0,
		0,75,341,1,0,0,0,77,343,1,0,0,0,79,345,1,0,0,0,81,349,1,0,0,0,83,355,1,
		0,0,0,85,360,1,0,0,0,87,366,1,0,0,0,89,372,1,0,0,0,91,374,1,0,0,0,93,376,
		1,0,0,0,95,378,1,0,0,0,97,380,1,0,0,0,99,382,1,0,0,0,101,386,1,0,0,0,103,
		396,1,0,0,0,105,398,1,0,0,0,107,407,1,0,0,0,109,417,1,0,0,0,111,427,1,
		0,0,0,113,431,1,0,0,0,115,440,1,0,0,0,117,444,1,0,0,0,119,446,1,0,0,0,
		121,123,3,3,1,0,122,124,3,5,2,0,123,122,1,0,0,0,123,124,1,0,0,0,124,127,
		1,0,0,0,125,127,3,5,2,0,126,121,1,0,0,0,126,125,1,0,0,0,127,2,1,0,0,0,
		128,129,5,13,0,0,129,4,1,0,0,0,130,131,5,10,0,0,131,6,1,0,0,0,132,133,
		5,46,0,0,133,134,5,46,0,0,134,135,5,46,0,0,135,139,1,0,0,0,136,138,7,0,
		0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,
		142,1,0,0,0,141,139,1,0,0,0,142,143,3,1,0,0,143,8,1,0,0,0,144,146,7,1,
		0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,
		149,1,0,0,0,149,150,6,4,0,0,150,10,1,0,0,0,151,155,5,123,0,0,152,154,9,
		0,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,156,1,0,0,0,155,153,1,0,0,0,
		156,158,1,0,0,0,157,155,1,0,0,0,158,159,5,125,0,0,159,160,1,0,0,0,160,
		161,6,5,0,0,161,12,1,0,0,0,162,163,5,100,0,0,163,164,5,101,0,0,164,165,
		5,99,0,0,165,166,5,108,0,0,166,167,5,97,0,0,167,168,5,114,0,0,168,169,
		5,101,0,0,169,14,1,0,0,0,170,171,5,111,0,0,171,172,5,110,0,0,172,16,1,
		0,0,0,173,174,5,101,0,0,174,175,5,110,0,0,175,176,5,100,0,0,176,18,1,0,
		0,0,177,178,5,102,0,0,178,179,5,117,0,0,179,180,5,110,0,0,180,181,5,99,
		0,0,181,182,5,116,0,0,182,183,5,105,0,0,183,184,5,111,0,0,184,185,5,110,
		0,0,185,20,1,0,0,0,186,187,5,105,0,0,187,188,5,102,0,0,188,22,1,0,0,0,
		189,190,5,101,0,0,190,191,5,108,0,0,191,192,5,115,0,0,192,193,5,101,0,
		0,193,24,1,0,0,0,194,195,5,115,0,0,195,196,5,101,0,0,196,197,5,108,0,0,
		197,198,5,101,0,0,198,199,5,99,0,0,199,200,5,116,0,0,200,26,1,0,0,0,201,
		202,5,99,0,0,202,203,5,97,0,0,203,204,5,115,0,0,204,205,5,101,0,0,205,
		28,1,0,0,0,206,207,5,116,0,0,207,208,5,111,0,0,208,30,1,0,0,0,209,210,
		5,119,0,0,210,211,5,104,0,0,211,212,5,105,0,0,212,213,5,108,0,0,213,214,
		5,101,0,0,214,32,1,0,0,0,215,216,5,99,0,0,216,217,5,97,0,0,217,218,5,108,
		0,0,218,219,5,108,0,0,219,34,1,0,0,0,220,221,5,101,0,0,221,222,5,120,0,
		0,222,223,5,105,0,0,223,224,5,116,0,0,224,36,1,0,0,0,225,226,5,99,0,0,
		226,227,5,111,0,0,227,228,5,110,0,0,228,229,5,116,0,0,229,230,5,105,0,
		0,230,231,5,110,0,0,231,232,5,117,0,0,232,233,5,101,0,0,233,38,1,0,0,0,
		234,235,5,83,0,0,235,236,5,69,0,0,236,237,5,84,0,0,237,238,5,95,0,0,238,
		239,5,67,0,0,239,240,5,79,0,0,240,241,5,78,0,0,241,242,5,68,0,0,242,243,
		5,73,0,0,243,244,5,84,0,0,244,245,5,73,0,0,245,246,5,79,0,0,246,247,5,
		78,0,0,247,40,1,0,0,0,248,249,5,82,0,0,249,250,5,69,0,0,250,251,5,83,0,
		0,251,252,5,69,0,0,252,253,5,84,0,0,253,254,5,95,0,0,254,255,5,67,0,0,
		255,256,5,79,0,0,256,257,5,78,0,0,257,258,5,68,0,0,258,259,5,73,0,0,259,
		260,5,84,0,0,260,261,5,73,0,0,261,262,5,79,0,0,262,263,5,78,0,0,263,42,
		1,0,0,0,264,265,5,85,0,0,265,266,5,83,0,0,266,267,5,69,0,0,267,268,5,95,
		0,0,268,269,5,67,0,0,269,270,5,79,0,0,270,271,5,68,0,0,271,272,5,69,0,
		0,272,273,5,95,0,0,273,274,5,73,0,0,274,275,5,70,0,0,275,44,1,0,0,0,276,
		277,5,85,0,0,277,278,5,83,0,0,278,279,5,69,0,0,279,280,5,95,0,0,280,281,
		5,67,0,0,281,282,5,79,0,0,282,283,5,68,0,0,283,284,5,69,0,0,284,285,5,
		95,0,0,285,286,5,73,0,0,286,287,5,70,0,0,287,288,5,95,0,0,288,289,5,78,
		0,0,289,290,5,79,0,0,290,291,5,84,0,0,291,46,1,0,0,0,292,293,5,69,0,0,
		293,294,5,78,0,0,294,295,5,68,0,0,295,296,5,95,0,0,296,297,5,85,0,0,297,
		298,5,83,0,0,298,299,5,69,0,0,299,300,5,95,0,0,300,301,5,67,0,0,301,302,
		5,79,0,0,302,303,5,68,0,0,303,304,5,69,0,0,304,48,1,0,0,0,305,306,5,62,
		0,0,306,50,1,0,0,0,307,308,5,60,0,0,308,52,1,0,0,0,309,310,5,62,0,0,310,
		311,5,61,0,0,311,54,1,0,0,0,312,313,5,60,0,0,313,314,5,61,0,0,314,56,1,
		0,0,0,315,316,5,61,0,0,316,58,1,0,0,0,317,318,5,35,0,0,318,60,1,0,0,0,
		319,320,5,110,0,0,320,321,5,111,0,0,321,322,5,116,0,0,322,62,1,0,0,0,323,
		324,5,97,0,0,324,325,5,110,0,0,325,326,5,100,0,0,326,64,1,0,0,0,327,328,
		5,111,0,0,328,329,5,114,0,0,329,66,1,0,0,0,330,331,5,120,0,0,331,332,5,
		111,0,0,332,333,5,114,0,0,333,68,1,0,0,0,334,335,5,58,0,0,335,336,5,61,
		0,0,336,70,1,0,0,0,337,338,5,43,0,0,338,72,1,0,0,0,339,340,5,45,0,0,340,
		74,1,0,0,0,341,342,5,42,0,0,342,76,1,0,0,0,343,344,5,47,0,0,344,78,1,0,
		0,0,345,346,5,109,0,0,346,347,5,111,0,0,347,348,5,100,0,0,348,80,1,0,0,
		0,349,350,5,46,0,0,350,351,5,97,0,0,351,352,5,110,0,0,352,353,5,100,0,
		0,353,354,5,46,0,0,354,82,1,0,0,0,355,356,5,46,0,0,356,357,5,111,0,0,357,
		358,5,114,0,0,358,359,5,46,0,0,359,84,1,0,0,0,360,361,5,46,0,0,361,362,
		5,110,0,0,362,363,5,111,0,0,363,364,5,116,0,0,364,365,5,46,0,0,365,86,
		1,0,0,0,366,367,5,46,0,0,367,368,5,120,0,0,368,369,5,111,0,0,369,370,5,
		114,0,0,370,371,5,46,0,0,371,88,1,0,0,0,372,373,5,38,0,0,373,90,1,0,0,
		0,374,375,5,40,0,0,375,92,1,0,0,0,376,377,5,41,0,0,377,94,1,0,0,0,378,
		379,5,91,0,0,379,96,1,0,0,0,380,381,5,93,0,0,381,98,1,0,0,0,382,383,5,
		44,0,0,383,100,1,0,0,0,384,387,3,103,51,0,385,387,3,105,52,0,386,384,1,
		0,0,0,386,385,1,0,0,0,387,102,1,0,0,0,388,397,5,48,0,0,389,393,2,49,57,
		0,390,392,2,48,57,0,391,390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,
		394,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,396,388,1,0,0,0,396,389,1,
		0,0,0,397,104,1,0,0,0,398,400,5,57,0,0,399,401,7,2,0,0,400,399,1,0,0,0,
		401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,405,
		7,3,0,0,405,106,1,0,0,0,406,408,2,48,57,0,407,406,1,0,0,0,408,409,1,0,
		0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,413,5,46,0,0,412,
		414,2,48,57,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,
		1,0,0,0,416,108,1,0,0,0,417,422,5,34,0,0,418,421,8,4,0,0,419,421,3,111,
		55,0,420,418,1,0,0,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,
		423,1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,426,5,34,0,0,426,110,1,
		0,0,0,427,428,5,92,0,0,428,429,7,5,0,0,429,112,1,0,0,0,430,432,3,119,59,
		0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,437,3,115,57,0,434,
		436,3,117,58,0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,
		1,0,0,0,438,114,1,0,0,0,439,437,1,0,0,0,440,441,7,6,0,0,441,116,1,0,0,
		0,442,445,3,115,57,0,443,445,7,7,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,
		118,1,0,0,0,446,447,7,8,0,0,447,120,1,0,0,0,17,0,123,126,139,147,155,386,
		393,396,402,409,415,420,422,431,437,444,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KSPCompiler.Infrastructures.Parser.Antlr
