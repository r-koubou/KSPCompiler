//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KSPParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KSPCompiler.Infrastructures.Parser.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KSPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, MULTI_LINE_DELIMITER=2, Whitespace=3, BlockComment=4, DECLARE=5, 
		CONST=6, POLYPHONIC=7, ON=8, END=9, FUNCTION=10, IF=11, ELSE=12, SELECT=13, 
		CASE=14, TO=15, WHILE=16, CALL=17, CONTINUE=18, PREPROCESSOR_SET_COND=19, 
		PREPROCESSOR_RESET_COND=20, PREPROCESSOR_CODE_IF=21, PREPROCESSOR_CODE_IF_NOT=22, 
		PREPROCESSOR_CODE_END_IF=23, BOOL_GT=24, BOOL_LT=25, BOOL_GE=26, BOOL_LE=27, 
		BOOL_EQ=28, BOOL_NE=29, BOOL_NOT=30, BOOL_AND=31, BOOL_OR=32, BOOL_XOR=33, 
		ASSIGN=34, PLUS=35, MINUS=36, MUL=37, DIV=38, MOD=39, BIT_AND=40, BIT_OR=41, 
		BIT_NOT=42, BIT_XOR=43, STRING_ADD=44, LPARENT=45, RPARENT=46, LBRACKET=47, 
		RBRACKET=48, COMMA=49, INTEGER_LITERAL=50, REAL_LITERAL=51, STRING_LITERAL=52, 
		IDENTIFIER=53;
	public const int
		RULE_compilationUnit = 0, RULE_declarationModifier = 1, RULE_callbackDeclaration = 2, 
		RULE_argumentDefinitionList = 3, RULE_userFunctionDeclaration = 4, RULE_block = 5, 
		RULE_variableDeclaration = 6, RULE_variableInitializer = 7, RULE_primitiveInitializer = 8, 
		RULE_arrayInitializer = 9, RULE_uiInitializer = 10, RULE_statement = 11, 
		RULE_preprocessor = 12, RULE_preprocessorDefine = 13, RULE_preprocessorUndefine = 14, 
		RULE_preprocessorIfdefine = 15, RULE_preprocessorIfnotDefine = 16, RULE_ifStatement = 17, 
		RULE_selectStatement = 18, RULE_caseBlock = 19, RULE_whileStatement = 20, 
		RULE_continueStatement = 21, RULE_callUserFunction = 22, RULE_expressionStatement = 23, 
		RULE_primaryExpression = 24, RULE_postfixExpression = 25, RULE_assignmentExpression = 26, 
		RULE_assignmentExpressionList = 27, RULE_assignmentOperator = 28, RULE_expression = 29, 
		RULE_expressionList = 30, RULE_stringConcatenateExpression = 31, RULE_logicalOrExpression = 32, 
		RULE_logicalAndExpression = 33, RULE_logicalXorExpression = 34, RULE_bitwiseOrExpression = 35, 
		RULE_bitwiseAndExpression = 36, RULE_bitwiseXorExpression = 37, RULE_equalityExpression = 38, 
		RULE_relationalExpression = 39, RULE_additiveExpression = 40, RULE_multiplicativeExpression = 41, 
		RULE_unaryExpression = 42;
	public static readonly string[] ruleNames = {
		"compilationUnit", "declarationModifier", "callbackDeclaration", "argumentDefinitionList", 
		"userFunctionDeclaration", "block", "variableDeclaration", "variableInitializer", 
		"primitiveInitializer", "arrayInitializer", "uiInitializer", "statement", 
		"preprocessor", "preprocessorDefine", "preprocessorUndefine", "preprocessorIfdefine", 
		"preprocessorIfnotDefine", "ifStatement", "selectStatement", "caseBlock", 
		"whileStatement", "continueStatement", "callUserFunction", "expressionStatement", 
		"primaryExpression", "postfixExpression", "assignmentExpression", "assignmentExpressionList", 
		"assignmentOperator", "expression", "expressionList", "stringConcatenateExpression", 
		"logicalOrExpression", "logicalAndExpression", "logicalXorExpression", 
		"bitwiseOrExpression", "bitwiseAndExpression", "bitwiseXorExpression", 
		"equalityExpression", "relationalExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'declare'", "'const'", "'polyphonic'", 
		"'on'", "'end'", "'function'", "'if'", "'else'", "'select'", "'case'", 
		"'to'", "'while'", "'call'", "'continue'", "'SET_CONDITION'", "'RESET_CONDITION'", 
		"'USE_CODE_IF'", "'USE_CODE_IF_NOT'", "'END_USE_CODE'", "'>'", "'<'", 
		"'>='", "'<='", "'='", "'#'", "'not'", "'and'", "'or'", "'xor'", "':='", 
		"'+'", "'-'", "'*'", "'/'", "'mod'", "'.and.'", "'.or.'", "'.not.'", "'.xor.'", 
		"'&'", "'('", "')'", "'['", "']'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "MULTI_LINE_DELIMITER", "Whitespace", "BlockComment", "DECLARE", 
		"CONST", "POLYPHONIC", "ON", "END", "FUNCTION", "IF", "ELSE", "SELECT", 
		"CASE", "TO", "WHILE", "CALL", "CONTINUE", "PREPROCESSOR_SET_COND", "PREPROCESSOR_RESET_COND", 
		"PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", "PREPROCESSOR_CODE_END_IF", 
		"BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", "BOOL_EQ", "BOOL_NE", "BOOL_NOT", 
		"BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
		"MOD", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_XOR", "STRING_ADD", "LPARENT", 
		"RPARENT", "LBRACKET", "RBRACKET", "COMMA", "INTEGER_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KSPParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KSPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KSPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KSPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallbackDeclarationContext[] callbackDeclaration() {
			return GetRuleContexts<CallbackDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallbackDeclarationContext callbackDeclaration(int i) {
			return GetRuleContext<CallbackDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionDeclarationContext[] userFunctionDeclaration() {
			return GetRuleContexts<UserFunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionDeclarationContext userFunctionDeclaration(int i) {
			return GetRuleContext<UserFunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KSPParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KSPParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1286L) != 0)) {
				{
				State = 90;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 86;
					callbackDeclaration();
					}
					break;
				case FUNCTION:
					{
					State = 87;
					userFunctionDeclaration();
					}
					break;
				case EOL:
					{
					State = 88;
					Match(EOL);
					}
					break;
				case MULTI_LINE_DELIMITER:
					{
					State = 89;
					Match(MULTI_LINE_DELIMITER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(KSPParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KSPParser.IDENTIFIER, i);
		}
		public DeclarationModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterDeclarationModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitDeclarationModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationModifierContext declarationModifier() {
		DeclarationModifierContext _localctx = new DeclarationModifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_declarationModifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 95;
					Match(IDENTIFIER);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 98;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallbackDeclarationContext : ParserRuleContext {
		public IToken name;
		public ArgumentDefinitionListContext arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(KSPParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(KSPParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDefinitionListContext argumentDefinitionList() {
			return GetRuleContext<ArgumentDefinitionListContext>(0);
		}
		public CallbackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callbackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCallbackDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCallbackDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallbackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallbackDeclarationContext callbackDeclaration() {
		CallbackDeclarationContext _localctx = new CallbackDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_callbackDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(ON);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 101;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			_localctx.name = Match(IDENTIFIER);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 108;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPARENT) {
				{
				State = 114;
				Match(LPARENT);
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 115;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 121;
				_localctx.arguments = argumentDefinitionList(0);
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 122;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 127;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 128;
				Match(RPARENT);
				}
			}

			State = 132;
			Match(EOL);
			State = 133;
			block();
			State = 134;
			Match(END);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 135;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDefinitionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDefinitionListContext argumentDefinitionList() {
			return GetRuleContext<ArgumentDefinitionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public ArgumentDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDefinitionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterArgumentDefinitionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitArgumentDefinitionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDefinitionListContext argumentDefinitionList() {
		return argumentDefinitionList(0);
	}

	private ArgumentDefinitionListContext argumentDefinitionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentDefinitionListContext _localctx = new ArgumentDefinitionListContext(Context, _parentState);
		ArgumentDefinitionListContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_argumentDefinitionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 144;
			Match(IDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentDefinitionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentDefinitionList);
					State = 146;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 147;
					Match(COMMA);
					State = 148;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserFunctionDeclarationContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(KSPParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(KSPParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public UserFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUserFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUserFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserFunctionDeclarationContext userFunctionDeclaration() {
		UserFunctionDeclarationContext _localctx = new UserFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_userFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(FUNCTION);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 155;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 161;
			_localctx.name = Match(IDENTIFIER);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPARENT) {
				{
				State = 162;
				Match(LPARENT);
				State = 163;
				Match(RPARENT);
				}
			}

			State = 166;
			Match(EOL);
			State = 167;
			block();
			State = 168;
			Match(END);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 169;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 175;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 177;
					statement();
					}
					} 
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public DeclarationModifierContext modifier;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(KSPParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationModifierContext[] declarationModifier() {
			return GetRuleContexts<DeclarationModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationModifierContext declarationModifier(int i) {
			return GetRuleContext<DeclarationModifierContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(DECLARE);
			State = 187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 184;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 190;
					_localctx.modifier = declarationModifier();
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 196;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 202;
			_localctx.name = Match(IDENTIFIER);
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 203;
				variableInitializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveInitializerContext primitiveInitializer() {
			return GetRuleContext<PrimitiveInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableInitializer);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				arrayInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				primitiveInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KSPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UiInitializerContext uiInitializer() {
			return GetRuleContext<UiInitializerContext>(0);
		}
		public PrimitiveInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveInitializerContext primitiveInitializer() {
		PrimitiveInitializerContext _localctx = new PrimitiveInitializerContext(Context, State);
		EnterRule(_localctx, 16, RULE_primitiveInitializer);
		int _la;
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 210;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 216;
				Match(ASSIGN);
				State = 217;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				uiInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KSPParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KSPParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 18, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 221;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227;
			Match(LBRACKET);
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 228;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 234;
			expression();
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 235;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 241;
			Match(RBRACKET);
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 242;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 248;
				Match(LPARENT);
				State = 249;
				expressionList(0);
				State = 250;
				Match(RPARENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UiInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public UiInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uiInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUiInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUiInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUiInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UiInitializerContext uiInitializer() {
		UiInitializerContext _localctx = new UiInitializerContext(Context, State);
		EnterRule(_localctx, 20, RULE_uiInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 254;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 260;
			Match(LPARENT);
			State = 261;
			expressionList(0);
			State = 262;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER() { return GetToken(KSPParser.MULTI_LINE_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorContext preprocessor() {
			return GetRuleContext<PreprocessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallUserFunctionContext callUserFunction() {
			return GetRuleContext<CallUserFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				Match(MULTI_LINE_DELIMITER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				Match(EOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 266;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 267;
				preprocessor();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 268;
				ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 269;
				selectStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 270;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 271;
				continueStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 272;
				callUserFunction();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 273;
				expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDefineContext preprocessorDefine() {
			return GetRuleContext<PreprocessorDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorUndefineContext preprocessorUndefine() {
			return GetRuleContext<PreprocessorUndefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorIfdefineContext preprocessorIfdefine() {
			return GetRuleContext<PreprocessorIfdefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorIfnotDefineContext preprocessorIfnotDefine() {
			return GetRuleContext<PreprocessorIfnotDefineContext>(0);
		}
		public PreprocessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorContext preprocessor() {
		PreprocessorContext _localctx = new PreprocessorContext(Context, State);
		EnterRule(_localctx, 24, RULE_preprocessor);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPROCESSOR_SET_COND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				preprocessorDefine();
				}
				break;
			case PREPROCESSOR_RESET_COND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				preprocessorUndefine();
				}
				break;
			case PREPROCESSOR_CODE_IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				preprocessorIfdefine();
				}
				break;
			case PREPROCESSOR_CODE_IF_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				preprocessorIfnotDefine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_SET_COND() { return GetToken(KSPParser.PREPROCESSOR_SET_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDefineContext preprocessorDefine() {
		PreprocessorDefineContext _localctx = new PreprocessorDefineContext(Context, State);
		EnterRule(_localctx, 26, RULE_preprocessorDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(PREPROCESSOR_SET_COND);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 283;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 289;
			Match(LPARENT);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 290;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 296;
			_localctx.symbol = Match(IDENTIFIER);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 297;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 303;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorUndefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_RESET_COND() { return GetToken(KSPParser.PREPROCESSOR_RESET_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorUndefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorUndefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorUndefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorUndefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorUndefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorUndefineContext preprocessorUndefine() {
		PreprocessorUndefineContext _localctx = new PreprocessorUndefineContext(Context, State);
		EnterRule(_localctx, 28, RULE_preprocessorUndefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(PREPROCESSOR_RESET_COND);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 306;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 312;
			Match(LPARENT);
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 313;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 319;
			_localctx.symbol = Match(IDENTIFIER);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 320;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 326;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorIfdefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_END_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorIfdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorIfdefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorIfdefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorIfdefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIfdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorIfdefineContext preprocessorIfdefine() {
		PreprocessorIfdefineContext _localctx = new PreprocessorIfdefineContext(Context, State);
		EnterRule(_localctx, 30, RULE_preprocessorIfdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(PREPROCESSOR_CODE_IF);
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 329;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 335;
			Match(LPARENT);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 336;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 342;
			_localctx.symbol = Match(IDENTIFIER);
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 343;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 349;
			Match(RPARENT);
			State = 350;
			block();
			State = 351;
			Match(PREPROCESSOR_CODE_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorIfnotDefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_IF_NOT() { return GetToken(KSPParser.PREPROCESSOR_CODE_IF_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_END_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorIfnotDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorIfnotDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorIfnotDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorIfnotDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIfnotDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorIfnotDefineContext preprocessorIfnotDefine() {
		PreprocessorIfnotDefineContext _localctx = new PreprocessorIfnotDefineContext(Context, State);
		EnterRule(_localctx, 32, RULE_preprocessorIfnotDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(PREPROCESSOR_CODE_IF_NOT);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 354;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 360;
			Match(LPARENT);
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 361;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 367;
			_localctx.symbol = Match(IDENTIFIER);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 368;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 374;
			Match(RPARENT);
			State = 375;
			block();
			State = 376;
			Match(PREPROCESSOR_CODE_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public BlockContext ifBlock;
		public BlockContext elseBlock;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(KSPParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(KSPParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KSPParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(IF);
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 379;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 385;
			Match(LPARENT);
			State = 386;
			expression();
			State = 387;
			Match(RPARENT);
			State = 388;
			_localctx.ifBlock = block();
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 389;
				Match(ELSE);
				State = 390;
				_localctx.elseBlock = block();
				}
			}

			State = 393;
			Match(END);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 394;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 400;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SELECT() { return GetTokens(KSPParser.SELECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT(int i) {
			return GetToken(KSPParser.SELECT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KSPParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KSPParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(SELECT);
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 403;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 409;
			Match(LPARENT);
			State = 410;
			expression();
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 411;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 417;
			Match(RPARENT);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 418;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 424;
				Match(EOL);
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 429;
				caseBlock();
				}
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 434;
			Match(END);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 435;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 441;
			Match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext condFrom;
		public ExpressionContext condTo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(KSPParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(KSPParser.TO, 0); }
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_caseBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(CASE);
			State = 447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 444;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 450;
			_localctx.condFrom = expression();
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 451;
				Match(TO);
				State = 455;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 452;
						Match(MULTI_LINE_DELIMITER);
						}
						} 
					}
					State = 457;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				State = 458;
				_localctx.condTo = expression();
				}
			}

			State = 461;
			block();
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 462;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(KSPParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(KSPParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(WHILE);
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 469;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 475;
			Match(LPARENT);
			State = 476;
			expression();
			State = 477;
			Match(RPARENT);
			State = 478;
			block();
			State = 479;
			Match(END);
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 480;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 486;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(KSPParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_continueStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(CONTINUE);
			State = 492;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 489;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallUserFunctionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(KSPParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public CallUserFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callUserFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCallUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCallUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallUserFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallUserFunctionContext callUserFunction() {
		CallUserFunctionContext _localctx = new CallUserFunctionContext(Context, State);
		EnterRule(_localctx, 44, RULE_callUserFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(CALL);
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 496;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 502;
			_localctx.name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_expressionStatement);
		try {
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504;
				assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER() { return GetToken(KSPParser.MULTI_LINE_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(KSPParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(KSPParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(KSPParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_primaryExpression);
		int _la;
		try {
			State = 516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MULTI_LINE_DELIMITER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				Match(MULTI_LINE_DELIMITER);
				State = 509;
				primaryExpression();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 511;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7881299347898368L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LPARENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 512;
				Match(LPARENT);
				State = 513;
				expression();
				State = 514;
				Match(RPARENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PostfixExpressionContext callExpr;
		public PostfixExpressionContext arrayExpr;
		public PrimaryExpressionContext expr;
		public ExpressionListContext callArgs;
		public ExpressionContext arrayIndexExpr;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KSPParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KSPParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 519;
			_localctx.expr = primaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 558;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 556;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						_localctx.callExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 521;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 525;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 522;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 527;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 528;
						Match(LPARENT);
						State = 530;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
						case 1:
							{
							State = 529;
							_localctx.callArgs = expressionList(0);
							}
							break;
						}
						State = 535;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 532;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 537;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 538;
						Match(RPARENT);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						_localctx.arrayExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 539;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 543;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 540;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 545;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 546;
						Match(LBRACKET);
						State = 547;
						_localctx.arrayIndexExpr = expression();
						State = 551;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 548;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 553;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 554;
						Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 560;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			postfixExpression(0);
			State = 562;
			assignmentOperator();
			State = 563;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionListContext assignmentExpressionList() {
			return GetRuleContext<AssignmentExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public AssignmentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionListContext assignmentExpressionList() {
		return assignmentExpressionList(0);
	}

	private AssignmentExpressionListContext assignmentExpressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AssignmentExpressionListContext _localctx = new AssignmentExpressionListContext(Context, _parentState);
		AssignmentExpressionListContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_assignmentExpressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 566;
			assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 573;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssignmentExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assignmentExpressionList);
					State = 568;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 569;
					Match(COMMA);
					State = 570;
					assignmentExpression();
					}
					} 
				}
				State = 575;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public IToken opr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KSPParser.ASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_assignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			_localctx.opr = Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringConcatenateExpressionContext stringConcatenateExpression() {
			return GetRuleContext<StringConcatenateExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			stringConcatenateExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		return expressionList(0);
	}

	private ExpressionListContext expressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionListContext _localctx = new ExpressionListContext(Context, _parentState);
		ExpressionListContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 581;
			expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 588;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expressionList);
					State = 583;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 584;
					Match(COMMA);
					State = 585;
					expression();
					}
					} 
				}
				State = 590;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringConcatenateExpressionContext : ParserRuleContext {
		public StringConcatenateExpressionContext left;
		public LogicalOrExpressionContext nested;
		public LogicalOrExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_ADD() { return GetToken(KSPParser.STRING_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringConcatenateExpressionContext stringConcatenateExpression() {
			return GetRuleContext<StringConcatenateExpressionContext>(0);
		}
		public StringConcatenateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConcatenateExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterStringConcatenateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitStringConcatenateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConcatenateExpressionContext stringConcatenateExpression() {
		return stringConcatenateExpression(0);
	}

	private StringConcatenateExpressionContext stringConcatenateExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StringConcatenateExpressionContext _localctx = new StringConcatenateExpressionContext(Context, _parentState);
		StringConcatenateExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_stringConcatenateExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 592;
			_localctx.nested = logicalOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 599;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StringConcatenateExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_stringConcatenateExpression);
					State = 594;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 595;
					Match(STRING_ADD);
					State = 596;
					_localctx.right = logicalOrExpression(0);
					}
					} 
				}
				State = 601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext left;
		public LogicalAndExpressionContext nested;
		public LogicalAndExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OR() { return GetToken(KSPParser.BOOL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		return logicalOrExpression(0);
	}

	private LogicalOrExpressionContext logicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 603;
			_localctx.nested = logicalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
					State = 605;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 606;
					Match(BOOL_OR);
					State = 607;
					_localctx.right = logicalAndExpression(0);
					}
					} 
				}
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext left;
		public LogicalXorExpressionContext nested;
		public LogicalXorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalXorExpressionContext logicalXorExpression() {
			return GetRuleContext<LogicalXorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_AND() { return GetToken(KSPParser.BOOL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		return logicalAndExpression(0);
	}

	private LogicalAndExpressionContext logicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 614;
			_localctx.nested = logicalXorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 621;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
					State = 616;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 617;
					Match(BOOL_AND);
					State = 618;
					_localctx.right = logicalXorExpression(0);
					}
					} 
				}
				State = 623;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalXorExpressionContext : ParserRuleContext {
		public LogicalXorExpressionContext left;
		public BitwiseOrExpressionContext nested;
		public BitwiseOrExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext bitwiseOrExpression() {
			return GetRuleContext<BitwiseOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_XOR() { return GetToken(KSPParser.BOOL_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalXorExpressionContext logicalXorExpression() {
			return GetRuleContext<LogicalXorExpressionContext>(0);
		}
		public LogicalXorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalXorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalXorExpressionContext logicalXorExpression() {
		return logicalXorExpression(0);
	}

	private LogicalXorExpressionContext logicalXorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalXorExpressionContext _localctx = new LogicalXorExpressionContext(Context, _parentState);
		LogicalXorExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_logicalXorExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 625;
			_localctx.nested = bitwiseOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 632;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalXorExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalXorExpression);
					State = 627;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 628;
					Match(BOOL_XOR);
					State = 629;
					_localctx.right = bitwiseOrExpression(0);
					}
					} 
				}
				State = 634;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseOrExpressionContext : ParserRuleContext {
		public BitwiseOrExpressionContext left;
		public BitwiseAndExpressionContext nested;
		public BitwiseAndExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndExpressionContext bitwiseAndExpression() {
			return GetRuleContext<BitwiseAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(KSPParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext bitwiseOrExpression() {
			return GetRuleContext<BitwiseOrExpressionContext>(0);
		}
		public BitwiseOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrExpressionContext bitwiseOrExpression() {
		return bitwiseOrExpression(0);
	}

	private BitwiseOrExpressionContext bitwiseOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseOrExpressionContext _localctx = new BitwiseOrExpressionContext(Context, _parentState);
		BitwiseOrExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_bitwiseOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 636;
			_localctx.nested = bitwiseAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 643;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseOrExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseOrExpression);
					State = 638;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 639;
					Match(BIT_OR);
					State = 640;
					_localctx.right = bitwiseAndExpression(0);
					}
					} 
				}
				State = 645;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseAndExpressionContext : ParserRuleContext {
		public BitwiseAndExpressionContext left;
		public BitwiseXorExpressionContext nested;
		public BitwiseXorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXorExpressionContext bitwiseXorExpression() {
			return GetRuleContext<BitwiseXorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(KSPParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndExpressionContext bitwiseAndExpression() {
			return GetRuleContext<BitwiseAndExpressionContext>(0);
		}
		public BitwiseAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndExpressionContext bitwiseAndExpression() {
		return bitwiseAndExpression(0);
	}

	private BitwiseAndExpressionContext bitwiseAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseAndExpressionContext _localctx = new BitwiseAndExpressionContext(Context, _parentState);
		BitwiseAndExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_bitwiseAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 647;
			_localctx.nested = bitwiseXorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 654;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseAndExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseAndExpression);
					State = 649;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 650;
					Match(BIT_AND);
					State = 651;
					_localctx.right = bitwiseXorExpression(0);
					}
					} 
				}
				State = 656;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseXorExpressionContext : ParserRuleContext {
		public BitwiseXorExpressionContext left;
		public EqualityExpressionContext nested;
		public EqualityExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(KSPParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXorExpressionContext bitwiseXorExpression() {
			return GetRuleContext<BitwiseXorExpressionContext>(0);
		}
		public BitwiseXorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseXorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseXorExpressionContext bitwiseXorExpression() {
		return bitwiseXorExpression(0);
	}

	private BitwiseXorExpressionContext bitwiseXorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseXorExpressionContext _localctx = new BitwiseXorExpressionContext(Context, _parentState);
		BitwiseXorExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_bitwiseXorExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 658;
			_localctx.nested = equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 665;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseXorExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseXorExpression);
					State = 660;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 661;
					Match(BIT_XOR);
					State = 662;
					_localctx.right = equalityExpression(0);
					}
					} 
				}
				State = 667;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public EqualityExpressionContext left;
		public RelationalExpressionContext nested;
		public IToken opr;
		public RelationalExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_EQ() { return GetToken(KSPParser.BOOL_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NE() { return GetToken(KSPParser.BOOL_NE, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 669;
			_localctx.nested = relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 679;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 677;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 671;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 672;
						_localctx.opr = Match(BOOL_EQ);
						State = 673;
						_localctx.right = relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 674;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 675;
						_localctx.opr = Match(BOOL_NE);
						State = 676;
						_localctx.right = relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 681;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public RelationalExpressionContext left;
		public AdditiveExpressionContext nested;
		public IToken opr;
		public AdditiveExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LT() { return GetToken(KSPParser.BOOL_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_GT() { return GetToken(KSPParser.BOOL_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LE() { return GetToken(KSPParser.BOOL_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_GE() { return GetToken(KSPParser.BOOL_GE, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 683;
			_localctx.nested = additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 699;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 697;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 685;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 686;
						_localctx.opr = Match(BOOL_LT);
						State = 687;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 688;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 689;
						_localctx.opr = Match(BOOL_GT);
						State = 690;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 691;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 692;
						_localctx.opr = Match(BOOL_LE);
						State = 693;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 694;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 695;
						_localctx.opr = Match(BOOL_GE);
						State = 696;
						_localctx.right = additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 701;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext left;
		public MultiplicativeExpressionContext nested;
		public IToken opr;
		public MultiplicativeExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KSPParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KSPParser.MINUS, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 703;
			_localctx.nested = multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 713;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 711;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 705;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 706;
						_localctx.opr = Match(PLUS);
						State = 707;
						_localctx.right = multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 708;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 709;
						_localctx.opr = Match(MINUS);
						State = 710;
						_localctx.right = multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 715;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext left;
		public UnaryExpressionContext nested;
		public IToken opr;
		public UnaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(KSPParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KSPParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(KSPParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 717;
			_localctx.nested = unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 730;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 728;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 719;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 720;
						_localctx.opr = Match(MUL);
						State = 721;
						_localctx.right = unaryExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 722;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 723;
						_localctx.opr = Match(DIV);
						State = 724;
						_localctx.right = unaryExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 725;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 726;
						_localctx.opr = Match(MOD);
						State = 727;
						_localctx.right = unaryExpression();
						}
						break;
					}
					} 
				}
				State = 732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PostfixExpressionContext nested;
		public IToken opr;
		public UnaryExpressionContext unaryMinus;
		public UnaryExpressionContext unaryNot;
		public UnaryExpressionContext logicalNot;
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KSPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(KSPParser.BIT_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NOT() { return GetToken(KSPParser.BOOL_NOT, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_unaryExpression);
		try {
			State = 740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MULTI_LINE_DELIMITER:
			case LPARENT:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case STRING_LITERAL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 733;
				_localctx.nested = postfixExpression(0);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 734;
				_localctx.opr = Match(MINUS);
				State = 735;
				_localctx.unaryMinus = unaryExpression();
				}
				break;
			case BIT_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 736;
				_localctx.opr = Match(BIT_NOT);
				State = 737;
				_localctx.unaryNot = unaryExpression();
				}
				break;
			case BOOL_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 738;
				_localctx.opr = Match(BOOL_NOT);
				State = 739;
				_localctx.logicalNot = unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return argumentDefinitionList_sempred((ArgumentDefinitionListContext)_localctx, predIndex);
		case 25: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 27: return assignmentExpressionList_sempred((AssignmentExpressionListContext)_localctx, predIndex);
		case 30: return expressionList_sempred((ExpressionListContext)_localctx, predIndex);
		case 31: return stringConcatenateExpression_sempred((StringConcatenateExpressionContext)_localctx, predIndex);
		case 32: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		case 33: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 34: return logicalXorExpression_sempred((LogicalXorExpressionContext)_localctx, predIndex);
		case 35: return bitwiseOrExpression_sempred((BitwiseOrExpressionContext)_localctx, predIndex);
		case 36: return bitwiseAndExpression_sempred((BitwiseAndExpressionContext)_localctx, predIndex);
		case 37: return bitwiseXorExpression_sempred((BitwiseXorExpressionContext)_localctx, predIndex);
		case 38: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 39: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 40: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 41: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool argumentDefinitionList_sempred(ArgumentDefinitionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignmentExpressionList_sempred(AssignmentExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expressionList_sempred(ExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool stringConcatenateExpression_sempred(StringConcatenateExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalXorExpression_sempred(LogicalXorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseOrExpression_sempred(BitwiseOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseAndExpression_sempred(BitwiseAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseXorExpression_sempred(BitwiseXorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 4);
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 3);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,743,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,1,0,1,0,5,0,91,8,0,10,0,12,0,94,9,0,1,1,4,1,97,8,1,11,1,12,1,98,
		1,2,1,2,5,2,103,8,2,10,2,12,2,106,9,2,1,2,1,2,5,2,110,8,2,10,2,12,2,113,
		9,2,1,2,1,2,5,2,117,8,2,10,2,12,2,120,9,2,1,2,1,2,5,2,124,8,2,10,2,12,
		2,127,9,2,1,2,1,2,3,2,131,8,2,1,2,1,2,1,2,1,2,5,2,137,8,2,10,2,12,2,140,
		9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,150,8,3,10,3,12,3,153,9,3,1,4,
		1,4,5,4,157,8,4,10,4,12,4,160,9,4,1,4,1,4,1,4,3,4,165,8,4,1,4,1,4,1,4,
		1,4,5,4,171,8,4,10,4,12,4,174,9,4,1,4,1,4,1,5,5,5,179,8,5,10,5,12,5,182,
		9,5,1,6,1,6,5,6,186,8,6,10,6,12,6,189,9,6,1,6,5,6,192,8,6,10,6,12,6,195,
		9,6,1,6,5,6,198,8,6,10,6,12,6,201,9,6,1,6,1,6,3,6,205,8,6,1,7,1,7,3,7,
		209,8,7,1,8,5,8,212,8,8,10,8,12,8,215,9,8,1,8,1,8,1,8,3,8,220,8,8,1,9,
		5,9,223,8,9,10,9,12,9,226,9,9,1,9,1,9,5,9,230,8,9,10,9,12,9,233,9,9,1,
		9,1,9,5,9,237,8,9,10,9,12,9,240,9,9,1,9,1,9,5,9,244,8,9,10,9,12,9,247,
		9,9,1,9,1,9,1,9,1,9,3,9,253,8,9,1,10,5,10,256,8,10,10,10,12,10,259,9,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		3,11,275,8,11,1,12,1,12,1,12,1,12,3,12,281,8,12,1,13,1,13,5,13,285,8,13,
		10,13,12,13,288,9,13,1,13,1,13,5,13,292,8,13,10,13,12,13,295,9,13,1,13,
		1,13,5,13,299,8,13,10,13,12,13,302,9,13,1,13,1,13,1,14,1,14,5,14,308,8,
		14,10,14,12,14,311,9,14,1,14,1,14,5,14,315,8,14,10,14,12,14,318,9,14,1,
		14,1,14,5,14,322,8,14,10,14,12,14,325,9,14,1,14,1,14,1,15,1,15,5,15,331,
		8,15,10,15,12,15,334,9,15,1,15,1,15,5,15,338,8,15,10,15,12,15,341,9,15,
		1,15,1,15,5,15,345,8,15,10,15,12,15,348,9,15,1,15,1,15,1,15,1,15,1,16,
		1,16,5,16,356,8,16,10,16,12,16,359,9,16,1,16,1,16,5,16,363,8,16,10,16,
		12,16,366,9,16,1,16,1,16,5,16,370,8,16,10,16,12,16,373,9,16,1,16,1,16,
		1,16,1,16,1,17,1,17,5,17,381,8,17,10,17,12,17,384,9,17,1,17,1,17,1,17,
		1,17,1,17,1,17,3,17,392,8,17,1,17,1,17,5,17,396,8,17,10,17,12,17,399,9,
		17,1,17,1,17,1,18,1,18,5,18,405,8,18,10,18,12,18,408,9,18,1,18,1,18,1,
		18,5,18,413,8,18,10,18,12,18,416,9,18,1,18,1,18,5,18,420,8,18,10,18,12,
		18,423,9,18,1,18,4,18,426,8,18,11,18,12,18,427,1,18,4,18,431,8,18,11,18,
		12,18,432,1,18,1,18,5,18,437,8,18,10,18,12,18,440,9,18,1,18,1,18,1,19,
		1,19,5,19,446,8,19,10,19,12,19,449,9,19,1,19,1,19,1,19,5,19,454,8,19,10,
		19,12,19,457,9,19,1,19,3,19,460,8,19,1,19,1,19,5,19,464,8,19,10,19,12,
		19,467,9,19,1,20,1,20,5,20,471,8,20,10,20,12,20,474,9,20,1,20,1,20,1,20,
		1,20,1,20,1,20,5,20,482,8,20,10,20,12,20,485,9,20,1,20,1,20,1,21,1,21,
		5,21,491,8,21,10,21,12,21,494,9,21,1,22,1,22,5,22,498,8,22,10,22,12,22,
		501,9,22,1,22,1,22,1,23,1,23,3,23,507,8,23,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,3,24,517,8,24,1,25,1,25,1,25,1,25,1,25,5,25,524,8,25,10,25,
		12,25,527,9,25,1,25,1,25,3,25,531,8,25,1,25,5,25,534,8,25,10,25,12,25,
		537,9,25,1,25,1,25,1,25,5,25,542,8,25,10,25,12,25,545,9,25,1,25,1,25,1,
		25,5,25,550,8,25,10,25,12,25,553,9,25,1,25,1,25,5,25,557,8,25,10,25,12,
		25,560,9,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,572,
		8,27,10,27,12,27,575,9,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
		1,30,5,30,587,8,30,10,30,12,30,590,9,30,1,31,1,31,1,31,1,31,1,31,1,31,
		5,31,598,8,31,10,31,12,31,601,9,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,
		609,8,32,10,32,12,32,612,9,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,620,8,
		33,10,33,12,33,623,9,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,631,8,34,10,
		34,12,34,634,9,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,642,8,35,10,35,12,
		35,645,9,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,653,8,36,10,36,12,36,656,
		9,36,1,37,1,37,1,37,1,37,1,37,1,37,5,37,664,8,37,10,37,12,37,667,9,37,
		1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,678,8,38,10,38,12,38,
		681,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,5,39,698,8,39,10,39,12,39,701,9,39,1,40,1,40,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,5,40,712,8,40,10,40,12,40,715,9,40,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,729,8,41,10,41,12,
		41,732,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,741,8,42,1,42,0,15,
		6,50,54,60,62,64,66,68,70,72,74,76,78,80,82,43,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,78,80,82,84,0,1,1,0,50,52,803,0,92,1,0,0,0,2,96,1,0,0,0,
		4,100,1,0,0,0,6,143,1,0,0,0,8,154,1,0,0,0,10,180,1,0,0,0,12,183,1,0,0,
		0,14,208,1,0,0,0,16,219,1,0,0,0,18,224,1,0,0,0,20,257,1,0,0,0,22,274,1,
		0,0,0,24,280,1,0,0,0,26,282,1,0,0,0,28,305,1,0,0,0,30,328,1,0,0,0,32,353,
		1,0,0,0,34,378,1,0,0,0,36,402,1,0,0,0,38,443,1,0,0,0,40,468,1,0,0,0,42,
		488,1,0,0,0,44,495,1,0,0,0,46,506,1,0,0,0,48,516,1,0,0,0,50,518,1,0,0,
		0,52,561,1,0,0,0,54,565,1,0,0,0,56,576,1,0,0,0,58,578,1,0,0,0,60,580,1,
		0,0,0,62,591,1,0,0,0,64,602,1,0,0,0,66,613,1,0,0,0,68,624,1,0,0,0,70,635,
		1,0,0,0,72,646,1,0,0,0,74,657,1,0,0,0,76,668,1,0,0,0,78,682,1,0,0,0,80,
		702,1,0,0,0,82,716,1,0,0,0,84,740,1,0,0,0,86,91,3,4,2,0,87,91,3,8,4,0,
		88,91,5,1,0,0,89,91,5,2,0,0,90,86,1,0,0,0,90,87,1,0,0,0,90,88,1,0,0,0,
		90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,1,1,0,0,0,94,
		92,1,0,0,0,95,97,5,53,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,
		99,1,0,0,0,99,3,1,0,0,0,100,104,5,8,0,0,101,103,5,2,0,0,102,101,1,0,0,
		0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,
		104,1,0,0,0,107,111,5,53,0,0,108,110,5,2,0,0,109,108,1,0,0,0,110,113,1,
		0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,130,1,0,0,0,113,111,1,0,0,0,
		114,118,5,45,0,0,115,117,5,2,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,
		1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,118,1,0,0,0,121,125,3,6,3,
		0,122,124,5,2,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,
		126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,129,5,46,0,0,129,131,1,
		0,0,0,130,114,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,133,5,1,0,0,
		133,134,3,10,5,0,134,138,5,9,0,0,135,137,5,2,0,0,136,135,1,0,0,0,137,140,
		1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,
		0,141,142,5,8,0,0,142,5,1,0,0,0,143,144,6,3,-1,0,144,145,5,53,0,0,145,
		151,1,0,0,0,146,147,10,1,0,0,147,148,5,49,0,0,148,150,5,53,0,0,149,146,
		1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,7,1,0,0,0,
		153,151,1,0,0,0,154,158,5,10,0,0,155,157,5,2,0,0,156,155,1,0,0,0,157,160,
		1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,1,0,0,
		0,161,164,5,53,0,0,162,163,5,45,0,0,163,165,5,46,0,0,164,162,1,0,0,0,164,
		165,1,0,0,0,165,166,1,0,0,0,166,167,5,1,0,0,167,168,3,10,5,0,168,172,5,
		9,0,0,169,171,5,2,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,
		172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,5,10,0,0,176,9,
		1,0,0,0,177,179,3,22,11,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,
		0,0,180,181,1,0,0,0,181,11,1,0,0,0,182,180,1,0,0,0,183,187,5,5,0,0,184,
		186,5,2,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,
		0,0,0,188,193,1,0,0,0,189,187,1,0,0,0,190,192,3,2,1,0,191,190,1,0,0,0,
		192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,199,1,0,0,0,195,193,
		1,0,0,0,196,198,5,2,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,
		0,199,200,1,0,0,0,200,202,1,0,0,0,201,199,1,0,0,0,202,204,5,53,0,0,203,
		205,3,14,7,0,204,203,1,0,0,0,204,205,1,0,0,0,205,13,1,0,0,0,206,209,3,
		18,9,0,207,209,3,16,8,0,208,206,1,0,0,0,208,207,1,0,0,0,209,15,1,0,0,0,
		210,212,5,2,0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,
		1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,217,5,34,0,0,217,220,3,58,
		29,0,218,220,3,20,10,0,219,213,1,0,0,0,219,218,1,0,0,0,220,17,1,0,0,0,
		221,223,5,2,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,
		1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,231,5,47,0,0,228,230,5,2,0,
		0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,
		234,1,0,0,0,233,231,1,0,0,0,234,238,3,58,29,0,235,237,5,2,0,0,236,235,
		1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,
		0,240,238,1,0,0,0,241,252,5,48,0,0,242,244,5,2,0,0,243,242,1,0,0,0,244,
		247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,245,1,
		0,0,0,248,249,5,45,0,0,249,250,3,60,30,0,250,251,5,46,0,0,251,253,1,0,
		0,0,252,245,1,0,0,0,252,253,1,0,0,0,253,19,1,0,0,0,254,256,5,2,0,0,255,
		254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,
		0,0,0,259,257,1,0,0,0,260,261,5,45,0,0,261,262,3,60,30,0,262,263,5,46,
		0,0,263,21,1,0,0,0,264,275,5,2,0,0,265,275,5,1,0,0,266,275,3,12,6,0,267,
		275,3,24,12,0,268,275,3,34,17,0,269,275,3,36,18,0,270,275,3,40,20,0,271,
		275,3,42,21,0,272,275,3,44,22,0,273,275,3,46,23,0,274,264,1,0,0,0,274,
		265,1,0,0,0,274,266,1,0,0,0,274,267,1,0,0,0,274,268,1,0,0,0,274,269,1,
		0,0,0,274,270,1,0,0,0,274,271,1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,0,
		275,23,1,0,0,0,276,281,3,26,13,0,277,281,3,28,14,0,278,281,3,30,15,0,279,
		281,3,32,16,0,280,276,1,0,0,0,280,277,1,0,0,0,280,278,1,0,0,0,280,279,
		1,0,0,0,281,25,1,0,0,0,282,286,5,19,0,0,283,285,5,2,0,0,284,283,1,0,0,
		0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,
		286,1,0,0,0,289,293,5,45,0,0,290,292,5,2,0,0,291,290,1,0,0,0,292,295,1,
		0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,
		296,300,5,53,0,0,297,299,5,2,0,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,
		1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,304,5,46,0,
		0,304,27,1,0,0,0,305,309,5,20,0,0,306,308,5,2,0,0,307,306,1,0,0,0,308,
		311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,1,
		0,0,0,312,316,5,45,0,0,313,315,5,2,0,0,314,313,1,0,0,0,315,318,1,0,0,0,
		316,314,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,323,
		5,53,0,0,320,322,5,2,0,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,
		0,323,324,1,0,0,0,324,326,1,0,0,0,325,323,1,0,0,0,326,327,5,46,0,0,327,
		29,1,0,0,0,328,332,5,21,0,0,329,331,5,2,0,0,330,329,1,0,0,0,331,334,1,
		0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,
		335,339,5,45,0,0,336,338,5,2,0,0,337,336,1,0,0,0,338,341,1,0,0,0,339,337,
		1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,339,1,0,0,0,342,346,5,53,0,
		0,343,345,5,2,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,
		347,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,350,5,46,0,0,350,351,3,
		10,5,0,351,352,5,23,0,0,352,31,1,0,0,0,353,357,5,22,0,0,354,356,5,2,0,
		0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,
		360,1,0,0,0,359,357,1,0,0,0,360,364,5,45,0,0,361,363,5,2,0,0,362,361,1,
		0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,
		366,364,1,0,0,0,367,371,5,53,0,0,368,370,5,2,0,0,369,368,1,0,0,0,370,373,
		1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,1,0,0,
		0,374,375,5,46,0,0,375,376,3,10,5,0,376,377,5,23,0,0,377,33,1,0,0,0,378,
		382,5,11,0,0,379,381,5,2,0,0,380,379,1,0,0,0,381,384,1,0,0,0,382,380,1,
		0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,1,0,0,0,385,386,5,45,0,0,
		386,387,3,58,29,0,387,388,5,46,0,0,388,391,3,10,5,0,389,390,5,12,0,0,390,
		392,3,10,5,0,391,389,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,397,5,
		9,0,0,394,396,5,2,0,0,395,394,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,
		397,398,1,0,0,0,398,400,1,0,0,0,399,397,1,0,0,0,400,401,5,11,0,0,401,35,
		1,0,0,0,402,406,5,13,0,0,403,405,5,2,0,0,404,403,1,0,0,0,405,408,1,0,0,
		0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,409,
		410,5,45,0,0,410,414,3,58,29,0,411,413,5,2,0,0,412,411,1,0,0,0,413,416,
		1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,
		0,417,421,5,46,0,0,418,420,5,2,0,0,419,418,1,0,0,0,420,423,1,0,0,0,421,
		419,1,0,0,0,421,422,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,424,426,5,
		1,0,0,425,424,1,0,0,0,426,427,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,
		428,430,1,0,0,0,429,431,3,38,19,0,430,429,1,0,0,0,431,432,1,0,0,0,432,
		430,1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,438,5,9,0,0,435,437,5,
		2,0,0,436,435,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,
		439,441,1,0,0,0,440,438,1,0,0,0,441,442,5,13,0,0,442,37,1,0,0,0,443,447,
		5,14,0,0,444,446,5,2,0,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,
		0,447,448,1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,459,3,58,29,0,451,
		455,5,15,0,0,452,454,5,2,0,0,453,452,1,0,0,0,454,457,1,0,0,0,455,453,1,
		0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,455,1,0,0,0,458,460,3,58,29,
		0,459,451,1,0,0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,465,3,10,5,0,462,
		464,5,2,0,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,
		0,0,0,466,39,1,0,0,0,467,465,1,0,0,0,468,472,5,16,0,0,469,471,5,2,0,0,
		470,469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,475,
		1,0,0,0,474,472,1,0,0,0,475,476,5,45,0,0,476,477,3,58,29,0,477,478,5,46,
		0,0,478,479,3,10,5,0,479,483,5,9,0,0,480,482,5,2,0,0,481,480,1,0,0,0,482,
		485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,
		0,0,0,486,487,5,16,0,0,487,41,1,0,0,0,488,492,5,18,0,0,489,491,5,2,0,0,
		490,489,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,43,
		1,0,0,0,494,492,1,0,0,0,495,499,5,17,0,0,496,498,5,2,0,0,497,496,1,0,0,
		0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,
		499,1,0,0,0,502,503,5,53,0,0,503,45,1,0,0,0,504,507,3,52,26,0,505,507,
		3,58,29,0,506,504,1,0,0,0,506,505,1,0,0,0,507,47,1,0,0,0,508,509,5,2,0,
		0,509,517,3,48,24,0,510,517,5,53,0,0,511,517,7,0,0,0,512,513,5,45,0,0,
		513,514,3,58,29,0,514,515,5,46,0,0,515,517,1,0,0,0,516,508,1,0,0,0,516,
		510,1,0,0,0,516,511,1,0,0,0,516,512,1,0,0,0,517,49,1,0,0,0,518,519,6,25,
		-1,0,519,520,3,48,24,0,520,558,1,0,0,0,521,525,10,2,0,0,522,524,5,2,0,
		0,523,522,1,0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,
		528,1,0,0,0,527,525,1,0,0,0,528,530,5,45,0,0,529,531,3,60,30,0,530,529,
		1,0,0,0,530,531,1,0,0,0,531,535,1,0,0,0,532,534,5,2,0,0,533,532,1,0,0,
		0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,
		535,1,0,0,0,538,557,5,46,0,0,539,543,10,1,0,0,540,542,5,2,0,0,541,540,
		1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,
		0,545,543,1,0,0,0,546,547,5,47,0,0,547,551,3,58,29,0,548,550,5,2,0,0,549,
		548,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,554,1,
		0,0,0,553,551,1,0,0,0,554,555,5,48,0,0,555,557,1,0,0,0,556,521,1,0,0,0,
		556,539,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,51,
		1,0,0,0,560,558,1,0,0,0,561,562,3,50,25,0,562,563,3,56,28,0,563,564,3,
		58,29,0,564,53,1,0,0,0,565,566,6,27,-1,0,566,567,3,52,26,0,567,573,1,0,
		0,0,568,569,10,1,0,0,569,570,5,49,0,0,570,572,3,52,26,0,571,568,1,0,0,
		0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,55,1,0,0,0,575,573,
		1,0,0,0,576,577,5,34,0,0,577,57,1,0,0,0,578,579,3,62,31,0,579,59,1,0,0,
		0,580,581,6,30,-1,0,581,582,3,58,29,0,582,588,1,0,0,0,583,584,10,1,0,0,
		584,585,5,49,0,0,585,587,3,58,29,0,586,583,1,0,0,0,587,590,1,0,0,0,588,
		586,1,0,0,0,588,589,1,0,0,0,589,61,1,0,0,0,590,588,1,0,0,0,591,592,6,31,
		-1,0,592,593,3,64,32,0,593,599,1,0,0,0,594,595,10,1,0,0,595,596,5,44,0,
		0,596,598,3,64,32,0,597,594,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,
		600,1,0,0,0,600,63,1,0,0,0,601,599,1,0,0,0,602,603,6,32,-1,0,603,604,3,
		66,33,0,604,610,1,0,0,0,605,606,10,1,0,0,606,607,5,32,0,0,607,609,3,66,
		33,0,608,605,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,
		65,1,0,0,0,612,610,1,0,0,0,613,614,6,33,-1,0,614,615,3,68,34,0,615,621,
		1,0,0,0,616,617,10,1,0,0,617,618,5,31,0,0,618,620,3,68,34,0,619,616,1,
		0,0,0,620,623,1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,67,1,0,0,0,623,
		621,1,0,0,0,624,625,6,34,-1,0,625,626,3,70,35,0,626,632,1,0,0,0,627,628,
		10,1,0,0,628,629,5,33,0,0,629,631,3,70,35,0,630,627,1,0,0,0,631,634,1,
		0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,69,1,0,0,0,634,632,1,0,0,0,635,
		636,6,35,-1,0,636,637,3,72,36,0,637,643,1,0,0,0,638,639,10,1,0,0,639,640,
		5,41,0,0,640,642,3,72,36,0,641,638,1,0,0,0,642,645,1,0,0,0,643,641,1,0,
		0,0,643,644,1,0,0,0,644,71,1,0,0,0,645,643,1,0,0,0,646,647,6,36,-1,0,647,
		648,3,74,37,0,648,654,1,0,0,0,649,650,10,1,0,0,650,651,5,40,0,0,651,653,
		3,74,37,0,652,649,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,0,
		0,0,655,73,1,0,0,0,656,654,1,0,0,0,657,658,6,37,-1,0,658,659,3,76,38,0,
		659,665,1,0,0,0,660,661,10,1,0,0,661,662,5,43,0,0,662,664,3,76,38,0,663,
		660,1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,75,1,0,
		0,0,667,665,1,0,0,0,668,669,6,38,-1,0,669,670,3,78,39,0,670,679,1,0,0,
		0,671,672,10,2,0,0,672,673,5,28,0,0,673,678,3,78,39,0,674,675,10,1,0,0,
		675,676,5,29,0,0,676,678,3,78,39,0,677,671,1,0,0,0,677,674,1,0,0,0,678,
		681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,77,1,0,0,0,681,679,1,0,
		0,0,682,683,6,39,-1,0,683,684,3,80,40,0,684,699,1,0,0,0,685,686,10,4,0,
		0,686,687,5,25,0,0,687,698,3,80,40,0,688,689,10,3,0,0,689,690,5,24,0,0,
		690,698,3,80,40,0,691,692,10,2,0,0,692,693,5,27,0,0,693,698,3,80,40,0,
		694,695,10,1,0,0,695,696,5,26,0,0,696,698,3,80,40,0,697,685,1,0,0,0,697,
		688,1,0,0,0,697,691,1,0,0,0,697,694,1,0,0,0,698,701,1,0,0,0,699,697,1,
		0,0,0,699,700,1,0,0,0,700,79,1,0,0,0,701,699,1,0,0,0,702,703,6,40,-1,0,
		703,704,3,82,41,0,704,713,1,0,0,0,705,706,10,2,0,0,706,707,5,35,0,0,707,
		712,3,82,41,0,708,709,10,1,0,0,709,710,5,36,0,0,710,712,3,82,41,0,711,
		705,1,0,0,0,711,708,1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,
		0,0,0,714,81,1,0,0,0,715,713,1,0,0,0,716,717,6,41,-1,0,717,718,3,84,42,
		0,718,730,1,0,0,0,719,720,10,3,0,0,720,721,5,37,0,0,721,729,3,84,42,0,
		722,723,10,2,0,0,723,724,5,38,0,0,724,729,3,84,42,0,725,726,10,1,0,0,726,
		727,5,39,0,0,727,729,3,84,42,0,728,719,1,0,0,0,728,722,1,0,0,0,728,725,
		1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,83,1,0,0,0,
		732,730,1,0,0,0,733,741,3,50,25,0,734,735,5,36,0,0,735,741,3,84,42,0,736,
		737,5,42,0,0,737,741,3,84,42,0,738,739,5,30,0,0,739,741,3,84,42,0,740,
		733,1,0,0,0,740,734,1,0,0,0,740,736,1,0,0,0,740,738,1,0,0,0,741,85,1,0,
		0,0,85,90,92,98,104,111,118,125,130,138,151,158,164,172,180,187,193,199,
		204,208,213,219,224,231,238,245,252,257,274,280,286,293,300,309,316,323,
		332,339,346,357,364,371,382,391,397,406,414,421,427,432,438,447,455,459,
		465,472,483,492,499,506,516,525,530,535,543,551,556,558,573,588,599,610,
		621,632,643,654,665,677,679,697,699,711,713,728,730,740
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KSPCompiler.Infrastructures.Parser.Antlr
