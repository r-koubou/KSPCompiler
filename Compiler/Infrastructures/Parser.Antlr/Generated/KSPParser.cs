//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KSPParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KSPCompiler.Infrastructures.Parser.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KSPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, MULTI_LINE_DELIMITER=2, Whitespace=3, BlockComment=4, DECLARE=5, 
		ON=6, END=7, FUNCTION=8, IF=9, ELSE=10, SELECT=11, CASE=12, TO=13, WHILE=14, 
		CALL=15, EXIT=16, CONTINUE=17, PREPROCESSOR_SET_COND=18, PREPROCESSOR_RESET_COND=19, 
		PREPROCESSOR_CODE_IF=20, PREPROCESSOR_CODE_IF_NOT=21, PREPROCESSOR_CODE_END_IF=22, 
		BOOL_GT=23, BOOL_LT=24, BOOL_GE=25, BOOL_LE=26, BOOL_EQ=27, BOOL_NE=28, 
		BOOL_NOT=29, BOOL_AND=30, BOOL_OR=31, BOOL_XOR=32, ASSIGN=33, PLUS=34, 
		MINUS=35, MUL=36, DIV=37, MOD=38, BIT_AND=39, BIT_OR=40, BIT_NOT=41, BIT_XOR=42, 
		STRING_ADD=43, LPARENT=44, RPARENT=45, LBRACKET=46, RBRACKET=47, COMMA=48, 
		INTEGER_LITERAL=49, REAL_LITERAL=50, STRING_LITERAL=51, IDENTIFIER=52;
	public const int
		RULE_compilationUnit = 0, RULE_declarationModifier = 1, RULE_callbackDeclaration = 2, 
		RULE_argumentDefinitionList = 3, RULE_userFunctionDeclaration = 4, RULE_block = 5, 
		RULE_variableDeclaration = 6, RULE_variableInitializer = 7, RULE_primitiveInitializer = 8, 
		RULE_arrayInitializer = 9, RULE_uiInitializer = 10, RULE_statement = 11, 
		RULE_preprocessor = 12, RULE_preprocessorDefine = 13, RULE_preprocessorUndefine = 14, 
		RULE_preprocessorIfdefine = 15, RULE_preprocessorIfnotDefine = 16, RULE_ifStatement = 17, 
		RULE_selectStatement = 18, RULE_caseBlock = 19, RULE_whileStatement = 20, 
		RULE_continueStatement = 21, RULE_callUserFunction = 22, RULE_exitStatement = 23, 
		RULE_expressionStatement = 24, RULE_primaryExpression = 25, RULE_postfixExpression = 26, 
		RULE_assignmentExpression = 27, RULE_assignmentExpressionList = 28, RULE_assignmentOperator = 29, 
		RULE_expression = 30, RULE_expressionList = 31, RULE_stringConcatenateExpression = 32, 
		RULE_logicalOrExpression = 33, RULE_logicalAndExpression = 34, RULE_logicalXorExpression = 35, 
		RULE_bitwiseOrExpression = 36, RULE_bitwiseAndExpression = 37, RULE_bitwiseXorExpression = 38, 
		RULE_equalityExpression = 39, RULE_relationalExpression = 40, RULE_additiveExpression = 41, 
		RULE_multiplicativeExpression = 42, RULE_unaryExpression = 43;
	public static readonly string[] ruleNames = {
		"compilationUnit", "declarationModifier", "callbackDeclaration", "argumentDefinitionList", 
		"userFunctionDeclaration", "block", "variableDeclaration", "variableInitializer", 
		"primitiveInitializer", "arrayInitializer", "uiInitializer", "statement", 
		"preprocessor", "preprocessorDefine", "preprocessorUndefine", "preprocessorIfdefine", 
		"preprocessorIfnotDefine", "ifStatement", "selectStatement", "caseBlock", 
		"whileStatement", "continueStatement", "callUserFunction", "exitStatement", 
		"expressionStatement", "primaryExpression", "postfixExpression", "assignmentExpression", 
		"assignmentExpressionList", "assignmentOperator", "expression", "expressionList", 
		"stringConcatenateExpression", "logicalOrExpression", "logicalAndExpression", 
		"logicalXorExpression", "bitwiseOrExpression", "bitwiseAndExpression", 
		"bitwiseXorExpression", "equalityExpression", "relationalExpression", 
		"additiveExpression", "multiplicativeExpression", "unaryExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'declare'", "'on'", "'end'", "'function'", 
		"'if'", "'else'", "'select'", "'case'", "'to'", "'while'", "'call'", "'exit'", 
		"'continue'", "'SET_CONDITION'", "'RESET_CONDITION'", "'USE_CODE_IF'", 
		"'USE_CODE_IF_NOT'", "'END_USE_CODE'", "'>'", "'<'", "'>='", "'<='", "'='", 
		"'#'", "'not'", "'and'", "'or'", "'xor'", "':='", "'+'", "'-'", "'*'", 
		"'/'", "'mod'", "'.and.'", "'.or.'", "'.not.'", "'.xor.'", "'&'", "'('", 
		"')'", "'['", "']'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "MULTI_LINE_DELIMITER", "Whitespace", "BlockComment", "DECLARE", 
		"ON", "END", "FUNCTION", "IF", "ELSE", "SELECT", "CASE", "TO", "WHILE", 
		"CALL", "EXIT", "CONTINUE", "PREPROCESSOR_SET_COND", "PREPROCESSOR_RESET_COND", 
		"PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", "PREPROCESSOR_CODE_END_IF", 
		"BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", "BOOL_EQ", "BOOL_NE", "BOOL_NOT", 
		"BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
		"MOD", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_XOR", "STRING_ADD", "LPARENT", 
		"RPARENT", "LBRACKET", "RBRACKET", "COMMA", "INTEGER_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KSPParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KSPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KSPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KSPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KSPParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallbackDeclarationContext[] callbackDeclaration() {
			return GetRuleContexts<CallbackDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallbackDeclarationContext callbackDeclaration(int i) {
			return GetRuleContext<CallbackDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionDeclarationContext[] userFunctionDeclaration() {
			return GetRuleContexts<UserFunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionDeclarationContext userFunctionDeclaration(int i) {
			return GetRuleContext<UserFunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KSPParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KSPParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 326L) != 0)) {
				{
				State = 92;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 88;
					callbackDeclaration();
					}
					break;
				case FUNCTION:
					{
					State = 89;
					userFunctionDeclaration();
					}
					break;
				case EOL:
					{
					State = 90;
					Match(EOL);
					}
					break;
				case MULTI_LINE_DELIMITER:
					{
					State = 91;
					Match(MULTI_LINE_DELIMITER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		public DeclarationModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterDeclarationModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitDeclarationModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationModifierContext declarationModifier() {
		DeclarationModifierContext _localctx = new DeclarationModifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_declarationModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallbackDeclarationContext : ParserRuleContext {
		public IToken name;
		public ArgumentDefinitionListContext arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(KSPParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(KSPParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDefinitionListContext argumentDefinitionList() {
			return GetRuleContext<ArgumentDefinitionListContext>(0);
		}
		public CallbackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callbackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCallbackDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCallbackDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallbackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallbackDeclarationContext callbackDeclaration() {
		CallbackDeclarationContext _localctx = new CallbackDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_callbackDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(ON);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 102;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			_localctx.name = Match(IDENTIFIER);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 109;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPARENT) {
				{
				State = 115;
				Match(LPARENT);
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 116;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 122;
				_localctx.arguments = argumentDefinitionList(0);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 123;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 129;
				Match(RPARENT);
				}
			}

			State = 133;
			Match(EOL);
			State = 134;
			block();
			State = 135;
			Match(END);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 136;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDefinitionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDefinitionListContext argumentDefinitionList() {
			return GetRuleContext<ArgumentDefinitionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public ArgumentDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDefinitionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterArgumentDefinitionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitArgumentDefinitionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDefinitionListContext argumentDefinitionList() {
		return argumentDefinitionList(0);
	}

	private ArgumentDefinitionListContext argumentDefinitionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentDefinitionListContext _localctx = new ArgumentDefinitionListContext(Context, _parentState);
		ArgumentDefinitionListContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_argumentDefinitionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 145;
			Match(IDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentDefinitionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentDefinitionList);
					State = 147;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 148;
					Match(COMMA);
					State = 149;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserFunctionDeclarationContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(KSPParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(KSPParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public UserFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUserFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUserFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserFunctionDeclarationContext userFunctionDeclaration() {
		UserFunctionDeclarationContext _localctx = new UserFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_userFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(FUNCTION);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 156;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162;
			_localctx.name = Match(IDENTIFIER);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPARENT) {
				{
				State = 163;
				Match(LPARENT);
				State = 164;
				Match(RPARENT);
				}
			}

			State = 167;
			Match(EOL);
			State = 168;
			block();
			State = 169;
			Match(END);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 170;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					statement();
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public DeclarationModifierContext modifier;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(KSPParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationModifierContext[] declarationModifier() {
			return GetRuleContexts<DeclarationModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationModifierContext declarationModifier(int i) {
			return GetRuleContext<DeclarationModifierContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(DECLARE);
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 185;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 191;
					_localctx.modifier = declarationModifier();
					}
					} 
				}
				State = 196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 197;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			_localctx.name = Match(IDENTIFIER);
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 204;
				variableInitializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveInitializerContext primitiveInitializer() {
			return GetRuleContext<PrimitiveInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableInitializer);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				arrayInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				primitiveInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KSPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UiInitializerContext uiInitializer() {
			return GetRuleContext<UiInitializerContext>(0);
		}
		public PrimitiveInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveInitializerContext primitiveInitializer() {
		PrimitiveInitializerContext _localctx = new PrimitiveInitializerContext(Context, State);
		EnterRule(_localctx, 16, RULE_primitiveInitializer);
		int _la;
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 211;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 217;
				Match(ASSIGN);
				State = 218;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				uiInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KSPParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KSPParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 18, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 222;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 228;
			Match(LBRACKET);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 229;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 235;
			expression();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 236;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 242;
			Match(RBRACKET);
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 243;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 249;
				Match(LPARENT);
				State = 250;
				expressionList(0);
				State = 251;
				Match(RPARENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UiInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public UiInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uiInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUiInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUiInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUiInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UiInitializerContext uiInitializer() {
		UiInitializerContext _localctx = new UiInitializerContext(Context, State);
		EnterRule(_localctx, 20, RULE_uiInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 255;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261;
			Match(LPARENT);
			State = 262;
			expressionList(0);
			State = 263;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER() { return GetToken(KSPParser.MULTI_LINE_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorContext preprocessor() {
			return GetRuleContext<PreprocessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallUserFunctionContext callUserFunction() {
			return GetRuleContext<CallUserFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				Match(MULTI_LINE_DELIMITER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				Match(EOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 268;
				preprocessor();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 269;
				ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 270;
				selectStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 271;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 272;
				continueStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 273;
				callUserFunction();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 274;
				exitStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 275;
				expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDefineContext preprocessorDefine() {
			return GetRuleContext<PreprocessorDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorUndefineContext preprocessorUndefine() {
			return GetRuleContext<PreprocessorUndefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorIfdefineContext preprocessorIfdefine() {
			return GetRuleContext<PreprocessorIfdefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorIfnotDefineContext preprocessorIfnotDefine() {
			return GetRuleContext<PreprocessorIfnotDefineContext>(0);
		}
		public PreprocessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorContext preprocessor() {
		PreprocessorContext _localctx = new PreprocessorContext(Context, State);
		EnterRule(_localctx, 24, RULE_preprocessor);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPROCESSOR_SET_COND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				preprocessorDefine();
				}
				break;
			case PREPROCESSOR_RESET_COND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279;
				preprocessorUndefine();
				}
				break;
			case PREPROCESSOR_CODE_IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 280;
				preprocessorIfdefine();
				}
				break;
			case PREPROCESSOR_CODE_IF_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 281;
				preprocessorIfnotDefine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_SET_COND() { return GetToken(KSPParser.PREPROCESSOR_SET_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDefineContext preprocessorDefine() {
		PreprocessorDefineContext _localctx = new PreprocessorDefineContext(Context, State);
		EnterRule(_localctx, 26, RULE_preprocessorDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(PREPROCESSOR_SET_COND);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 285;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 291;
			Match(LPARENT);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 292;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			_localctx.symbol = Match(IDENTIFIER);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 299;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 305;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorUndefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_RESET_COND() { return GetToken(KSPParser.PREPROCESSOR_RESET_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorUndefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorUndefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorUndefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorUndefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorUndefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorUndefineContext preprocessorUndefine() {
		PreprocessorUndefineContext _localctx = new PreprocessorUndefineContext(Context, State);
		EnterRule(_localctx, 28, RULE_preprocessorUndefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(PREPROCESSOR_RESET_COND);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 308;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 314;
			Match(LPARENT);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 315;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 321;
			_localctx.symbol = Match(IDENTIFIER);
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 322;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 328;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorIfdefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_END_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorIfdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorIfdefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorIfdefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorIfdefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIfdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorIfdefineContext preprocessorIfdefine() {
		PreprocessorIfdefineContext _localctx = new PreprocessorIfdefineContext(Context, State);
		EnterRule(_localctx, 30, RULE_preprocessorIfdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(PREPROCESSOR_CODE_IF);
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 331;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 337;
			Match(LPARENT);
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 338;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 344;
			_localctx.symbol = Match(IDENTIFIER);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 345;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 351;
			Match(RPARENT);
			State = 352;
			block();
			State = 353;
			Match(PREPROCESSOR_CODE_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorIfnotDefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_IF_NOT() { return GetToken(KSPParser.PREPROCESSOR_CODE_IF_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_END_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorIfnotDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorIfnotDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorIfnotDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorIfnotDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIfnotDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorIfnotDefineContext preprocessorIfnotDefine() {
		PreprocessorIfnotDefineContext _localctx = new PreprocessorIfnotDefineContext(Context, State);
		EnterRule(_localctx, 32, RULE_preprocessorIfnotDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(PREPROCESSOR_CODE_IF_NOT);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 356;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 362;
			Match(LPARENT);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 363;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 369;
			_localctx.symbol = Match(IDENTIFIER);
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 370;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 376;
			Match(RPARENT);
			State = 377;
			block();
			State = 378;
			Match(PREPROCESSOR_CODE_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public BlockContext ifBlock;
		public BlockContext elseBlock;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(KSPParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(KSPParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KSPParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(IF);
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 381;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 387;
			Match(LPARENT);
			State = 388;
			expression();
			State = 389;
			Match(RPARENT);
			State = 390;
			_localctx.ifBlock = block();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 391;
				Match(ELSE);
				State = 392;
				_localctx.elseBlock = block();
				}
			}

			State = 395;
			Match(END);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 396;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 402;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SELECT() { return GetTokens(KSPParser.SELECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT(int i) {
			return GetToken(KSPParser.SELECT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KSPParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KSPParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(SELECT);
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 405;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 411;
			Match(LPARENT);
			State = 412;
			expression();
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 413;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 419;
			Match(RPARENT);
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 420;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 426;
				Match(EOL);
				}
				}
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 431;
				caseBlock();
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 436;
			Match(END);
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 437;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 443;
			Match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext condFrom;
		public ExpressionContext condTo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(KSPParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(KSPParser.TO, 0); }
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_caseBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(CASE);
			State = 449;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 446;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 452;
			_localctx.condFrom = expression();
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 453;
				Match(TO);
				State = 457;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 454;
						Match(MULTI_LINE_DELIMITER);
						}
						} 
					}
					State = 459;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				}
				State = 460;
				_localctx.condTo = expression();
				}
			}

			State = 463;
			block();
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 464;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(KSPParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(KSPParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			Match(WHILE);
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 471;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 477;
			Match(LPARENT);
			State = 478;
			expression();
			State = 479;
			Match(RPARENT);
			State = 480;
			block();
			State = 481;
			Match(END);
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 482;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 488;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(KSPParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_continueStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(CONTINUE);
			State = 494;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 491;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallUserFunctionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(KSPParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public CallUserFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callUserFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCallUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCallUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallUserFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallUserFunctionContext callUserFunction() {
		CallUserFunctionContext _localctx = new CallUserFunctionContext(Context, State);
		EnterRule(_localctx, 44, RULE_callUserFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(CALL);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 498;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 504;
			_localctx.name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(KSPParser.EXIT, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public PrimaryExpressionContext callExpr;
		public ExpressionListContext callArgs;
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_expressionStatement);
		int _la;
		try {
			State = 522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509;
				_localctx.callExpr = primaryExpression();
				State = 510;
				Match(LPARENT);
				State = 512;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 511;
					_localctx.callArgs = expressionList(0);
					}
					break;
				}
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 514;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 520;
				Match(RPARENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER() { return GetToken(KSPParser.MULTI_LINE_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(KSPParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(KSPParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(KSPParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_primaryExpression);
		int _la;
		try {
			State = 532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MULTI_LINE_DELIMITER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 524;
				Match(MULTI_LINE_DELIMITER);
				State = 525;
				primaryExpression();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526;
				Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 527;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3940649673949184L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LPARENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 528;
				Match(LPARENT);
				State = 529;
				expression();
				State = 530;
				Match(RPARENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PostfixExpressionContext callExpr;
		public PostfixExpressionContext arrayExpr;
		public PrimaryExpressionContext expr;
		public ExpressionListContext callArgs;
		public ExpressionContext arrayIndexExpr;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KSPParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KSPParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 535;
			_localctx.expr = primaryExpression();
			State = 539;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 536;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 541;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 579;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 577;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						_localctx.callExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 542;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 546;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 543;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 548;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 549;
						Match(LPARENT);
						State = 551;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
						case 1:
							{
							State = 550;
							_localctx.callArgs = expressionList(0);
							}
							break;
						}
						State = 556;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 553;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 558;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 559;
						Match(RPARENT);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						_localctx.arrayExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 560;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 564;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 561;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 566;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 567;
						Match(LBRACKET);
						State = 568;
						_localctx.arrayIndexExpr = expression();
						State = 572;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 569;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 574;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 575;
						Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 581;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			postfixExpression(0);
			State = 583;
			assignmentOperator();
			State = 584;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionListContext assignmentExpressionList() {
			return GetRuleContext<AssignmentExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public AssignmentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionListContext assignmentExpressionList() {
		return assignmentExpressionList(0);
	}

	private AssignmentExpressionListContext assignmentExpressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AssignmentExpressionListContext _localctx = new AssignmentExpressionListContext(Context, _parentState);
		AssignmentExpressionListContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_assignmentExpressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 587;
			assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 594;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssignmentExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assignmentExpressionList);
					State = 589;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 590;
					Match(COMMA);
					State = 591;
					assignmentExpression();
					}
					} 
				}
				State = 596;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public IToken opr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KSPParser.ASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_assignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			_localctx.opr = Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringConcatenateExpressionContext stringConcatenateExpression() {
			return GetRuleContext<StringConcatenateExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			stringConcatenateExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		return expressionList(0);
	}

	private ExpressionListContext expressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionListContext _localctx = new ExpressionListContext(Context, _parentState);
		ExpressionListContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 602;
			expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 609;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expressionList);
					State = 604;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 605;
					Match(COMMA);
					State = 606;
					expression();
					}
					} 
				}
				State = 611;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringConcatenateExpressionContext : ParserRuleContext {
		public StringConcatenateExpressionContext left;
		public LogicalOrExpressionContext nested;
		public LogicalOrExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_ADD() { return GetToken(KSPParser.STRING_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringConcatenateExpressionContext stringConcatenateExpression() {
			return GetRuleContext<StringConcatenateExpressionContext>(0);
		}
		public StringConcatenateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConcatenateExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterStringConcatenateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitStringConcatenateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConcatenateExpressionContext stringConcatenateExpression() {
		return stringConcatenateExpression(0);
	}

	private StringConcatenateExpressionContext stringConcatenateExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StringConcatenateExpressionContext _localctx = new StringConcatenateExpressionContext(Context, _parentState);
		StringConcatenateExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_stringConcatenateExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 613;
			_localctx.nested = logicalOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 620;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StringConcatenateExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_stringConcatenateExpression);
					State = 615;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 616;
					Match(STRING_ADD);
					State = 617;
					_localctx.right = logicalOrExpression(0);
					}
					} 
				}
				State = 622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext left;
		public LogicalAndExpressionContext nested;
		public LogicalAndExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OR() { return GetToken(KSPParser.BOOL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		return logicalOrExpression(0);
	}

	private LogicalOrExpressionContext logicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 624;
			_localctx.nested = logicalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 631;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
					State = 626;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 627;
					Match(BOOL_OR);
					State = 628;
					_localctx.right = logicalAndExpression(0);
					}
					} 
				}
				State = 633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext left;
		public LogicalXorExpressionContext nested;
		public LogicalXorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalXorExpressionContext logicalXorExpression() {
			return GetRuleContext<LogicalXorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_AND() { return GetToken(KSPParser.BOOL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		return logicalAndExpression(0);
	}

	private LogicalAndExpressionContext logicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 635;
			_localctx.nested = logicalXorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 642;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
					State = 637;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 638;
					Match(BOOL_AND);
					State = 639;
					_localctx.right = logicalXorExpression(0);
					}
					} 
				}
				State = 644;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalXorExpressionContext : ParserRuleContext {
		public LogicalXorExpressionContext left;
		public BitwiseOrExpressionContext nested;
		public BitwiseOrExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext bitwiseOrExpression() {
			return GetRuleContext<BitwiseOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_XOR() { return GetToken(KSPParser.BOOL_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalXorExpressionContext logicalXorExpression() {
			return GetRuleContext<LogicalXorExpressionContext>(0);
		}
		public LogicalXorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalXorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalXorExpressionContext logicalXorExpression() {
		return logicalXorExpression(0);
	}

	private LogicalXorExpressionContext logicalXorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalXorExpressionContext _localctx = new LogicalXorExpressionContext(Context, _parentState);
		LogicalXorExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_logicalXorExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 646;
			_localctx.nested = bitwiseOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 653;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalXorExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalXorExpression);
					State = 648;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 649;
					Match(BOOL_XOR);
					State = 650;
					_localctx.right = bitwiseOrExpression(0);
					}
					} 
				}
				State = 655;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseOrExpressionContext : ParserRuleContext {
		public BitwiseOrExpressionContext left;
		public BitwiseAndExpressionContext nested;
		public BitwiseAndExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndExpressionContext bitwiseAndExpression() {
			return GetRuleContext<BitwiseAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(KSPParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext bitwiseOrExpression() {
			return GetRuleContext<BitwiseOrExpressionContext>(0);
		}
		public BitwiseOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrExpressionContext bitwiseOrExpression() {
		return bitwiseOrExpression(0);
	}

	private BitwiseOrExpressionContext bitwiseOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseOrExpressionContext _localctx = new BitwiseOrExpressionContext(Context, _parentState);
		BitwiseOrExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_bitwiseOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 657;
			_localctx.nested = bitwiseAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 664;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseOrExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseOrExpression);
					State = 659;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 660;
					Match(BIT_OR);
					State = 661;
					_localctx.right = bitwiseAndExpression(0);
					}
					} 
				}
				State = 666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseAndExpressionContext : ParserRuleContext {
		public BitwiseAndExpressionContext left;
		public BitwiseXorExpressionContext nested;
		public BitwiseXorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXorExpressionContext bitwiseXorExpression() {
			return GetRuleContext<BitwiseXorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(KSPParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndExpressionContext bitwiseAndExpression() {
			return GetRuleContext<BitwiseAndExpressionContext>(0);
		}
		public BitwiseAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndExpressionContext bitwiseAndExpression() {
		return bitwiseAndExpression(0);
	}

	private BitwiseAndExpressionContext bitwiseAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseAndExpressionContext _localctx = new BitwiseAndExpressionContext(Context, _parentState);
		BitwiseAndExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_bitwiseAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 668;
			_localctx.nested = bitwiseXorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 675;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseAndExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseAndExpression);
					State = 670;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 671;
					Match(BIT_AND);
					State = 672;
					_localctx.right = bitwiseXorExpression(0);
					}
					} 
				}
				State = 677;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseXorExpressionContext : ParserRuleContext {
		public BitwiseXorExpressionContext left;
		public EqualityExpressionContext nested;
		public EqualityExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(KSPParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXorExpressionContext bitwiseXorExpression() {
			return GetRuleContext<BitwiseXorExpressionContext>(0);
		}
		public BitwiseXorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseXorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseXorExpressionContext bitwiseXorExpression() {
		return bitwiseXorExpression(0);
	}

	private BitwiseXorExpressionContext bitwiseXorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseXorExpressionContext _localctx = new BitwiseXorExpressionContext(Context, _parentState);
		BitwiseXorExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_bitwiseXorExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 679;
			_localctx.nested = equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 686;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseXorExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseXorExpression);
					State = 681;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 682;
					Match(BIT_XOR);
					State = 683;
					_localctx.right = equalityExpression(0);
					}
					} 
				}
				State = 688;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public EqualityExpressionContext left;
		public RelationalExpressionContext nested;
		public IToken opr;
		public RelationalExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_EQ() { return GetToken(KSPParser.BOOL_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NE() { return GetToken(KSPParser.BOOL_NE, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 690;
			_localctx.nested = relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 700;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 698;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 692;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 693;
						_localctx.opr = Match(BOOL_EQ);
						State = 694;
						_localctx.right = relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 695;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 696;
						_localctx.opr = Match(BOOL_NE);
						State = 697;
						_localctx.right = relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 702;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public RelationalExpressionContext left;
		public AdditiveExpressionContext nested;
		public IToken opr;
		public AdditiveExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LT() { return GetToken(KSPParser.BOOL_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_GT() { return GetToken(KSPParser.BOOL_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LE() { return GetToken(KSPParser.BOOL_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_GE() { return GetToken(KSPParser.BOOL_GE, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 704;
			_localctx.nested = additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 718;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 706;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 707;
						_localctx.opr = Match(BOOL_LT);
						State = 708;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 709;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 710;
						_localctx.opr = Match(BOOL_GT);
						State = 711;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 712;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 713;
						_localctx.opr = Match(BOOL_LE);
						State = 714;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 715;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 716;
						_localctx.opr = Match(BOOL_GE);
						State = 717;
						_localctx.right = additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext left;
		public MultiplicativeExpressionContext nested;
		public IToken opr;
		public MultiplicativeExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KSPParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KSPParser.MINUS, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 724;
			_localctx.nested = multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 734;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 732;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 726;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 727;
						_localctx.opr = Match(PLUS);
						State = 728;
						_localctx.right = multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 729;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 730;
						_localctx.opr = Match(MINUS);
						State = 731;
						_localctx.right = multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 736;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext left;
		public UnaryExpressionContext nested;
		public IToken opr;
		public UnaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(KSPParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KSPParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(KSPParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 738;
			_localctx.nested = unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 751;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 749;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 740;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 741;
						_localctx.opr = Match(MUL);
						State = 742;
						_localctx.right = unaryExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 743;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 744;
						_localctx.opr = Match(DIV);
						State = 745;
						_localctx.right = unaryExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 746;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 747;
						_localctx.opr = Match(MOD);
						State = 748;
						_localctx.right = unaryExpression();
						}
						break;
					}
					} 
				}
				State = 753;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PostfixExpressionContext nested;
		public IToken opr;
		public UnaryExpressionContext unaryMinus;
		public UnaryExpressionContext unaryNot;
		public UnaryExpressionContext logicalNot;
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KSPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(KSPParser.BIT_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NOT() { return GetToken(KSPParser.BOOL_NOT, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_unaryExpression);
		try {
			State = 761;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MULTI_LINE_DELIMITER:
			case LPARENT:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case STRING_LITERAL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 754;
				_localctx.nested = postfixExpression(0);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 755;
				_localctx.opr = Match(MINUS);
				State = 756;
				_localctx.unaryMinus = unaryExpression();
				}
				break;
			case BIT_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 757;
				_localctx.opr = Match(BIT_NOT);
				State = 758;
				_localctx.unaryNot = unaryExpression();
				}
				break;
			case BOOL_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 759;
				_localctx.opr = Match(BOOL_NOT);
				State = 760;
				_localctx.logicalNot = unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return argumentDefinitionList_sempred((ArgumentDefinitionListContext)_localctx, predIndex);
		case 26: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 28: return assignmentExpressionList_sempred((AssignmentExpressionListContext)_localctx, predIndex);
		case 31: return expressionList_sempred((ExpressionListContext)_localctx, predIndex);
		case 32: return stringConcatenateExpression_sempred((StringConcatenateExpressionContext)_localctx, predIndex);
		case 33: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		case 34: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 35: return logicalXorExpression_sempred((LogicalXorExpressionContext)_localctx, predIndex);
		case 36: return bitwiseOrExpression_sempred((BitwiseOrExpressionContext)_localctx, predIndex);
		case 37: return bitwiseAndExpression_sempred((BitwiseAndExpressionContext)_localctx, predIndex);
		case 38: return bitwiseXorExpression_sempred((BitwiseXorExpressionContext)_localctx, predIndex);
		case 39: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 40: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 41: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 42: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool argumentDefinitionList_sempred(ArgumentDefinitionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignmentExpressionList_sempred(AssignmentExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expressionList_sempred(ExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool stringConcatenateExpression_sempred(StringConcatenateExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalXorExpression_sempred(LogicalXorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseOrExpression_sempred(BitwiseOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseAndExpression_sempred(BitwiseAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseXorExpression_sempred(BitwiseXorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 4);
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 3);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,52,764,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,1,0,1,0,1,0,1,0,5,0,93,8,0,10,0,12,0,96,9,0,1,0,1,0,1,1,1,1,
		1,2,1,2,5,2,104,8,2,10,2,12,2,107,9,2,1,2,1,2,5,2,111,8,2,10,2,12,2,114,
		9,2,1,2,1,2,5,2,118,8,2,10,2,12,2,121,9,2,1,2,1,2,5,2,125,8,2,10,2,12,
		2,128,9,2,1,2,1,2,3,2,132,8,2,1,2,1,2,1,2,1,2,5,2,138,8,2,10,2,12,2,141,
		9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,151,8,3,10,3,12,3,154,9,3,1,4,
		1,4,5,4,158,8,4,10,4,12,4,161,9,4,1,4,1,4,1,4,3,4,166,8,4,1,4,1,4,1,4,
		1,4,5,4,172,8,4,10,4,12,4,175,9,4,1,4,1,4,1,5,5,5,180,8,5,10,5,12,5,183,
		9,5,1,6,1,6,5,6,187,8,6,10,6,12,6,190,9,6,1,6,5,6,193,8,6,10,6,12,6,196,
		9,6,1,6,5,6,199,8,6,10,6,12,6,202,9,6,1,6,1,6,3,6,206,8,6,1,7,1,7,3,7,
		210,8,7,1,8,5,8,213,8,8,10,8,12,8,216,9,8,1,8,1,8,1,8,3,8,221,8,8,1,9,
		5,9,224,8,9,10,9,12,9,227,9,9,1,9,1,9,5,9,231,8,9,10,9,12,9,234,9,9,1,
		9,1,9,5,9,238,8,9,10,9,12,9,241,9,9,1,9,1,9,5,9,245,8,9,10,9,12,9,248,
		9,9,1,9,1,9,1,9,1,9,3,9,254,8,9,1,10,5,10,257,8,10,10,10,12,10,260,9,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,3,11,277,8,11,1,12,1,12,1,12,1,12,3,12,283,8,12,1,13,1,13,5,13,287,
		8,13,10,13,12,13,290,9,13,1,13,1,13,5,13,294,8,13,10,13,12,13,297,9,13,
		1,13,1,13,5,13,301,8,13,10,13,12,13,304,9,13,1,13,1,13,1,14,1,14,5,14,
		310,8,14,10,14,12,14,313,9,14,1,14,1,14,5,14,317,8,14,10,14,12,14,320,
		9,14,1,14,1,14,5,14,324,8,14,10,14,12,14,327,9,14,1,14,1,14,1,15,1,15,
		5,15,333,8,15,10,15,12,15,336,9,15,1,15,1,15,5,15,340,8,15,10,15,12,15,
		343,9,15,1,15,1,15,5,15,347,8,15,10,15,12,15,350,9,15,1,15,1,15,1,15,1,
		15,1,16,1,16,5,16,358,8,16,10,16,12,16,361,9,16,1,16,1,16,5,16,365,8,16,
		10,16,12,16,368,9,16,1,16,1,16,5,16,372,8,16,10,16,12,16,375,9,16,1,16,
		1,16,1,16,1,16,1,17,1,17,5,17,383,8,17,10,17,12,17,386,9,17,1,17,1,17,
		1,17,1,17,1,17,1,17,3,17,394,8,17,1,17,1,17,5,17,398,8,17,10,17,12,17,
		401,9,17,1,17,1,17,1,18,1,18,5,18,407,8,18,10,18,12,18,410,9,18,1,18,1,
		18,1,18,5,18,415,8,18,10,18,12,18,418,9,18,1,18,1,18,5,18,422,8,18,10,
		18,12,18,425,9,18,1,18,4,18,428,8,18,11,18,12,18,429,1,18,4,18,433,8,18,
		11,18,12,18,434,1,18,1,18,5,18,439,8,18,10,18,12,18,442,9,18,1,18,1,18,
		1,19,1,19,5,19,448,8,19,10,19,12,19,451,9,19,1,19,1,19,1,19,5,19,456,8,
		19,10,19,12,19,459,9,19,1,19,3,19,462,8,19,1,19,1,19,5,19,466,8,19,10,
		19,12,19,469,9,19,1,20,1,20,5,20,473,8,20,10,20,12,20,476,9,20,1,20,1,
		20,1,20,1,20,1,20,1,20,5,20,484,8,20,10,20,12,20,487,9,20,1,20,1,20,1,
		21,1,21,5,21,493,8,21,10,21,12,21,496,9,21,1,22,1,22,5,22,500,8,22,10,
		22,12,22,503,9,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,513,8,24,
		1,24,5,24,516,8,24,10,24,12,24,519,9,24,1,24,1,24,3,24,523,8,24,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,533,8,25,1,26,1,26,1,26,5,26,538,
		8,26,10,26,12,26,541,9,26,1,26,1,26,5,26,545,8,26,10,26,12,26,548,9,26,
		1,26,1,26,3,26,552,8,26,1,26,5,26,555,8,26,10,26,12,26,558,9,26,1,26,1,
		26,1,26,5,26,563,8,26,10,26,12,26,566,9,26,1,26,1,26,1,26,5,26,571,8,26,
		10,26,12,26,574,9,26,1,26,1,26,5,26,578,8,26,10,26,12,26,581,9,26,1,27,
		1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,593,8,28,10,28,12,28,
		596,9,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,608,8,
		31,10,31,12,31,611,9,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,619,8,32,10,
		32,12,32,622,9,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,630,8,33,10,33,12,
		33,633,9,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,641,8,34,10,34,12,34,644,
		9,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,652,8,35,10,35,12,35,655,9,35,
		1,36,1,36,1,36,1,36,1,36,1,36,5,36,663,8,36,10,36,12,36,666,9,36,1,37,
		1,37,1,37,1,37,1,37,1,37,5,37,674,8,37,10,37,12,37,677,9,37,1,38,1,38,
		1,38,1,38,1,38,1,38,5,38,685,8,38,10,38,12,38,688,9,38,1,39,1,39,1,39,
		1,39,1,39,1,39,1,39,1,39,1,39,5,39,699,8,39,10,39,12,39,702,9,39,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
		5,40,719,8,40,10,40,12,40,722,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,5,41,733,8,41,10,41,12,41,736,9,41,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,750,8,42,10,42,12,42,753,9,42,
		1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,762,8,43,1,43,0,15,6,52,56,62,
		64,66,68,70,72,74,76,78,80,82,84,44,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,0,1,1,0,49,51,826,0,94,1,0,0,0,2,99,1,0,0,0,4,101,
		1,0,0,0,6,144,1,0,0,0,8,155,1,0,0,0,10,181,1,0,0,0,12,184,1,0,0,0,14,209,
		1,0,0,0,16,220,1,0,0,0,18,225,1,0,0,0,20,258,1,0,0,0,22,276,1,0,0,0,24,
		282,1,0,0,0,26,284,1,0,0,0,28,307,1,0,0,0,30,330,1,0,0,0,32,355,1,0,0,
		0,34,380,1,0,0,0,36,404,1,0,0,0,38,445,1,0,0,0,40,470,1,0,0,0,42,490,1,
		0,0,0,44,497,1,0,0,0,46,506,1,0,0,0,48,522,1,0,0,0,50,532,1,0,0,0,52,534,
		1,0,0,0,54,582,1,0,0,0,56,586,1,0,0,0,58,597,1,0,0,0,60,599,1,0,0,0,62,
		601,1,0,0,0,64,612,1,0,0,0,66,623,1,0,0,0,68,634,1,0,0,0,70,645,1,0,0,
		0,72,656,1,0,0,0,74,667,1,0,0,0,76,678,1,0,0,0,78,689,1,0,0,0,80,703,1,
		0,0,0,82,723,1,0,0,0,84,737,1,0,0,0,86,761,1,0,0,0,88,93,3,4,2,0,89,93,
		3,8,4,0,90,93,5,1,0,0,91,93,5,2,0,0,92,88,1,0,0,0,92,89,1,0,0,0,92,90,
		1,0,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,
		1,0,0,0,96,94,1,0,0,0,97,98,5,0,0,1,98,1,1,0,0,0,99,100,5,52,0,0,100,3,
		1,0,0,0,101,105,5,6,0,0,102,104,5,2,0,0,103,102,1,0,0,0,104,107,1,0,0,
		0,105,103,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,
		112,5,52,0,0,109,111,5,2,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,
		0,0,0,112,113,1,0,0,0,113,131,1,0,0,0,114,112,1,0,0,0,115,119,5,44,0,0,
		116,118,5,2,0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,
		1,0,0,0,120,122,1,0,0,0,121,119,1,0,0,0,122,126,3,6,3,0,123,125,5,2,0,
		0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,
		129,1,0,0,0,128,126,1,0,0,0,129,130,5,45,0,0,130,132,1,0,0,0,131,115,1,
		0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,134,5,1,0,0,134,135,3,10,5,0,
		135,139,5,7,0,0,136,138,5,2,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,
		1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,5,6,0,
		0,143,5,1,0,0,0,144,145,6,3,-1,0,145,146,5,52,0,0,146,152,1,0,0,0,147,
		148,10,1,0,0,148,149,5,48,0,0,149,151,5,52,0,0,150,147,1,0,0,0,151,154,
		1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,7,1,0,0,0,154,152,1,0,0,0,
		155,159,5,8,0,0,156,158,5,2,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,
		1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,165,5,52,0,
		0,163,164,5,44,0,0,164,166,5,45,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,
		167,1,0,0,0,167,168,5,1,0,0,168,169,3,10,5,0,169,173,5,7,0,0,170,172,5,
		2,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,
		174,176,1,0,0,0,175,173,1,0,0,0,176,177,5,8,0,0,177,9,1,0,0,0,178,180,
		3,22,11,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,
		0,0,182,11,1,0,0,0,183,181,1,0,0,0,184,188,5,5,0,0,185,187,5,2,0,0,186,
		185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,194,1,
		0,0,0,190,188,1,0,0,0,191,193,3,2,1,0,192,191,1,0,0,0,193,196,1,0,0,0,
		194,192,1,0,0,0,194,195,1,0,0,0,195,200,1,0,0,0,196,194,1,0,0,0,197,199,
		5,2,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,
		0,201,203,1,0,0,0,202,200,1,0,0,0,203,205,5,52,0,0,204,206,3,14,7,0,205,
		204,1,0,0,0,205,206,1,0,0,0,206,13,1,0,0,0,207,210,3,18,9,0,208,210,3,
		16,8,0,209,207,1,0,0,0,209,208,1,0,0,0,210,15,1,0,0,0,211,213,5,2,0,0,
		212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,
		1,0,0,0,216,214,1,0,0,0,217,218,5,33,0,0,218,221,3,60,30,0,219,221,3,20,
		10,0,220,214,1,0,0,0,220,219,1,0,0,0,221,17,1,0,0,0,222,224,5,2,0,0,223,
		222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,228,1,
		0,0,0,227,225,1,0,0,0,228,232,5,46,0,0,229,231,5,2,0,0,230,229,1,0,0,0,
		231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,232,
		1,0,0,0,235,239,3,60,30,0,236,238,5,2,0,0,237,236,1,0,0,0,238,241,1,0,
		0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,239,1,0,0,0,242,
		253,5,47,0,0,243,245,5,2,0,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,
		0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,246,1,0,0,0,249,250,5,44,0,0,
		250,251,3,62,31,0,251,252,5,45,0,0,252,254,1,0,0,0,253,246,1,0,0,0,253,
		254,1,0,0,0,254,19,1,0,0,0,255,257,5,2,0,0,256,255,1,0,0,0,257,260,1,0,
		0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,
		262,5,44,0,0,262,263,3,62,31,0,263,264,5,45,0,0,264,21,1,0,0,0,265,277,
		5,2,0,0,266,277,5,1,0,0,267,277,3,12,6,0,268,277,3,24,12,0,269,277,3,34,
		17,0,270,277,3,36,18,0,271,277,3,40,20,0,272,277,3,42,21,0,273,277,3,44,
		22,0,274,277,3,46,23,0,275,277,3,48,24,0,276,265,1,0,0,0,276,266,1,0,0,
		0,276,267,1,0,0,0,276,268,1,0,0,0,276,269,1,0,0,0,276,270,1,0,0,0,276,
		271,1,0,0,0,276,272,1,0,0,0,276,273,1,0,0,0,276,274,1,0,0,0,276,275,1,
		0,0,0,277,23,1,0,0,0,278,283,3,26,13,0,279,283,3,28,14,0,280,283,3,30,
		15,0,281,283,3,32,16,0,282,278,1,0,0,0,282,279,1,0,0,0,282,280,1,0,0,0,
		282,281,1,0,0,0,283,25,1,0,0,0,284,288,5,18,0,0,285,287,5,2,0,0,286,285,
		1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,
		0,290,288,1,0,0,0,291,295,5,44,0,0,292,294,5,2,0,0,293,292,1,0,0,0,294,
		297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,
		0,0,0,298,302,5,52,0,0,299,301,5,2,0,0,300,299,1,0,0,0,301,304,1,0,0,0,
		302,300,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,306,
		5,45,0,0,306,27,1,0,0,0,307,311,5,19,0,0,308,310,5,2,0,0,309,308,1,0,0,
		0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,
		311,1,0,0,0,314,318,5,44,0,0,315,317,5,2,0,0,316,315,1,0,0,0,317,320,1,
		0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,
		321,325,5,52,0,0,322,324,5,2,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,
		1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,329,5,45,0,
		0,329,29,1,0,0,0,330,334,5,20,0,0,331,333,5,2,0,0,332,331,1,0,0,0,333,
		336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,334,1,
		0,0,0,337,341,5,44,0,0,338,340,5,2,0,0,339,338,1,0,0,0,340,343,1,0,0,0,
		341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,348,
		5,52,0,0,345,347,5,2,0,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,
		0,348,349,1,0,0,0,349,351,1,0,0,0,350,348,1,0,0,0,351,352,5,45,0,0,352,
		353,3,10,5,0,353,354,5,22,0,0,354,31,1,0,0,0,355,359,5,21,0,0,356,358,
		5,2,0,0,357,356,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,
		0,360,362,1,0,0,0,361,359,1,0,0,0,362,366,5,44,0,0,363,365,5,2,0,0,364,
		363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,369,1,
		0,0,0,368,366,1,0,0,0,369,373,5,52,0,0,370,372,5,2,0,0,371,370,1,0,0,0,
		372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,373,
		1,0,0,0,376,377,5,45,0,0,377,378,3,10,5,0,378,379,5,22,0,0,379,33,1,0,
		0,0,380,384,5,9,0,0,381,383,5,2,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,
		382,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,384,1,0,0,0,387,388,5,
		44,0,0,388,389,3,60,30,0,389,390,5,45,0,0,390,393,3,10,5,0,391,392,5,10,
		0,0,392,394,3,10,5,0,393,391,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,
		399,5,7,0,0,396,398,5,2,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,
		0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,403,5,9,0,0,
		403,35,1,0,0,0,404,408,5,11,0,0,405,407,5,2,0,0,406,405,1,0,0,0,407,410,
		1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,408,1,0,0,
		0,411,412,5,44,0,0,412,416,3,60,30,0,413,415,5,2,0,0,414,413,1,0,0,0,415,
		418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,416,1,
		0,0,0,419,423,5,45,0,0,420,422,5,2,0,0,421,420,1,0,0,0,422,425,1,0,0,0,
		423,421,1,0,0,0,423,424,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,426,428,
		5,1,0,0,427,426,1,0,0,0,428,429,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,
		0,430,432,1,0,0,0,431,433,3,38,19,0,432,431,1,0,0,0,433,434,1,0,0,0,434,
		432,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,440,5,7,0,0,437,439,5,
		2,0,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,
		441,443,1,0,0,0,442,440,1,0,0,0,443,444,5,11,0,0,444,37,1,0,0,0,445,449,
		5,12,0,0,446,448,5,2,0,0,447,446,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,
		0,449,450,1,0,0,0,450,452,1,0,0,0,451,449,1,0,0,0,452,461,3,60,30,0,453,
		457,5,13,0,0,454,456,5,2,0,0,455,454,1,0,0,0,456,459,1,0,0,0,457,455,1,
		0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,462,3,60,30,
		0,461,453,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,467,3,10,5,0,464,
		466,5,2,0,0,465,464,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,
		0,0,0,468,39,1,0,0,0,469,467,1,0,0,0,470,474,5,14,0,0,471,473,5,2,0,0,
		472,471,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,477,
		1,0,0,0,476,474,1,0,0,0,477,478,5,44,0,0,478,479,3,60,30,0,479,480,5,45,
		0,0,480,481,3,10,5,0,481,485,5,7,0,0,482,484,5,2,0,0,483,482,1,0,0,0,484,
		487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,485,1,
		0,0,0,488,489,5,14,0,0,489,41,1,0,0,0,490,494,5,17,0,0,491,493,5,2,0,0,
		492,491,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,43,
		1,0,0,0,496,494,1,0,0,0,497,501,5,15,0,0,498,500,5,2,0,0,499,498,1,0,0,
		0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,
		501,1,0,0,0,504,505,5,52,0,0,505,45,1,0,0,0,506,507,5,16,0,0,507,47,1,
		0,0,0,508,523,3,54,27,0,509,510,3,50,25,0,510,512,5,44,0,0,511,513,3,62,
		31,0,512,511,1,0,0,0,512,513,1,0,0,0,513,517,1,0,0,0,514,516,5,2,0,0,515,
		514,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,520,1,
		0,0,0,519,517,1,0,0,0,520,521,5,45,0,0,521,523,1,0,0,0,522,508,1,0,0,0,
		522,509,1,0,0,0,523,49,1,0,0,0,524,525,5,2,0,0,525,533,3,50,25,0,526,533,
		5,52,0,0,527,533,7,0,0,0,528,529,5,44,0,0,529,530,3,60,30,0,530,531,5,
		45,0,0,531,533,1,0,0,0,532,524,1,0,0,0,532,526,1,0,0,0,532,527,1,0,0,0,
		532,528,1,0,0,0,533,51,1,0,0,0,534,535,6,26,-1,0,535,539,3,50,25,0,536,
		538,5,2,0,0,537,536,1,0,0,0,538,541,1,0,0,0,539,537,1,0,0,0,539,540,1,
		0,0,0,540,579,1,0,0,0,541,539,1,0,0,0,542,546,10,2,0,0,543,545,5,2,0,0,
		544,543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,1,0,0,0,547,549,
		1,0,0,0,548,546,1,0,0,0,549,551,5,44,0,0,550,552,3,62,31,0,551,550,1,0,
		0,0,551,552,1,0,0,0,552,556,1,0,0,0,553,555,5,2,0,0,554,553,1,0,0,0,555,
		558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,556,1,
		0,0,0,559,578,5,45,0,0,560,564,10,1,0,0,561,563,5,2,0,0,562,561,1,0,0,
		0,563,566,1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,
		564,1,0,0,0,567,568,5,46,0,0,568,572,3,60,30,0,569,571,5,2,0,0,570,569,
		1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,
		0,574,572,1,0,0,0,575,576,5,47,0,0,576,578,1,0,0,0,577,542,1,0,0,0,577,
		560,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,53,1,0,
		0,0,581,579,1,0,0,0,582,583,3,52,26,0,583,584,3,58,29,0,584,585,3,60,30,
		0,585,55,1,0,0,0,586,587,6,28,-1,0,587,588,3,54,27,0,588,594,1,0,0,0,589,
		590,10,1,0,0,590,591,5,48,0,0,591,593,3,54,27,0,592,589,1,0,0,0,593,596,
		1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,57,1,0,0,0,596,594,1,0,0,0,
		597,598,5,33,0,0,598,59,1,0,0,0,599,600,3,64,32,0,600,61,1,0,0,0,601,602,
		6,31,-1,0,602,603,3,60,30,0,603,609,1,0,0,0,604,605,10,1,0,0,605,606,5,
		48,0,0,606,608,3,60,30,0,607,604,1,0,0,0,608,611,1,0,0,0,609,607,1,0,0,
		0,609,610,1,0,0,0,610,63,1,0,0,0,611,609,1,0,0,0,612,613,6,32,-1,0,613,
		614,3,66,33,0,614,620,1,0,0,0,615,616,10,1,0,0,616,617,5,43,0,0,617,619,
		3,66,33,0,618,615,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,
		0,0,621,65,1,0,0,0,622,620,1,0,0,0,623,624,6,33,-1,0,624,625,3,68,34,0,
		625,631,1,0,0,0,626,627,10,1,0,0,627,628,5,31,0,0,628,630,3,68,34,0,629,
		626,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,67,1,0,
		0,0,633,631,1,0,0,0,634,635,6,34,-1,0,635,636,3,70,35,0,636,642,1,0,0,
		0,637,638,10,1,0,0,638,639,5,30,0,0,639,641,3,70,35,0,640,637,1,0,0,0,
		641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,0,0,643,69,1,0,0,0,644,642,
		1,0,0,0,645,646,6,35,-1,0,646,647,3,72,36,0,647,653,1,0,0,0,648,649,10,
		1,0,0,649,650,5,32,0,0,650,652,3,72,36,0,651,648,1,0,0,0,652,655,1,0,0,
		0,653,651,1,0,0,0,653,654,1,0,0,0,654,71,1,0,0,0,655,653,1,0,0,0,656,657,
		6,36,-1,0,657,658,3,74,37,0,658,664,1,0,0,0,659,660,10,1,0,0,660,661,5,
		40,0,0,661,663,3,74,37,0,662,659,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,
		0,664,665,1,0,0,0,665,73,1,0,0,0,666,664,1,0,0,0,667,668,6,37,-1,0,668,
		669,3,76,38,0,669,675,1,0,0,0,670,671,10,1,0,0,671,672,5,39,0,0,672,674,
		3,76,38,0,673,670,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,
		0,0,676,75,1,0,0,0,677,675,1,0,0,0,678,679,6,38,-1,0,679,680,3,78,39,0,
		680,686,1,0,0,0,681,682,10,1,0,0,682,683,5,42,0,0,683,685,3,78,39,0,684,
		681,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,77,1,0,
		0,0,688,686,1,0,0,0,689,690,6,39,-1,0,690,691,3,80,40,0,691,700,1,0,0,
		0,692,693,10,2,0,0,693,694,5,27,0,0,694,699,3,80,40,0,695,696,10,1,0,0,
		696,697,5,28,0,0,697,699,3,80,40,0,698,692,1,0,0,0,698,695,1,0,0,0,699,
		702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,79,1,0,0,0,702,700,1,0,
		0,0,703,704,6,40,-1,0,704,705,3,82,41,0,705,720,1,0,0,0,706,707,10,4,0,
		0,707,708,5,24,0,0,708,719,3,82,41,0,709,710,10,3,0,0,710,711,5,23,0,0,
		711,719,3,82,41,0,712,713,10,2,0,0,713,714,5,26,0,0,714,719,3,82,41,0,
		715,716,10,1,0,0,716,717,5,25,0,0,717,719,3,82,41,0,718,706,1,0,0,0,718,
		709,1,0,0,0,718,712,1,0,0,0,718,715,1,0,0,0,719,722,1,0,0,0,720,718,1,
		0,0,0,720,721,1,0,0,0,721,81,1,0,0,0,722,720,1,0,0,0,723,724,6,41,-1,0,
		724,725,3,84,42,0,725,734,1,0,0,0,726,727,10,2,0,0,727,728,5,34,0,0,728,
		733,3,84,42,0,729,730,10,1,0,0,730,731,5,35,0,0,731,733,3,84,42,0,732,
		726,1,0,0,0,732,729,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,
		0,0,0,735,83,1,0,0,0,736,734,1,0,0,0,737,738,6,42,-1,0,738,739,3,86,43,
		0,739,751,1,0,0,0,740,741,10,3,0,0,741,742,5,36,0,0,742,750,3,86,43,0,
		743,744,10,2,0,0,744,745,5,37,0,0,745,750,3,86,43,0,746,747,10,1,0,0,747,
		748,5,38,0,0,748,750,3,86,43,0,749,740,1,0,0,0,749,743,1,0,0,0,749,746,
		1,0,0,0,750,753,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,0,752,85,1,0,0,0,
		753,751,1,0,0,0,754,762,3,52,26,0,755,756,5,35,0,0,756,762,3,86,43,0,757,
		758,5,41,0,0,758,762,3,86,43,0,759,760,5,29,0,0,760,762,3,86,43,0,761,
		754,1,0,0,0,761,755,1,0,0,0,761,757,1,0,0,0,761,759,1,0,0,0,762,87,1,0,
		0,0,87,92,94,105,112,119,126,131,139,152,159,165,173,181,188,194,200,205,
		209,214,220,225,232,239,246,253,258,276,282,288,295,302,311,318,325,334,
		341,348,359,366,373,384,393,399,408,416,423,429,434,440,449,457,461,467,
		474,485,494,501,512,517,522,532,539,546,551,556,564,572,577,579,594,609,
		620,631,642,653,664,675,686,698,700,718,720,732,734,749,751,761
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KSPCompiler.Infrastructures.Parser.Antlr
