//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KSPParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KSPCompiler.Infrastructures.Parser.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KSPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, MULTI_LINE_DELIMITER=2, Whitespace=3, BlockComment=4, DECLARE=5, 
		ON=6, END=7, FUNCTION=8, IF=9, ELSE=10, SELECT=11, CASE=12, TO=13, WHILE=14, 
		CALL=15, CONTINUE=16, PREPROCESSOR_SET_COND=17, PREPROCESSOR_RESET_COND=18, 
		PREPROCESSOR_CODE_IF=19, PREPROCESSOR_CODE_IF_NOT=20, PREPROCESSOR_CODE_END_IF=21, 
		BOOL_GT=22, BOOL_LT=23, BOOL_GE=24, BOOL_LE=25, BOOL_EQ=26, BOOL_NE=27, 
		BOOL_NOT=28, BOOL_AND=29, BOOL_OR=30, BOOL_XOR=31, ASSIGN=32, PLUS=33, 
		MINUS=34, MUL=35, DIV=36, MOD=37, BIT_AND=38, BIT_OR=39, BIT_NOT=40, BIT_XOR=41, 
		STRING_ADD=42, LPARENT=43, RPARENT=44, LBRACKET=45, RBRACKET=46, COMMA=47, 
		INTEGER_LITERAL=48, REAL_LITERAL=49, STRING_LITERAL=50, IDENTIFIER=51;
	public const int
		RULE_compilationUnit = 0, RULE_declarationModifier = 1, RULE_callbackDeclaration = 2, 
		RULE_argumentDefinitionList = 3, RULE_userFunctionDeclaration = 4, RULE_block = 5, 
		RULE_variableDeclaration = 6, RULE_variableInitializer = 7, RULE_primitiveInitializer = 8, 
		RULE_arrayInitializer = 9, RULE_uiInitializer = 10, RULE_statement = 11, 
		RULE_preprocessor = 12, RULE_preprocessorDefine = 13, RULE_preprocessorUndefine = 14, 
		RULE_preprocessorIfdefine = 15, RULE_preprocessorIfnotDefine = 16, RULE_ifStatement = 17, 
		RULE_selectStatement = 18, RULE_caseBlock = 19, RULE_whileStatement = 20, 
		RULE_continueStatement = 21, RULE_callUserFunction = 22, RULE_expressionStatement = 23, 
		RULE_primaryExpression = 24, RULE_postfixExpression = 25, RULE_assignmentExpression = 26, 
		RULE_assignmentExpressionList = 27, RULE_assignmentOperator = 28, RULE_expression = 29, 
		RULE_expressionList = 30, RULE_stringConcatenateExpression = 31, RULE_logicalOrExpression = 32, 
		RULE_logicalAndExpression = 33, RULE_logicalXorExpression = 34, RULE_bitwiseOrExpression = 35, 
		RULE_bitwiseAndExpression = 36, RULE_bitwiseXorExpression = 37, RULE_equalityExpression = 38, 
		RULE_relationalExpression = 39, RULE_additiveExpression = 40, RULE_multiplicativeExpression = 41, 
		RULE_unaryExpression = 42;
	public static readonly string[] ruleNames = {
		"compilationUnit", "declarationModifier", "callbackDeclaration", "argumentDefinitionList", 
		"userFunctionDeclaration", "block", "variableDeclaration", "variableInitializer", 
		"primitiveInitializer", "arrayInitializer", "uiInitializer", "statement", 
		"preprocessor", "preprocessorDefine", "preprocessorUndefine", "preprocessorIfdefine", 
		"preprocessorIfnotDefine", "ifStatement", "selectStatement", "caseBlock", 
		"whileStatement", "continueStatement", "callUserFunction", "expressionStatement", 
		"primaryExpression", "postfixExpression", "assignmentExpression", "assignmentExpressionList", 
		"assignmentOperator", "expression", "expressionList", "stringConcatenateExpression", 
		"logicalOrExpression", "logicalAndExpression", "logicalXorExpression", 
		"bitwiseOrExpression", "bitwiseAndExpression", "bitwiseXorExpression", 
		"equalityExpression", "relationalExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'declare'", "'on'", "'end'", "'function'", 
		"'if'", "'else'", "'select'", "'case'", "'to'", "'while'", "'call'", "'continue'", 
		"'SET_CONDITION'", "'RESET_CONDITION'", "'USE_CODE_IF'", "'USE_CODE_IF_NOT'", 
		"'END_USE_CODE'", "'>'", "'<'", "'>='", "'<='", "'='", "'#'", "'not'", 
		"'and'", "'or'", "'xor'", "':='", "'+'", "'-'", "'*'", "'/'", "'mod'", 
		"'.and.'", "'.or.'", "'.not.'", "'.xor.'", "'&'", "'('", "')'", "'['", 
		"']'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "MULTI_LINE_DELIMITER", "Whitespace", "BlockComment", "DECLARE", 
		"ON", "END", "FUNCTION", "IF", "ELSE", "SELECT", "CASE", "TO", "WHILE", 
		"CALL", "CONTINUE", "PREPROCESSOR_SET_COND", "PREPROCESSOR_RESET_COND", 
		"PREPROCESSOR_CODE_IF", "PREPROCESSOR_CODE_IF_NOT", "PREPROCESSOR_CODE_END_IF", 
		"BOOL_GT", "BOOL_LT", "BOOL_GE", "BOOL_LE", "BOOL_EQ", "BOOL_NE", "BOOL_NOT", 
		"BOOL_AND", "BOOL_OR", "BOOL_XOR", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
		"MOD", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_XOR", "STRING_ADD", "LPARENT", 
		"RPARENT", "LBRACKET", "RBRACKET", "COMMA", "INTEGER_LITERAL", "REAL_LITERAL", 
		"STRING_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KSPParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KSPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KSPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KSPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KSPParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallbackDeclarationContext[] callbackDeclaration() {
			return GetRuleContexts<CallbackDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallbackDeclarationContext callbackDeclaration(int i) {
			return GetRuleContext<CallbackDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionDeclarationContext[] userFunctionDeclaration() {
			return GetRuleContexts<UserFunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionDeclarationContext userFunctionDeclaration(int i) {
			return GetRuleContext<UserFunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KSPParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KSPParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 326L) != 0)) {
				{
				State = 90;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 86;
					callbackDeclaration();
					}
					break;
				case FUNCTION:
					{
					State = 87;
					userFunctionDeclaration();
					}
					break;
				case EOL:
					{
					State = 88;
					Match(EOL);
					}
					break;
				case MULTI_LINE_DELIMITER:
					{
					State = 89;
					Match(MULTI_LINE_DELIMITER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		public DeclarationModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterDeclarationModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitDeclarationModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationModifierContext declarationModifier() {
		DeclarationModifierContext _localctx = new DeclarationModifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_declarationModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallbackDeclarationContext : ParserRuleContext {
		public IToken name;
		public ArgumentDefinitionListContext arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(KSPParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(KSPParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDefinitionListContext argumentDefinitionList() {
			return GetRuleContext<ArgumentDefinitionListContext>(0);
		}
		public CallbackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callbackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCallbackDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCallbackDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallbackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallbackDeclarationContext callbackDeclaration() {
		CallbackDeclarationContext _localctx = new CallbackDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_callbackDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(ON);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 100;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 106;
			_localctx.name = Match(IDENTIFIER);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 107;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPARENT) {
				{
				State = 113;
				Match(LPARENT);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 114;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 120;
				_localctx.arguments = argumentDefinitionList(0);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 121;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 127;
				Match(RPARENT);
				}
			}

			State = 131;
			Match(EOL);
			State = 132;
			block();
			State = 133;
			Match(END);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 134;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 140;
			Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDefinitionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDefinitionListContext argumentDefinitionList() {
			return GetRuleContext<ArgumentDefinitionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public ArgumentDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDefinitionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterArgumentDefinitionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitArgumentDefinitionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDefinitionListContext argumentDefinitionList() {
		return argumentDefinitionList(0);
	}

	private ArgumentDefinitionListContext argumentDefinitionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentDefinitionListContext _localctx = new ArgumentDefinitionListContext(Context, _parentState);
		ArgumentDefinitionListContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_argumentDefinitionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 143;
			Match(IDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentDefinitionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentDefinitionList);
					State = 145;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 146;
					Match(COMMA);
					State = 147;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserFunctionDeclarationContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(KSPParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(KSPParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public UserFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUserFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUserFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserFunctionDeclarationContext userFunctionDeclaration() {
		UserFunctionDeclarationContext _localctx = new UserFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_userFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(FUNCTION);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 154;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160;
			_localctx.name = Match(IDENTIFIER);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPARENT) {
				{
				State = 161;
				Match(LPARENT);
				State = 162;
				Match(RPARENT);
				}
			}

			State = 165;
			Match(EOL);
			State = 166;
			block();
			State = 167;
			Match(END);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 168;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 176;
					statement();
					}
					} 
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public DeclarationModifierContext modifier;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(KSPParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationModifierContext[] declarationModifier() {
			return GetRuleContexts<DeclarationModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationModifierContext declarationModifier(int i) {
			return GetRuleContext<DeclarationModifierContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(DECLARE);
			State = 186;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 183;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 189;
					_localctx.modifier = declarationModifier();
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 195;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			_localctx.name = Match(IDENTIFIER);
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 202;
				variableInitializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveInitializerContext primitiveInitializer() {
			return GetRuleContext<PrimitiveInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableInitializer);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				arrayInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				primitiveInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KSPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UiInitializerContext uiInitializer() {
			return GetRuleContext<UiInitializerContext>(0);
		}
		public PrimitiveInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveInitializerContext primitiveInitializer() {
		PrimitiveInitializerContext _localctx = new PrimitiveInitializerContext(Context, State);
		EnterRule(_localctx, 16, RULE_primitiveInitializer);
		int _la;
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 209;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 215;
				Match(ASSIGN);
				State = 216;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				uiInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KSPParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KSPParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 18, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 220;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 226;
			Match(LBRACKET);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 227;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 233;
			expression();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 234;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 240;
			Match(RBRACKET);
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==MULTI_LINE_DELIMITER) {
					{
					{
					State = 241;
					Match(MULTI_LINE_DELIMITER);
					}
					}
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 247;
				Match(LPARENT);
				State = 248;
				expressionList(0);
				State = 249;
				Match(RPARENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UiInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public UiInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uiInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUiInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUiInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUiInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UiInitializerContext uiInitializer() {
		UiInitializerContext _localctx = new UiInitializerContext(Context, State);
		EnterRule(_localctx, 20, RULE_uiInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 253;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 259;
			Match(LPARENT);
			State = 260;
			expressionList(0);
			State = 261;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER() { return GetToken(KSPParser.MULTI_LINE_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(KSPParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorContext preprocessor() {
			return GetRuleContext<PreprocessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallUserFunctionContext callUserFunction() {
			return GetRuleContext<CallUserFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				Match(MULTI_LINE_DELIMITER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				Match(EOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 265;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 266;
				preprocessor();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 267;
				ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 268;
				selectStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 269;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 270;
				continueStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 271;
				callUserFunction();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 272;
				expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDefineContext preprocessorDefine() {
			return GetRuleContext<PreprocessorDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorUndefineContext preprocessorUndefine() {
			return GetRuleContext<PreprocessorUndefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorIfdefineContext preprocessorIfdefine() {
			return GetRuleContext<PreprocessorIfdefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorIfnotDefineContext preprocessorIfnotDefine() {
			return GetRuleContext<PreprocessorIfnotDefineContext>(0);
		}
		public PreprocessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorContext preprocessor() {
		PreprocessorContext _localctx = new PreprocessorContext(Context, State);
		EnterRule(_localctx, 24, RULE_preprocessor);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPROCESSOR_SET_COND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				preprocessorDefine();
				}
				break;
			case PREPROCESSOR_RESET_COND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				preprocessorUndefine();
				}
				break;
			case PREPROCESSOR_CODE_IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277;
				preprocessorIfdefine();
				}
				break;
			case PREPROCESSOR_CODE_IF_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 278;
				preprocessorIfnotDefine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_SET_COND() { return GetToken(KSPParser.PREPROCESSOR_SET_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDefineContext preprocessorDefine() {
		PreprocessorDefineContext _localctx = new PreprocessorDefineContext(Context, State);
		EnterRule(_localctx, 26, RULE_preprocessorDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(PREPROCESSOR_SET_COND);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 282;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 288;
			Match(LPARENT);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 289;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 295;
			_localctx.symbol = Match(IDENTIFIER);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 296;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 302;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorUndefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_RESET_COND() { return GetToken(KSPParser.PREPROCESSOR_RESET_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorUndefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorUndefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorUndefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorUndefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorUndefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorUndefineContext preprocessorUndefine() {
		PreprocessorUndefineContext _localctx = new PreprocessorUndefineContext(Context, State);
		EnterRule(_localctx, 28, RULE_preprocessorUndefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(PREPROCESSOR_RESET_COND);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 305;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 311;
			Match(LPARENT);
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 312;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 318;
			_localctx.symbol = Match(IDENTIFIER);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 319;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorIfdefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_END_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorIfdefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorIfdefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorIfdefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorIfdefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIfdefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorIfdefineContext preprocessorIfdefine() {
		PreprocessorIfdefineContext _localctx = new PreprocessorIfdefineContext(Context, State);
		EnterRule(_localctx, 30, RULE_preprocessorIfdefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(PREPROCESSOR_CODE_IF);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 328;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 334;
			Match(LPARENT);
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 335;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 341;
			_localctx.symbol = Match(IDENTIFIER);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 342;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 348;
			Match(RPARENT);
			State = 349;
			block();
			State = 350;
			Match(PREPROCESSOR_CODE_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorIfnotDefineContext : ParserRuleContext {
		public IToken symbol;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_IF_NOT() { return GetToken(KSPParser.PREPROCESSOR_CODE_IF_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPROCESSOR_CODE_END_IF() { return GetToken(KSPParser.PREPROCESSOR_CODE_END_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public PreprocessorIfnotDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorIfnotDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorIfnotDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorIfnotDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIfnotDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorIfnotDefineContext preprocessorIfnotDefine() {
		PreprocessorIfnotDefineContext _localctx = new PreprocessorIfnotDefineContext(Context, State);
		EnterRule(_localctx, 32, RULE_preprocessorIfnotDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(PREPROCESSOR_CODE_IF_NOT);
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 353;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 359;
			Match(LPARENT);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 360;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 366;
			_localctx.symbol = Match(IDENTIFIER);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 367;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 373;
			Match(RPARENT);
			State = 374;
			block();
			State = 375;
			Match(PREPROCESSOR_CODE_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public BlockContext ifBlock;
		public BlockContext elseBlock;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(KSPParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(KSPParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KSPParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(IF);
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 378;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 384;
			Match(LPARENT);
			State = 385;
			expression();
			State = 386;
			Match(RPARENT);
			State = 387;
			_localctx.ifBlock = block();
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 388;
				Match(ELSE);
				State = 389;
				_localctx.elseBlock = block();
				}
			}

			State = 392;
			Match(END);
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 393;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 399;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SELECT() { return GetTokens(KSPParser.SELECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT(int i) {
			return GetToken(KSPParser.SELECT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KSPParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KSPParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(SELECT);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 402;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 408;
			Match(LPARENT);
			State = 409;
			expression();
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 410;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 416;
			Match(RPARENT);
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 417;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 423;
				Match(EOL);
				}
				}
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 428;
				caseBlock();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 433;
			Match(END);
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 434;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 440;
			Match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext condFrom;
		public ExpressionContext condTo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(KSPParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(KSPParser.TO, 0); }
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_caseBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(CASE);
			State = 446;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 443;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 448;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 449;
			_localctx.condFrom = expression();
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 450;
				Match(TO);
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 451;
						Match(MULTI_LINE_DELIMITER);
						}
						} 
					}
					State = 456;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				}
				State = 457;
				_localctx.condTo = expression();
				}
			}

			State = 460;
			block();
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 461;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(KSPParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(KSPParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(KSPParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(WHILE);
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 468;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 474;
			Match(LPARENT);
			State = 475;
			expression();
			State = 476;
			Match(RPARENT);
			State = 477;
			block();
			State = 478;
			Match(END);
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 479;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 485;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(KSPParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_continueStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			Match(CONTINUE);
			State = 491;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 488;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 493;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallUserFunctionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(KSPParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		public CallUserFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callUserFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterCallUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitCallUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallUserFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallUserFunctionContext callUserFunction() {
		CallUserFunctionContext _localctx = new CallUserFunctionContext(Context, State);
		EnterRule(_localctx, 44, RULE_callUserFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(CALL);
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LINE_DELIMITER) {
				{
				{
				State = 495;
				Match(MULTI_LINE_DELIMITER);
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 501;
			_localctx.name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_expressionStatement);
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 503;
				assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER() { return GetToken(KSPParser.MULTI_LINE_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(KSPParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(KSPParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(KSPParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(KSPParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_primaryExpression);
		int _la;
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MULTI_LINE_DELIMITER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507;
				Match(MULTI_LINE_DELIMITER);
				State = 508;
				primaryExpression();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509;
				Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 510;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1970324836974592L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LPARENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 511;
				Match(LPARENT);
				State = 512;
				expression();
				State = 513;
				Match(RPARENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PostfixExpressionContext callExpr;
		public PostfixExpressionContext arrayExpr;
		public PrimaryExpressionContext expr;
		public ExpressionListContext callArgs;
		public ExpressionContext arrayIndexExpr;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULTI_LINE_DELIMITER() { return GetTokens(KSPParser.MULTI_LINE_DELIMITER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_DELIMITER(int i) {
			return GetToken(KSPParser.MULTI_LINE_DELIMITER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(KSPParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(KSPParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(KSPParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(KSPParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 518;
			_localctx.expr = primaryExpression();
			State = 522;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 519;
					Match(MULTI_LINE_DELIMITER);
					}
					} 
				}
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 562;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 560;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						_localctx.callExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 525;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 529;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 526;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 531;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 532;
						Match(LPARENT);
						State = 534;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
						case 1:
							{
							State = 533;
							_localctx.callArgs = expressionList(0);
							}
							break;
						}
						State = 539;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 536;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 541;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 542;
						Match(RPARENT);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						_localctx.arrayExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 543;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 547;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 544;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 549;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 550;
						Match(LBRACKET);
						State = 551;
						_localctx.arrayIndexExpr = expression();
						State = 555;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MULTI_LINE_DELIMITER) {
							{
							{
							State = 552;
							Match(MULTI_LINE_DELIMITER);
							}
							}
							State = 557;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 558;
						Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 564;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			postfixExpression(0);
			State = 566;
			assignmentOperator();
			State = 567;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionListContext assignmentExpressionList() {
			return GetRuleContext<AssignmentExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public AssignmentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionListContext assignmentExpressionList() {
		return assignmentExpressionList(0);
	}

	private AssignmentExpressionListContext assignmentExpressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AssignmentExpressionListContext _localctx = new AssignmentExpressionListContext(Context, _parentState);
		AssignmentExpressionListContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_assignmentExpressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 570;
			assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 577;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssignmentExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_assignmentExpressionList);
					State = 572;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 573;
					Match(COMMA);
					State = 574;
					assignmentExpression();
					}
					} 
				}
				State = 579;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public IToken opr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(KSPParser.ASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_assignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			_localctx.opr = Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringConcatenateExpressionContext stringConcatenateExpression() {
			return GetRuleContext<StringConcatenateExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			stringConcatenateExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KSPParser.COMMA, 0); }
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		return expressionList(0);
	}

	private ExpressionListContext expressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionListContext _localctx = new ExpressionListContext(Context, _parentState);
		ExpressionListContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 585;
			expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 592;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expressionList);
					State = 587;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 588;
					Match(COMMA);
					State = 589;
					expression();
					}
					} 
				}
				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringConcatenateExpressionContext : ParserRuleContext {
		public StringConcatenateExpressionContext left;
		public LogicalOrExpressionContext nested;
		public LogicalOrExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_ADD() { return GetToken(KSPParser.STRING_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringConcatenateExpressionContext stringConcatenateExpression() {
			return GetRuleContext<StringConcatenateExpressionContext>(0);
		}
		public StringConcatenateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConcatenateExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterStringConcatenateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitStringConcatenateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConcatenateExpressionContext stringConcatenateExpression() {
		return stringConcatenateExpression(0);
	}

	private StringConcatenateExpressionContext stringConcatenateExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StringConcatenateExpressionContext _localctx = new StringConcatenateExpressionContext(Context, _parentState);
		StringConcatenateExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_stringConcatenateExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 596;
			_localctx.nested = logicalOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StringConcatenateExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_stringConcatenateExpression);
					State = 598;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 599;
					Match(STRING_ADD);
					State = 600;
					_localctx.right = logicalOrExpression(0);
					}
					} 
				}
				State = 605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext left;
		public LogicalAndExpressionContext nested;
		public LogicalAndExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OR() { return GetToken(KSPParser.BOOL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		return logicalOrExpression(0);
	}

	private LogicalOrExpressionContext logicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 607;
			_localctx.nested = logicalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 614;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
					State = 609;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 610;
					Match(BOOL_OR);
					State = 611;
					_localctx.right = logicalAndExpression(0);
					}
					} 
				}
				State = 616;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext left;
		public LogicalXorExpressionContext nested;
		public LogicalXorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalXorExpressionContext logicalXorExpression() {
			return GetRuleContext<LogicalXorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_AND() { return GetToken(KSPParser.BOOL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		return logicalAndExpression(0);
	}

	private LogicalAndExpressionContext logicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 618;
			_localctx.nested = logicalXorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 625;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
					State = 620;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 621;
					Match(BOOL_AND);
					State = 622;
					_localctx.right = logicalXorExpression(0);
					}
					} 
				}
				State = 627;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalXorExpressionContext : ParserRuleContext {
		public LogicalXorExpressionContext left;
		public BitwiseOrExpressionContext nested;
		public BitwiseOrExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext bitwiseOrExpression() {
			return GetRuleContext<BitwiseOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_XOR() { return GetToken(KSPParser.BOOL_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalXorExpressionContext logicalXorExpression() {
			return GetRuleContext<LogicalXorExpressionContext>(0);
		}
		public LogicalXorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalXorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterLogicalXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitLogicalXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalXorExpressionContext logicalXorExpression() {
		return logicalXorExpression(0);
	}

	private LogicalXorExpressionContext logicalXorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalXorExpressionContext _localctx = new LogicalXorExpressionContext(Context, _parentState);
		LogicalXorExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_logicalXorExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 629;
			_localctx.nested = bitwiseOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 636;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalXorExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalXorExpression);
					State = 631;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 632;
					Match(BOOL_XOR);
					State = 633;
					_localctx.right = bitwiseOrExpression(0);
					}
					} 
				}
				State = 638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseOrExpressionContext : ParserRuleContext {
		public BitwiseOrExpressionContext left;
		public BitwiseAndExpressionContext nested;
		public BitwiseAndExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndExpressionContext bitwiseAndExpression() {
			return GetRuleContext<BitwiseAndExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(KSPParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOrExpressionContext bitwiseOrExpression() {
			return GetRuleContext<BitwiseOrExpressionContext>(0);
		}
		public BitwiseOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrExpressionContext bitwiseOrExpression() {
		return bitwiseOrExpression(0);
	}

	private BitwiseOrExpressionContext bitwiseOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseOrExpressionContext _localctx = new BitwiseOrExpressionContext(Context, _parentState);
		BitwiseOrExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_bitwiseOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 640;
			_localctx.nested = bitwiseAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 647;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseOrExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseOrExpression);
					State = 642;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 643;
					Match(BIT_OR);
					State = 644;
					_localctx.right = bitwiseAndExpression(0);
					}
					} 
				}
				State = 649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseAndExpressionContext : ParserRuleContext {
		public BitwiseAndExpressionContext left;
		public BitwiseXorExpressionContext nested;
		public BitwiseXorExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXorExpressionContext bitwiseXorExpression() {
			return GetRuleContext<BitwiseXorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(KSPParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseAndExpressionContext bitwiseAndExpression() {
			return GetRuleContext<BitwiseAndExpressionContext>(0);
		}
		public BitwiseAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndExpressionContext bitwiseAndExpression() {
		return bitwiseAndExpression(0);
	}

	private BitwiseAndExpressionContext bitwiseAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseAndExpressionContext _localctx = new BitwiseAndExpressionContext(Context, _parentState);
		BitwiseAndExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_bitwiseAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 651;
			_localctx.nested = bitwiseXorExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 658;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseAndExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseAndExpression);
					State = 653;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 654;
					Match(BIT_AND);
					State = 655;
					_localctx.right = bitwiseXorExpression(0);
					}
					} 
				}
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BitwiseXorExpressionContext : ParserRuleContext {
		public BitwiseXorExpressionContext left;
		public EqualityExpressionContext nested;
		public EqualityExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(KSPParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseXorExpressionContext bitwiseXorExpression() {
			return GetRuleContext<BitwiseXorExpressionContext>(0);
		}
		public BitwiseXorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseXorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseXorExpressionContext bitwiseXorExpression() {
		return bitwiseXorExpression(0);
	}

	private BitwiseXorExpressionContext bitwiseXorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitwiseXorExpressionContext _localctx = new BitwiseXorExpressionContext(Context, _parentState);
		BitwiseXorExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_bitwiseXorExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 662;
			_localctx.nested = equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 669;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BitwiseXorExpressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_bitwiseXorExpression);
					State = 664;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 665;
					Match(BIT_XOR);
					State = 666;
					_localctx.right = equalityExpression(0);
					}
					} 
				}
				State = 671;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public EqualityExpressionContext left;
		public RelationalExpressionContext nested;
		public IToken opr;
		public RelationalExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_EQ() { return GetToken(KSPParser.BOOL_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NE() { return GetToken(KSPParser.BOOL_NE, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 673;
			_localctx.nested = relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 683;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 681;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 675;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 676;
						_localctx.opr = Match(BOOL_EQ);
						State = 677;
						_localctx.right = relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 678;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 679;
						_localctx.opr = Match(BOOL_NE);
						State = 680;
						_localctx.right = relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 685;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public RelationalExpressionContext left;
		public AdditiveExpressionContext nested;
		public IToken opr;
		public AdditiveExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LT() { return GetToken(KSPParser.BOOL_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_GT() { return GetToken(KSPParser.BOOL_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LE() { return GetToken(KSPParser.BOOL_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_GE() { return GetToken(KSPParser.BOOL_GE, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 687;
			_localctx.nested = additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 703;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 701;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 689;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 690;
						_localctx.opr = Match(BOOL_LT);
						State = 691;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 692;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 693;
						_localctx.opr = Match(BOOL_GT);
						State = 694;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 695;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 696;
						_localctx.opr = Match(BOOL_LE);
						State = 697;
						_localctx.right = additiveExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 698;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 699;
						_localctx.opr = Match(BOOL_GE);
						State = 700;
						_localctx.right = additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 705;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext left;
		public MultiplicativeExpressionContext nested;
		public IToken opr;
		public MultiplicativeExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KSPParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KSPParser.MINUS, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 707;
			_localctx.nested = multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 717;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 715;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 709;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 710;
						_localctx.opr = Match(PLUS);
						State = 711;
						_localctx.right = multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 712;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 713;
						_localctx.opr = Match(MINUS);
						State = 714;
						_localctx.right = multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 719;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext left;
		public UnaryExpressionContext nested;
		public IToken opr;
		public UnaryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(KSPParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KSPParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(KSPParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 721;
			_localctx.nested = unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 734;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 732;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 723;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 724;
						_localctx.opr = Match(MUL);
						State = 725;
						_localctx.right = unaryExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 726;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 727;
						_localctx.opr = Match(DIV);
						State = 728;
						_localctx.right = unaryExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 729;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 730;
						_localctx.opr = Match(MOD);
						State = 731;
						_localctx.right = unaryExpression();
						}
						break;
					}
					} 
				}
				State = 736;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PostfixExpressionContext nested;
		public IToken opr;
		public UnaryExpressionContext unaryMinus;
		public UnaryExpressionContext unaryNot;
		public UnaryExpressionContext logicalNot;
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KSPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(KSPParser.BIT_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_NOT() { return GetToken(KSPParser.BOOL_NOT, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKSPParserListener typedListener = listener as IKSPParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKSPParserVisitor<TResult> typedVisitor = visitor as IKSPParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_unaryExpression);
		try {
			State = 744;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MULTI_LINE_DELIMITER:
			case LPARENT:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case STRING_LITERAL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 737;
				_localctx.nested = postfixExpression(0);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 738;
				_localctx.opr = Match(MINUS);
				State = 739;
				_localctx.unaryMinus = unaryExpression();
				}
				break;
			case BIT_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 740;
				_localctx.opr = Match(BIT_NOT);
				State = 741;
				_localctx.unaryNot = unaryExpression();
				}
				break;
			case BOOL_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 742;
				_localctx.opr = Match(BOOL_NOT);
				State = 743;
				_localctx.logicalNot = unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return argumentDefinitionList_sempred((ArgumentDefinitionListContext)_localctx, predIndex);
		case 25: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 27: return assignmentExpressionList_sempred((AssignmentExpressionListContext)_localctx, predIndex);
		case 30: return expressionList_sempred((ExpressionListContext)_localctx, predIndex);
		case 31: return stringConcatenateExpression_sempred((StringConcatenateExpressionContext)_localctx, predIndex);
		case 32: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		case 33: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 34: return logicalXorExpression_sempred((LogicalXorExpressionContext)_localctx, predIndex);
		case 35: return bitwiseOrExpression_sempred((BitwiseOrExpressionContext)_localctx, predIndex);
		case 36: return bitwiseAndExpression_sempred((BitwiseAndExpressionContext)_localctx, predIndex);
		case 37: return bitwiseXorExpression_sempred((BitwiseXorExpressionContext)_localctx, predIndex);
		case 38: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 39: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 40: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 41: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool argumentDefinitionList_sempred(ArgumentDefinitionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool assignmentExpressionList_sempred(AssignmentExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expressionList_sempred(ExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool stringConcatenateExpression_sempred(StringConcatenateExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalXorExpression_sempred(LogicalXorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseOrExpression_sempred(BitwiseOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseAndExpression_sempred(BitwiseAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwiseXorExpression_sempred(BitwiseXorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 4);
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 3);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,51,747,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,1,0,1,0,5,0,91,8,0,10,0,12,0,94,9,0,1,0,1,0,1,1,1,1,1,2,1,2,5,
		2,102,8,2,10,2,12,2,105,9,2,1,2,1,2,5,2,109,8,2,10,2,12,2,112,9,2,1,2,
		1,2,5,2,116,8,2,10,2,12,2,119,9,2,1,2,1,2,5,2,123,8,2,10,2,12,2,126,9,
		2,1,2,1,2,3,2,130,8,2,1,2,1,2,1,2,1,2,5,2,136,8,2,10,2,12,2,139,9,2,1,
		2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,149,8,3,10,3,12,3,152,9,3,1,4,1,4,5,
		4,156,8,4,10,4,12,4,159,9,4,1,4,1,4,1,4,3,4,164,8,4,1,4,1,4,1,4,1,4,5,
		4,170,8,4,10,4,12,4,173,9,4,1,4,1,4,1,5,5,5,178,8,5,10,5,12,5,181,9,5,
		1,6,1,6,5,6,185,8,6,10,6,12,6,188,9,6,1,6,5,6,191,8,6,10,6,12,6,194,9,
		6,1,6,5,6,197,8,6,10,6,12,6,200,9,6,1,6,1,6,3,6,204,8,6,1,7,1,7,3,7,208,
		8,7,1,8,5,8,211,8,8,10,8,12,8,214,9,8,1,8,1,8,1,8,3,8,219,8,8,1,9,5,9,
		222,8,9,10,9,12,9,225,9,9,1,9,1,9,5,9,229,8,9,10,9,12,9,232,9,9,1,9,1,
		9,5,9,236,8,9,10,9,12,9,239,9,9,1,9,1,9,5,9,243,8,9,10,9,12,9,246,9,9,
		1,9,1,9,1,9,1,9,3,9,252,8,9,1,10,5,10,255,8,10,10,10,12,10,258,9,10,1,
		10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,
		11,274,8,11,1,12,1,12,1,12,1,12,3,12,280,8,12,1,13,1,13,5,13,284,8,13,
		10,13,12,13,287,9,13,1,13,1,13,5,13,291,8,13,10,13,12,13,294,9,13,1,13,
		1,13,5,13,298,8,13,10,13,12,13,301,9,13,1,13,1,13,1,14,1,14,5,14,307,8,
		14,10,14,12,14,310,9,14,1,14,1,14,5,14,314,8,14,10,14,12,14,317,9,14,1,
		14,1,14,5,14,321,8,14,10,14,12,14,324,9,14,1,14,1,14,1,15,1,15,5,15,330,
		8,15,10,15,12,15,333,9,15,1,15,1,15,5,15,337,8,15,10,15,12,15,340,9,15,
		1,15,1,15,5,15,344,8,15,10,15,12,15,347,9,15,1,15,1,15,1,15,1,15,1,16,
		1,16,5,16,355,8,16,10,16,12,16,358,9,16,1,16,1,16,5,16,362,8,16,10,16,
		12,16,365,9,16,1,16,1,16,5,16,369,8,16,10,16,12,16,372,9,16,1,16,1,16,
		1,16,1,16,1,17,1,17,5,17,380,8,17,10,17,12,17,383,9,17,1,17,1,17,1,17,
		1,17,1,17,1,17,3,17,391,8,17,1,17,1,17,5,17,395,8,17,10,17,12,17,398,9,
		17,1,17,1,17,1,18,1,18,5,18,404,8,18,10,18,12,18,407,9,18,1,18,1,18,1,
		18,5,18,412,8,18,10,18,12,18,415,9,18,1,18,1,18,5,18,419,8,18,10,18,12,
		18,422,9,18,1,18,4,18,425,8,18,11,18,12,18,426,1,18,4,18,430,8,18,11,18,
		12,18,431,1,18,1,18,5,18,436,8,18,10,18,12,18,439,9,18,1,18,1,18,1,19,
		1,19,5,19,445,8,19,10,19,12,19,448,9,19,1,19,1,19,1,19,5,19,453,8,19,10,
		19,12,19,456,9,19,1,19,3,19,459,8,19,1,19,1,19,5,19,463,8,19,10,19,12,
		19,466,9,19,1,20,1,20,5,20,470,8,20,10,20,12,20,473,9,20,1,20,1,20,1,20,
		1,20,1,20,1,20,5,20,481,8,20,10,20,12,20,484,9,20,1,20,1,20,1,21,1,21,
		5,21,490,8,21,10,21,12,21,493,9,21,1,22,1,22,5,22,497,8,22,10,22,12,22,
		500,9,22,1,22,1,22,1,23,1,23,3,23,506,8,23,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,3,24,516,8,24,1,25,1,25,1,25,5,25,521,8,25,10,25,12,25,524,
		9,25,1,25,1,25,5,25,528,8,25,10,25,12,25,531,9,25,1,25,1,25,3,25,535,8,
		25,1,25,5,25,538,8,25,10,25,12,25,541,9,25,1,25,1,25,1,25,5,25,546,8,25,
		10,25,12,25,549,9,25,1,25,1,25,1,25,5,25,554,8,25,10,25,12,25,557,9,25,
		1,25,1,25,5,25,561,8,25,10,25,12,25,564,9,25,1,26,1,26,1,26,1,26,1,27,
		1,27,1,27,1,27,1,27,1,27,5,27,576,8,27,10,27,12,27,579,9,27,1,28,1,28,
		1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,591,8,30,10,30,12,30,594,
		9,30,1,31,1,31,1,31,1,31,1,31,1,31,5,31,602,8,31,10,31,12,31,605,9,31,
		1,32,1,32,1,32,1,32,1,32,1,32,5,32,613,8,32,10,32,12,32,616,9,32,1,33,
		1,33,1,33,1,33,1,33,1,33,5,33,624,8,33,10,33,12,33,627,9,33,1,34,1,34,
		1,34,1,34,1,34,1,34,5,34,635,8,34,10,34,12,34,638,9,34,1,35,1,35,1,35,
		1,35,1,35,1,35,5,35,646,8,35,10,35,12,35,649,9,35,1,36,1,36,1,36,1,36,
		1,36,1,36,5,36,657,8,36,10,36,12,36,660,9,36,1,37,1,37,1,37,1,37,1,37,
		1,37,5,37,668,8,37,10,37,12,37,671,9,37,1,38,1,38,1,38,1,38,1,38,1,38,
		1,38,1,38,1,38,5,38,682,8,38,10,38,12,38,685,9,38,1,39,1,39,1,39,1,39,
		1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,702,8,39,10,
		39,12,39,705,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,716,
		8,40,10,40,12,40,719,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,5,41,733,8,41,10,41,12,41,736,9,41,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,3,42,745,8,42,1,42,0,15,6,50,54,60,62,64,66,68,70,72,74,
		76,78,80,82,43,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,0,
		1,1,0,48,50,807,0,92,1,0,0,0,2,97,1,0,0,0,4,99,1,0,0,0,6,142,1,0,0,0,8,
		153,1,0,0,0,10,179,1,0,0,0,12,182,1,0,0,0,14,207,1,0,0,0,16,218,1,0,0,
		0,18,223,1,0,0,0,20,256,1,0,0,0,22,273,1,0,0,0,24,279,1,0,0,0,26,281,1,
		0,0,0,28,304,1,0,0,0,30,327,1,0,0,0,32,352,1,0,0,0,34,377,1,0,0,0,36,401,
		1,0,0,0,38,442,1,0,0,0,40,467,1,0,0,0,42,487,1,0,0,0,44,494,1,0,0,0,46,
		505,1,0,0,0,48,515,1,0,0,0,50,517,1,0,0,0,52,565,1,0,0,0,54,569,1,0,0,
		0,56,580,1,0,0,0,58,582,1,0,0,0,60,584,1,0,0,0,62,595,1,0,0,0,64,606,1,
		0,0,0,66,617,1,0,0,0,68,628,1,0,0,0,70,639,1,0,0,0,72,650,1,0,0,0,74,661,
		1,0,0,0,76,672,1,0,0,0,78,686,1,0,0,0,80,706,1,0,0,0,82,720,1,0,0,0,84,
		744,1,0,0,0,86,91,3,4,2,0,87,91,3,8,4,0,88,91,5,1,0,0,89,91,5,2,0,0,90,
		86,1,0,0,0,90,87,1,0,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,
		90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,92,1,0,0,0,95,96,5,0,0,1,96,
		1,1,0,0,0,97,98,5,51,0,0,98,3,1,0,0,0,99,103,5,6,0,0,100,102,5,2,0,0,101,
		100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,106,1,
		0,0,0,105,103,1,0,0,0,106,110,5,51,0,0,107,109,5,2,0,0,108,107,1,0,0,0,
		109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,129,1,0,0,0,112,110,
		1,0,0,0,113,117,5,43,0,0,114,116,5,2,0,0,115,114,1,0,0,0,116,119,1,0,0,
		0,117,115,1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,
		124,3,6,3,0,121,123,5,2,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,
		0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,128,5,44,0,0,
		128,130,1,0,0,0,129,113,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,
		5,1,0,0,132,133,3,10,5,0,133,137,5,7,0,0,134,136,5,2,0,0,135,134,1,0,0,
		0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,
		137,1,0,0,0,140,141,5,6,0,0,141,5,1,0,0,0,142,143,6,3,-1,0,143,144,5,51,
		0,0,144,150,1,0,0,0,145,146,10,1,0,0,146,147,5,47,0,0,147,149,5,51,0,0,
		148,145,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,7,
		1,0,0,0,152,150,1,0,0,0,153,157,5,8,0,0,154,156,5,2,0,0,155,154,1,0,0,
		0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,
		157,1,0,0,0,160,163,5,51,0,0,161,162,5,43,0,0,162,164,5,44,0,0,163,161,
		1,0,0,0,163,164,1,0,0,0,164,165,1,0,0,0,165,166,5,1,0,0,166,167,3,10,5,
		0,167,171,5,7,0,0,168,170,5,2,0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,
		169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,5,
		8,0,0,175,9,1,0,0,0,176,178,3,22,11,0,177,176,1,0,0,0,178,181,1,0,0,0,
		179,177,1,0,0,0,179,180,1,0,0,0,180,11,1,0,0,0,181,179,1,0,0,0,182,186,
		5,5,0,0,183,185,5,2,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,
		0,186,187,1,0,0,0,187,192,1,0,0,0,188,186,1,0,0,0,189,191,3,2,1,0,190,
		189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,198,1,
		0,0,0,194,192,1,0,0,0,195,197,5,2,0,0,196,195,1,0,0,0,197,200,1,0,0,0,
		198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,203,
		5,51,0,0,202,204,3,14,7,0,203,202,1,0,0,0,203,204,1,0,0,0,204,13,1,0,0,
		0,205,208,3,18,9,0,206,208,3,16,8,0,207,205,1,0,0,0,207,206,1,0,0,0,208,
		15,1,0,0,0,209,211,5,2,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,
		0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,32,0,0,216,
		219,3,58,29,0,217,219,3,20,10,0,218,212,1,0,0,0,218,217,1,0,0,0,219,17,
		1,0,0,0,220,222,5,2,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,
		0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,230,5,45,0,0,227,
		229,5,2,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,
		0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,237,3,58,29,0,234,236,5,2,0,
		0,235,234,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,
		240,1,0,0,0,239,237,1,0,0,0,240,251,5,46,0,0,241,243,5,2,0,0,242,241,1,
		0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,
		246,244,1,0,0,0,247,248,5,43,0,0,248,249,3,60,30,0,249,250,5,44,0,0,250,
		252,1,0,0,0,251,244,1,0,0,0,251,252,1,0,0,0,252,19,1,0,0,0,253,255,5,2,
		0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,
		259,1,0,0,0,258,256,1,0,0,0,259,260,5,43,0,0,260,261,3,60,30,0,261,262,
		5,44,0,0,262,21,1,0,0,0,263,274,5,2,0,0,264,274,5,1,0,0,265,274,3,12,6,
		0,266,274,3,24,12,0,267,274,3,34,17,0,268,274,3,36,18,0,269,274,3,40,20,
		0,270,274,3,42,21,0,271,274,3,44,22,0,272,274,3,46,23,0,273,263,1,0,0,
		0,273,264,1,0,0,0,273,265,1,0,0,0,273,266,1,0,0,0,273,267,1,0,0,0,273,
		268,1,0,0,0,273,269,1,0,0,0,273,270,1,0,0,0,273,271,1,0,0,0,273,272,1,
		0,0,0,274,23,1,0,0,0,275,280,3,26,13,0,276,280,3,28,14,0,277,280,3,30,
		15,0,278,280,3,32,16,0,279,275,1,0,0,0,279,276,1,0,0,0,279,277,1,0,0,0,
		279,278,1,0,0,0,280,25,1,0,0,0,281,285,5,17,0,0,282,284,5,2,0,0,283,282,
		1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,
		0,287,285,1,0,0,0,288,292,5,43,0,0,289,291,5,2,0,0,290,289,1,0,0,0,291,
		294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,292,1,
		0,0,0,295,299,5,51,0,0,296,298,5,2,0,0,297,296,1,0,0,0,298,301,1,0,0,0,
		299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,302,303,
		5,44,0,0,303,27,1,0,0,0,304,308,5,18,0,0,305,307,5,2,0,0,306,305,1,0,0,
		0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,
		308,1,0,0,0,311,315,5,43,0,0,312,314,5,2,0,0,313,312,1,0,0,0,314,317,1,
		0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,
		318,322,5,51,0,0,319,321,5,2,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,
		1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,322,1,0,0,0,325,326,5,44,0,
		0,326,29,1,0,0,0,327,331,5,19,0,0,328,330,5,2,0,0,329,328,1,0,0,0,330,
		333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,331,1,
		0,0,0,334,338,5,43,0,0,335,337,5,2,0,0,336,335,1,0,0,0,337,340,1,0,0,0,
		338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,338,1,0,0,0,341,345,
		5,51,0,0,342,344,5,2,0,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,
		0,345,346,1,0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,348,349,5,44,0,0,349,
		350,3,10,5,0,350,351,5,21,0,0,351,31,1,0,0,0,352,356,5,20,0,0,353,355,
		5,2,0,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,
		0,357,359,1,0,0,0,358,356,1,0,0,0,359,363,5,43,0,0,360,362,5,2,0,0,361,
		360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,366,1,
		0,0,0,365,363,1,0,0,0,366,370,5,51,0,0,367,369,5,2,0,0,368,367,1,0,0,0,
		369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,370,
		1,0,0,0,373,374,5,44,0,0,374,375,3,10,5,0,375,376,5,21,0,0,376,33,1,0,
		0,0,377,381,5,9,0,0,378,380,5,2,0,0,379,378,1,0,0,0,380,383,1,0,0,0,381,
		379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,385,5,
		43,0,0,385,386,3,58,29,0,386,387,5,44,0,0,387,390,3,10,5,0,388,389,5,10,
		0,0,389,391,3,10,5,0,390,388,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,
		396,5,7,0,0,393,395,5,2,0,0,394,393,1,0,0,0,395,398,1,0,0,0,396,394,1,
		0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,396,1,0,0,0,399,400,5,9,0,0,
		400,35,1,0,0,0,401,405,5,11,0,0,402,404,5,2,0,0,403,402,1,0,0,0,404,407,
		1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,405,1,0,0,
		0,408,409,5,43,0,0,409,413,3,58,29,0,410,412,5,2,0,0,411,410,1,0,0,0,412,
		415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,413,1,
		0,0,0,416,420,5,44,0,0,417,419,5,2,0,0,418,417,1,0,0,0,419,422,1,0,0,0,
		420,418,1,0,0,0,420,421,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,423,425,
		5,1,0,0,424,423,1,0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,
		0,427,429,1,0,0,0,428,430,3,38,19,0,429,428,1,0,0,0,430,431,1,0,0,0,431,
		429,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,437,5,7,0,0,434,436,5,
		2,0,0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,
		438,440,1,0,0,0,439,437,1,0,0,0,440,441,5,11,0,0,441,37,1,0,0,0,442,446,
		5,12,0,0,443,445,5,2,0,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,
		0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,458,3,58,29,0,450,
		454,5,13,0,0,451,453,5,2,0,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,1,
		0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,1,0,0,0,457,459,3,58,29,
		0,458,450,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,464,3,10,5,0,461,
		463,5,2,0,0,462,461,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,1,
		0,0,0,465,39,1,0,0,0,466,464,1,0,0,0,467,471,5,14,0,0,468,470,5,2,0,0,
		469,468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,474,
		1,0,0,0,473,471,1,0,0,0,474,475,5,43,0,0,475,476,3,58,29,0,476,477,5,44,
		0,0,477,478,3,10,5,0,478,482,5,7,0,0,479,481,5,2,0,0,480,479,1,0,0,0,481,
		484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,
		0,0,0,485,486,5,14,0,0,486,41,1,0,0,0,487,491,5,16,0,0,488,490,5,2,0,0,
		489,488,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,43,
		1,0,0,0,493,491,1,0,0,0,494,498,5,15,0,0,495,497,5,2,0,0,496,495,1,0,0,
		0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,
		498,1,0,0,0,501,502,5,51,0,0,502,45,1,0,0,0,503,506,3,52,26,0,504,506,
		3,58,29,0,505,503,1,0,0,0,505,504,1,0,0,0,506,47,1,0,0,0,507,508,5,2,0,
		0,508,516,3,48,24,0,509,516,5,51,0,0,510,516,7,0,0,0,511,512,5,43,0,0,
		512,513,3,58,29,0,513,514,5,44,0,0,514,516,1,0,0,0,515,507,1,0,0,0,515,
		509,1,0,0,0,515,510,1,0,0,0,515,511,1,0,0,0,516,49,1,0,0,0,517,518,6,25,
		-1,0,518,522,3,48,24,0,519,521,5,2,0,0,520,519,1,0,0,0,521,524,1,0,0,0,
		522,520,1,0,0,0,522,523,1,0,0,0,523,562,1,0,0,0,524,522,1,0,0,0,525,529,
		10,2,0,0,526,528,5,2,0,0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,
		0,529,530,1,0,0,0,530,532,1,0,0,0,531,529,1,0,0,0,532,534,5,43,0,0,533,
		535,3,60,30,0,534,533,1,0,0,0,534,535,1,0,0,0,535,539,1,0,0,0,536,538,
		5,2,0,0,537,536,1,0,0,0,538,541,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,
		0,540,542,1,0,0,0,541,539,1,0,0,0,542,561,5,44,0,0,543,547,10,1,0,0,544,
		546,5,2,0,0,545,544,1,0,0,0,546,549,1,0,0,0,547,545,1,0,0,0,547,548,1,
		0,0,0,548,550,1,0,0,0,549,547,1,0,0,0,550,551,5,45,0,0,551,555,3,58,29,
		0,552,554,5,2,0,0,553,552,1,0,0,0,554,557,1,0,0,0,555,553,1,0,0,0,555,
		556,1,0,0,0,556,558,1,0,0,0,557,555,1,0,0,0,558,559,5,46,0,0,559,561,1,
		0,0,0,560,525,1,0,0,0,560,543,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,
		562,563,1,0,0,0,563,51,1,0,0,0,564,562,1,0,0,0,565,566,3,50,25,0,566,567,
		3,56,28,0,567,568,3,58,29,0,568,53,1,0,0,0,569,570,6,27,-1,0,570,571,3,
		52,26,0,571,577,1,0,0,0,572,573,10,1,0,0,573,574,5,47,0,0,574,576,3,52,
		26,0,575,572,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,
		55,1,0,0,0,579,577,1,0,0,0,580,581,5,32,0,0,581,57,1,0,0,0,582,583,3,62,
		31,0,583,59,1,0,0,0,584,585,6,30,-1,0,585,586,3,58,29,0,586,592,1,0,0,
		0,587,588,10,1,0,0,588,589,5,47,0,0,589,591,3,58,29,0,590,587,1,0,0,0,
		591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,61,1,0,0,0,594,592,
		1,0,0,0,595,596,6,31,-1,0,596,597,3,64,32,0,597,603,1,0,0,0,598,599,10,
		1,0,0,599,600,5,42,0,0,600,602,3,64,32,0,601,598,1,0,0,0,602,605,1,0,0,
		0,603,601,1,0,0,0,603,604,1,0,0,0,604,63,1,0,0,0,605,603,1,0,0,0,606,607,
		6,32,-1,0,607,608,3,66,33,0,608,614,1,0,0,0,609,610,10,1,0,0,610,611,5,
		30,0,0,611,613,3,66,33,0,612,609,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,
		0,614,615,1,0,0,0,615,65,1,0,0,0,616,614,1,0,0,0,617,618,6,33,-1,0,618,
		619,3,68,34,0,619,625,1,0,0,0,620,621,10,1,0,0,621,622,5,29,0,0,622,624,
		3,68,34,0,623,620,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,
		0,0,626,67,1,0,0,0,627,625,1,0,0,0,628,629,6,34,-1,0,629,630,3,70,35,0,
		630,636,1,0,0,0,631,632,10,1,0,0,632,633,5,31,0,0,633,635,3,70,35,0,634,
		631,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,69,1,0,
		0,0,638,636,1,0,0,0,639,640,6,35,-1,0,640,641,3,72,36,0,641,647,1,0,0,
		0,642,643,10,1,0,0,643,644,5,39,0,0,644,646,3,72,36,0,645,642,1,0,0,0,
		646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,71,1,0,0,0,649,647,
		1,0,0,0,650,651,6,36,-1,0,651,652,3,74,37,0,652,658,1,0,0,0,653,654,10,
		1,0,0,654,655,5,38,0,0,655,657,3,74,37,0,656,653,1,0,0,0,657,660,1,0,0,
		0,658,656,1,0,0,0,658,659,1,0,0,0,659,73,1,0,0,0,660,658,1,0,0,0,661,662,
		6,37,-1,0,662,663,3,76,38,0,663,669,1,0,0,0,664,665,10,1,0,0,665,666,5,
		41,0,0,666,668,3,76,38,0,667,664,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,
		0,669,670,1,0,0,0,670,75,1,0,0,0,671,669,1,0,0,0,672,673,6,38,-1,0,673,
		674,3,78,39,0,674,683,1,0,0,0,675,676,10,2,0,0,676,677,5,26,0,0,677,682,
		3,78,39,0,678,679,10,1,0,0,679,680,5,27,0,0,680,682,3,78,39,0,681,675,
		1,0,0,0,681,678,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,
		0,684,77,1,0,0,0,685,683,1,0,0,0,686,687,6,39,-1,0,687,688,3,80,40,0,688,
		703,1,0,0,0,689,690,10,4,0,0,690,691,5,23,0,0,691,702,3,80,40,0,692,693,
		10,3,0,0,693,694,5,22,0,0,694,702,3,80,40,0,695,696,10,2,0,0,696,697,5,
		25,0,0,697,702,3,80,40,0,698,699,10,1,0,0,699,700,5,24,0,0,700,702,3,80,
		40,0,701,689,1,0,0,0,701,692,1,0,0,0,701,695,1,0,0,0,701,698,1,0,0,0,702,
		705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,79,1,0,0,0,705,703,1,0,
		0,0,706,707,6,40,-1,0,707,708,3,82,41,0,708,717,1,0,0,0,709,710,10,2,0,
		0,710,711,5,33,0,0,711,716,3,82,41,0,712,713,10,1,0,0,713,714,5,34,0,0,
		714,716,3,82,41,0,715,709,1,0,0,0,715,712,1,0,0,0,716,719,1,0,0,0,717,
		715,1,0,0,0,717,718,1,0,0,0,718,81,1,0,0,0,719,717,1,0,0,0,720,721,6,41,
		-1,0,721,722,3,84,42,0,722,734,1,0,0,0,723,724,10,3,0,0,724,725,5,35,0,
		0,725,733,3,84,42,0,726,727,10,2,0,0,727,728,5,36,0,0,728,733,3,84,42,
		0,729,730,10,1,0,0,730,731,5,37,0,0,731,733,3,84,42,0,732,723,1,0,0,0,
		732,726,1,0,0,0,732,729,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,
		1,0,0,0,735,83,1,0,0,0,736,734,1,0,0,0,737,745,3,50,25,0,738,739,5,34,
		0,0,739,745,3,84,42,0,740,741,5,40,0,0,741,745,3,84,42,0,742,743,5,28,
		0,0,743,745,3,84,42,0,744,737,1,0,0,0,744,738,1,0,0,0,744,740,1,0,0,0,
		744,742,1,0,0,0,745,85,1,0,0,0,85,90,92,103,110,117,124,129,137,150,157,
		163,171,179,186,192,198,203,207,212,218,223,230,237,244,251,256,273,279,
		285,292,299,308,315,322,331,338,345,356,363,370,381,390,396,405,413,420,
		426,431,437,446,454,458,464,471,482,491,498,505,515,522,529,534,539,547,
		555,560,562,577,592,603,614,625,636,647,658,669,681,683,701,703,715,717,
		732,734,744
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace KSPCompiler.Infrastructures.Parser.Antlr
