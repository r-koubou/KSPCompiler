using KSPCompiler.Domain.Symbols.MetaData;

namespace KSPCompiler.Domain.Symbols;

public sealed class VariableSymbol : SymbolBase
{
    #region Properties
    public override SymbolType Type
        => SymbolType.Variable;

    /// <summary>
    /// Number of elements for array type
    /// </summary>
    public int ArraySize { get; set; } = 0;

    // TODO
    /// <summary>
    /// UI type when variable type is UI
    /// </summary>
    /// <seealso cref="DataTypeModifierFlag"/>
    /// <seealso cref="DataTypeModifierFlag.UI"/>
    public UITypeSymbol? UIType {get; set; } = null;

    /// <summary>
    /// Index number when stored in constant pool
    /// </summary>
    public ConstantPoolIndex ConstantIndex { get; set; } = ConstantPoolIndex.Null;

    /// <summary>
    /// Whether the variable is available within `on init` (for built-in variables read from external definition files)
    /// </summary>
    public bool AvailableOnInit { get; set; } = true;

    /// <summary>
    /// Generated by unary operator and literal value
    /// </summary>
    public bool ConstantValueWithSingleOperator { get; set; } = false;
    #endregion ~ Properties

    #region ctor
    public VariableSymbol() {}
    #endregion
}
