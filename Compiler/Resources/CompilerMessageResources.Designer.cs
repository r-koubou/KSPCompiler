//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KSPCompiler.Resources {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class CompilerMessageResources {
        
        private static System.Resources.ResourceManager resourceMan;
        
        private static System.Globalization.CultureInfo resourceCulture;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CompilerMessageResources() {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public static System.Resources.ResourceManager ResourceManager {
            get {
                if (object.Equals(null, resourceMan)) {
                    System.Resources.ResourceManager temp = new System.Resources.ResourceManager("KSPCompiler.Resources.CompilerMessageResources", typeof(CompilerMessageResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public static System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        public static string syntax_error {
            get {
                return ResourceManager.GetString("syntax.error", resourceCulture);
            }
        }
        
        public static string synax_error_detail {
            get {
                return ResourceManager.GetString("synax.error.detail", resourceCulture);
            }
        }
        
        public static string symbol_error_declare_variable_outside {
            get {
                return ResourceManager.GetString("symbol.error.declare.variable.outside", resourceCulture);
            }
        }
        
        public static string symbol_error_declare_variable_builtin {
            get {
                return ResourceManager.GetString("symbol.error.declare.variable.builtin", resourceCulture);
            }
        }
        
        public static string symbol_error_declare_variable_ni_builtin {
            get {
                return ResourceManager.GetString("symbol.error.declare.variable.ni_builtin", resourceCulture);
            }
        }
        
        public static string symbol_error_declare_variable_already {
            get {
                return ResourceManager.GetString("symbol.error.declare.variable.already", resourceCulture);
            }
        }
        
        public static string symbol_error_declare_variable_unkown {
            get {
                return ResourceManager.GetString("symbol.error.declare.variable.unkown", resourceCulture);
            }
        }
        
        public static string symbol_waring_declare_oninit {
            get {
                return ResourceManager.GetString("symbol.waring.declare.oninit", resourceCulture);
            }
        }
        
        public static string symbol_warning_declare_callback_unkown {
            get {
                return ResourceManager.GetString("symbol.warning.declare.callback.unkown", resourceCulture);
            }
        }
        
        public static string symbol_error_declare_callback_already {
            get {
                return ResourceManager.GetString("symbol.error.declare.callback.already", resourceCulture);
            }
        }
        
        public static string symbol_error_declare_userfunction_already {
            get {
                return ResourceManager.GetString("symbol.error.declare.userfunction.already", resourceCulture);
            }
        }
        
        public static string semantic_error_binaryoprator_compatible {
            get {
                return ResourceManager.GetString("semantic.error.binaryoprator.compatible", resourceCulture);
            }
        }
        
        public static string semantic_error_variable_not_declared {
            get {
                return ResourceManager.GetString("semantic.error.variable.not.declared", resourceCulture);
            }
        }
        
        public static string semantic_error_unaryoprator_bitnot_compatible {
            get {
                return ResourceManager.GetString("semantic.error.unaryoprator.bitnot.compatible", resourceCulture);
            }
        }
        
        public static string semantic_error_variable_invalid_string_initializer {
            get {
                return ResourceManager.GetString("semantic.error.variable.invalid.string.initializer", resourceCulture);
            }
        }
        
        public static string semantic_error_string_operator_conditional {
            get {
                return ResourceManager.GetString("semantic.error.string.operator.conditional", resourceCulture);
            }
        }
        
        public static string semantic_error_assign_to_constant {
            get {
                return ResourceManager.GetString("semantic.error.assign.to.constant", resourceCulture);
            }
        }
        
        public static string semantic_error_assign_type_compatible {
            get {
                return ResourceManager.GetString("semantic.error.assign.type.compatible", resourceCulture);
            }
        }
        
        public static string semantic_error_binaryoprator_not_supported {
            get {
                return ResourceManager.GetString("semantic.error.binaryoprator.not.supported", resourceCulture);
            }
        }
        
        public static string semantic_error_unaryoprator_not_supported {
            get {
                return ResourceManager.GetString("semantic.error.unaryoprator.not.supported", resourceCulture);
            }
        }
        
        public static string semantic_error_variable_array_outofbounds {
            get {
                return ResourceManager.GetString("semantic.error.variable.array.outofbounds", resourceCulture);
            }
        }
        
        public static string semantic_error_variable_uninitialized {
            get {
                return ResourceManager.GetString("semantic.error.variable.uninitialized", resourceCulture);
            }
        }
        
        public static string semantic_error_array_subscript_compatible {
            get {
                return ResourceManager.GetString("semantic.error.array.subscript.compatible", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_required_initializer {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.required.initializer", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_noconstant_initializer {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.noconstant.initializer", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_string_initializer {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.string.initializer", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_arraysize {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.arraysize", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_maxarraysize {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.maxarraysize", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_arrayinitilizer_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.arrayinitilizer.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_arrayinitilizer_noconstant {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.arrayinitilizer.noconstant", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_arrayinitilizer_sizeover {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.arrayinitilizer.sizeover", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_cannot_const {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.cannot.const", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_invalid_initializer {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.invalid.initializer", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_uiinitializer_count_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.uiinitializer.count.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_uiinitializer_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.uiinitializer.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_uiinitializer_nonconstant {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.uiinitializer.nonconstant", resourceCulture);
            }
        }
        
        public static string semantic_error_declare_variable_unkown_ui {
            get {
                return ResourceManager.GetString("semantic.error.declare.variable.unkown.ui", resourceCulture);
            }
        }
        
        public static string semantic_warning_command_unknown {
            get {
                return ResourceManager.GetString("semantic.warning.command.unknown", resourceCulture);
            }
        }
        
        public static string semantic_error_command_arg_count {
            get {
                return ResourceManager.GetString("semantic.error.command.arg.count", resourceCulture);
            }
        }
        
        public static string semantic_error_command_arg_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.command.arg.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_error_unaryoprator_logicalnot_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.unaryoprator.logicalnot.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_error_logicaloprator_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.logicaloprator.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_error_if_condition_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.if.condition.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_error_continue_invalid {
            get {
                return ResourceManager.GetString("semantic.error.continue.invalid", resourceCulture);
            }
        }
        
        public static string semantic_error_select_condition_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.select.condition.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_error_select_condition_notvariable {
            get {
                return ResourceManager.GetString("semantic.error.select.condition.notvariable", resourceCulture);
            }
        }
        
        public static string semantic_error_select_case_incompatible {
            get {
                return ResourceManager.GetString("semantic.error.select.case.incompatible", resourceCulture);
            }
        }
        
        public static string semantic_warning_select_case_from_to_noeffect {
            get {
                return ResourceManager.GetString("semantic.warning.select.case.from.to.noeffect", resourceCulture);
            }
        }
        
        public static string semantic_error_select_case_from_grater {
            get {
                return ResourceManager.GetString("semantic.error.select.case.from.grater", resourceCulture);
            }
        }
        
        public static string semantic_error_userfunction_unknown {
            get {
                return ResourceManager.GetString("semantic.error.userfunction.unknown", resourceCulture);
            }
        }
        
        public static string semantic_error_pgs_name_maximam_length {
            get {
                return ResourceManager.GetString("semantic.error.pgs.name.maximam.length", resourceCulture);
            }
        }
        
        public static string semantic_error_assign_to_builtin_variable {
            get {
                return ResourceManager.GetString("semantic.error.assign.to.builtin.variable", resourceCulture);
            }
        }
        
        public static string preprocess_error_symbol_incompatible {
            get {
                return ResourceManager.GetString("preprocess.error.symbol.incompatible", resourceCulture);
            }
        }
    }
}
